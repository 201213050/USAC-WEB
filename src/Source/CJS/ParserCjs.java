
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Source.CJS;

import Source.CJS.Ejecucion.Nodo;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCjs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosCjs.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCjs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCjs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCjs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\052" +
    "\004\000\002\052\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\004\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\046\012\000\002\046\011\000\002\047\003" +
    "\000\002\032\004\000\002\032\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\004\000\002\051\005\000\002\051\010\000" +
    "\002\044\005\000\002\044\003\000\002\045\007\000\002" +
    "\045\011\000\002\045\014\000\002\054\013\000\002\055" +
    "\003\000\002\055\003\000\002\013\005\000\002\013\003" +
    "\000\002\042\006\000\002\042\011\000\002\042\010\000" +
    "\002\042\004\000\002\042\013\000\002\042\013\000\002" +
    "\041\011\000\002\041\015\000\002\043\011\000\002\043" +
    "\012\000\002\040\003\000\002\037\004\000\002\037\003" +
    "\000\002\036\006\000\002\035\005\000\002\034\015\000" +
    "\002\033\006\000\002\033\005\000\002\011\003\000\002" +
    "\011\003\000\002\031\011\000\002\030\005\000\002\026" +
    "\004\000\002\027\007\000\002\025\007\000\002\005\003" +
    "\000\002\024\005\000\002\024\003\000\002\023\005\000" +
    "\002\023\003\000\002\022\004\000\002\022\003\000\002" +
    "\021\005\000\002\021\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\014\005\000\002\014" +
    "\003\000\002\015\005\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\004\000\002\015\003\000" +
    "\002\015\003\000\002\012\005\000\002\012\006\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\003" +
    "\000\002\004\006\000\002\007\005\000\002\010\004\000" +
    "\002\006\005\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\026\004\030\023\027\052\015\053\011\056" +
    "\013\061\004\062\033\064\026\065\035\066\007\001\002" +
    "\000\004\014\363\001\002\000\030\002\ufffd\004\ufffd\023" +
    "\ufffd\052\ufffd\053\ufffd\056\ufffd\061\ufffd\062\ufffd\064\ufffd" +
    "\065\ufffd\066\ufffd\001\002\000\030\002\ufff2\004\ufff2\023" +
    "\ufff2\052\ufff2\053\ufff2\056\ufff2\061\ufff2\062\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\001\002\000\004\014\341\001\002\000" +
    "\030\002\ufff9\004\ufff9\023\ufff9\052\ufff9\053\ufff9\056\ufff9" +
    "\061\ufff9\062\ufff9\064\ufff9\065\ufff9\066\ufff9\001\002\000" +
    "\004\014\335\001\002\000\030\002\ufffc\004\ufffc\023\ufffc" +
    "\052\ufffc\053\ufffc\056\ufffc\061\ufffc\062\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\001\002\000\004\014\327\001\002\000\030" +
    "\002\ufff6\004\ufff6\023\ufff6\052\ufff6\053\ufff6\056\ufff6\061" +
    "\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6\001\002\000\004" +
    "\014\323\001\002\000\030\002\ufff5\004\ufff5\023\ufff5\052" +
    "\ufff5\053\ufff5\056\ufff5\061\ufff5\062\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\001\002\000\030\002\ufffa\004\ufffa\023\ufffa\052" +
    "\ufffa\053\ufffa\056\ufffa\061\ufffa\062\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\001\002\000\030\002\ufff4\004\ufff4\023\ufff4\052" +
    "\ufff4\053\ufff4\056\ufff4\061\ufff4\062\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\001\002\000\030\002\ufffe\004\ufffe\023\ufffe\052" +
    "\ufffe\053\ufffe\056\ufffe\061\ufffe\062\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\001\002\000\004\010\322\001\002\000\030\002" +
    "\ufff8\004\ufff8\023\ufff8\052\ufff8\053\ufff8\056\ufff8\061\ufff8" +
    "\062\ufff8\064\ufff8\065\ufff8\066\ufff8\001\002\000\030\002" +
    "\000\004\030\023\027\052\015\053\011\056\013\061\004" +
    "\062\033\064\026\065\035\066\007\001\002\000\004\010" +
    "\320\001\002\000\004\023\045\001\002\000\016\011\242" +
    "\013\241\014\151\016\240\031\uff94\032\uff94\001\002\000" +
    "\004\013\225\001\002\000\006\031\146\032\147\001\002" +
    "\000\030\002\ufffb\004\ufffb\023\ufffb\052\ufffb\053\ufffb\056" +
    "\ufffb\061\ufffb\062\ufffb\064\ufffb\065\ufffb\066\ufffb\001\002" +
    "\000\004\014\213\001\002\000\030\002\ufff3\004\ufff3\023" +
    "\ufff3\052\ufff3\053\ufff3\056\ufff3\061\ufff3\062\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\001\002\000\004\023\040\001\002\000" +
    "\004\002\037\001\002\000\004\002\001\001\002\000\004" +
    "\014\041\001\002\000\006\015\044\023\045\001\002\000" +
    "\006\012\211\015\uffef\001\002\000\004\015\205\001\002" +
    "\000\004\016\046\001\002\000\014\010\uffdd\011\uffdd\012" +
    "\uffdd\015\uffdd\016\uffdd\001\002\000\026\023\027\052\015" +
    "\053\011\054\064\055\061\056\013\061\004\062\033\064" +
    "\026\066\007\001\002\000\034\017\uffe9\023\uffe9\052\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\uffe9\064\uffe9\066\uffe9\001\002\000\030\017\204" +
    "\023\027\052\015\053\011\054\064\055\061\056\013\061" +
    "\004\062\033\064\026\066\007\001\002\000\034\017\uffe2" +
    "\023\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\062\uffe2\064\uffe2\066\uffe2\001\002" +
    "\000\034\017\uffec\023\uffec\052\uffec\053\uffec\054\uffec\055" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\064\uffec" +
    "\066\uffec\001\002\000\034\017\uffed\023\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\064\uffed\066\uffed\001\002\000\034\017\uffe7\023" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\062\uffe7\064\uffe7\066\uffe7\001\002\000" +
    "\034\017\uffe3\023\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\064\uffe3\066" +
    "\uffe3\001\002\000\034\017\uffe6\023\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\064\uffe6\066\uffe6\001\002\000\034\017\uffea\023\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\064\uffea\066\uffea\001\002\000\004" +
    "\010\202\001\002\000\026\014\071\020\110\021\116\022" +
    "\101\023\111\024\070\025\072\026\115\033\103\047\076" +
    "\001\002\000\034\017\uffe4\023\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\064\uffe4\066\uffe4\001\002\000\034\017\uffe5\023\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\064\uffe5\066\uffe5\001\002\000\004\010" +
    "\067\001\002\000\034\017\uffeb\023\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\064\uffeb\066\uffeb\001\002\000\034\017\uffe8\023\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\062\uffe8\064\uffe8\066\uffe8\001\002\000\034" +
    "\017\uffbe\023\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\064\uffbe\066\uffbe" +
    "\001\002\000\050\010\uff99\011\uff99\012\uff99\015\uff99\017" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\050" +
    "\uff99\051\uff99\001\002\000\026\014\071\020\110\021\116" +
    "\022\101\023\111\024\070\025\072\026\115\033\103\047" +
    "\076\001\002\000\050\010\uff98\011\uff98\012\uff98\015\uff98" +
    "\017\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98" +
    "\050\uff98\051\uff98\001\002\000\016\010\uffb9\012\uffb9\015" +
    "\uffb9\017\uffb9\050\176\051\uffb9\001\002\000\014\010\uffbb" +
    "\012\uffbb\015\uffbb\017\uffbb\051\174\001\002\000\044\010" +
    "\uffaa\012\uffaa\015\uffaa\017\uffaa\033\uffaa\035\133\036\135" +
    "\037\134\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\050\uffaa\051\uffaa\001\002\000\024\014\071" +
    "\020\110\021\116\022\101\023\111\024\070\025\072\026" +
    "\115\033\103\001\002\000\016\010\uffb7\012\uffb7\015\uffb7" +
    "\017\uffb7\050\uffb7\051\uffb7\001\002\000\046\010\uff9d\012" +
    "\uff9d\015\uff9d\017\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\050\uff9d\051\uff9d\001\002\000\050\010\uff9a" +
    "\011\uff9a\012\uff9a\015\uff9a\017\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\050\uff9a\051\uff9a\001\002\000" +
    "\046\010\uffa4\012\uffa4\015\uffa4\017\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\001\002" +
    "\000\024\014\071\020\110\021\116\022\101\023\111\024" +
    "\070\025\072\026\115\033\103\001\002\000\046\010\uff9e" +
    "\012\uff9e\015\uff9e\017\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\050\uff9e\051\uff9e\001\002\000\016\010" +
    "\uffb5\012\uffb5\015\uffb5\017\uffb5\050\uffb5\051\uffb5\001\002" +
    "\000\046\010\uffa6\012\uffa6\015\uffa6\017\uffa6\033\uffa6\034" +
    "\137\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\001" +
    "\002\000\046\010\uffa0\012\uffa0\015\uffa0\017\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0\051\uffa0" +
    "\001\002\000\050\010\uff96\011\uff96\012\uff96\015\uff96\017" +
    "\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\050" +
    "\uff96\051\uff96\001\002\000\060\010\uff94\012\uff94\013\152" +
    "\014\151\015\uff94\016\150\017\uff94\031\uff94\032\uff94\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\050\uff94\051" +
    "\uff94\001\002\000\046\010\uffa2\012\uffa2\015\uffa2\017\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2" +
    "\051\uffa2\001\002\000\052\010\uffa1\012\uffa1\015\uffa1\017" +
    "\uffa1\031\146\032\147\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\046\uffa1\050\uffa1\051\uffa1\001\002\000\036\010\uffb3" +
    "\012\uffb3\015\uffb3\017\uffb3\033\122\040\130\041\124\042" +
    "\125\043\123\044\131\045\127\046\121\050\uffb3\051\uffb3" +
    "\001\002\000\050\010\uff97\011\uff97\012\uff97\015\uff97\017" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050" +
    "\uff97\051\uff97\001\002\000\050\010\uff95\011\uff95\012\uff95" +
    "\015\uff95\017\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\050\uff95\051\uff95\001\002\000\004\010\120\001" +
    "\002\000\034\017\uffbf\023\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\064" +
    "\uffbf\066\uffbf\001\002\000\024\014\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\033\uffaf\001" +
    "\002\000\024\014\071\020\110\021\116\022\101\023\111" +
    "\024\070\025\072\026\115\033\103\001\002\000\024\014" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\033\uffb2\001\002\000\024\014\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\033\uffae" +
    "\001\002\000\024\014\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\033\uffad\001\002\000\024" +
    "\014\071\020\110\021\116\022\101\023\111\024\070\025" +
    "\072\026\115\033\103\001\002\000\024\014\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\033" +
    "\uffb0\001\002\000\024\014\071\020\110\021\116\022\101" +
    "\023\111\024\070\025\072\026\115\033\103\001\002\000" +
    "\024\014\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\033\uffb1\001\002\000\044\010\uffac\012" +
    "\uffac\015\uffac\017\uffac\033\uffac\035\133\036\135\037\134" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\050\uffac\051\uffac\001\002\000\024\014\071\020\110" +
    "\021\116\022\101\023\111\024\070\025\072\026\115\033" +
    "\103\001\002\000\024\014\071\020\110\021\116\022\101" +
    "\023\111\024\070\025\072\026\115\033\103\001\002\000" +
    "\024\014\071\020\110\021\116\022\101\023\111\024\070" +
    "\025\072\026\115\033\103\001\002\000\046\010\uffa8\012" +
    "\uffa8\015\uffa8\017\uffa8\033\uffa8\034\137\035\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\050\uffa8\051\uffa8\001\002\000\024\014\071" +
    "\020\110\021\116\022\101\023\111\024\070\025\072\026" +
    "\115\033\103\001\002\000\046\010\uffa5\012\uffa5\015\uffa5" +
    "\017\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\050\uffa5\051\uffa5\001\002\000\046\010\uffa7\012\uffa7\015" +
    "\uffa7\017\uffa7\033\uffa7\034\137\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\050\uffa7\051\uffa7\001\002\000\046\010\uffa9\012\uffa9" +
    "\015\uffa9\017\uffa9\033\uffa9\034\137\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\050\uffa9\051\uffa9\001\002\000\022\010\uffb4\012" +
    "\uffb4\015\uffb4\017\uffb4\033\122\040\130\050\uffb4\051\uffb4" +
    "\001\002\000\044\010\uffab\012\uffab\015\uffab\017\uffab\033" +
    "\uffab\035\133\036\135\037\134\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\050\uffab\051\uffab\001" +
    "\002\000\046\010\uff91\012\uff91\015\uff91\017\uff91\033\uff91" +
    "\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042" +
    "\uff91\043\uff91\044\uff91\045\uff91\046\uff91\050\uff91\051\uff91" +
    "\001\002\000\046\010\uffc2\012\uffc2\015\uffc2\017\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\050\uffc2\051" +
    "\uffc2\001\002\000\046\010\uffc1\012\uffc1\015\uffc1\017\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\050\uffc1" +
    "\051\uffc1\001\002\000\026\014\071\020\110\021\116\022" +
    "\101\023\111\024\070\025\072\026\115\033\103\047\076" +
    "\001\002\000\030\014\071\015\162\020\110\021\116\022" +
    "\101\023\111\024\070\025\072\026\115\033\103\047\076" +
    "\001\002\000\006\027\155\030\153\001\002\000\004\014" +
    "\160\001\002\000\046\010\uff92\012\uff92\015\uff92\017\uff92" +
    "\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\050\uff92" +
    "\051\uff92\001\002\000\004\014\156\001\002\000\004\015" +
    "\157\001\002\000\046\010\uff90\012\uff90\015\uff90\017\uff90" +
    "\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041" +
    "\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\050\uff90" +
    "\051\uff90\001\002\000\004\015\161\001\002\000\046\010" +
    "\uff8f\012\uff8f\015\uff8f\017\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\050\uff8f\051\uff8f\001\002\000\046" +
    "\010\uff9c\012\uff9c\015\uff9c\017\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\001\002\000" +
    "\006\012\165\015\166\001\002\000\010\012\uffd5\015\uffd5" +
    "\017\uffd5\001\002\000\026\014\071\020\110\021\116\022" +
    "\101\023\111\024\070\025\072\026\115\033\103\047\076" +
    "\001\002\000\046\010\uff9b\012\uff9b\015\uff9b\017\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\050\uff9b\051" +
    "\uff9b\001\002\000\010\012\uffd6\015\uffd6\017\uffd6\001\002" +
    "\000\004\017\171\001\002\000\052\010\uff93\012\uff93\015" +
    "\uff93\017\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93" +
    "\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\050\uff93\051\uff93\001\002\000\046" +
    "\010\uff9f\012\uff9f\015\uff9f\017\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f\001\002\000" +
    "\016\010\uffb6\012\uffb6\015\uffb6\017\uffb6\050\uffb6\051\uffb6" +
    "\001\002\000\026\014\071\020\110\021\116\022\101\023" +
    "\111\024\070\025\072\026\115\033\103\047\076\001\002" +
    "\000\016\010\uffba\012\uffba\015\uffba\017\uffba\050\176\051" +
    "\uffba\001\002\000\026\014\071\020\110\021\116\022\101" +
    "\023\111\024\070\025\072\026\115\033\103\047\076\001" +
    "\002\000\016\010\uffb8\012\uffb8\015\uffb8\017\uffb8\050\uffb8" +
    "\051\uffb8\001\002\000\004\015\201\001\002\000\046\010" +
    "\uffa3\012\uffa3\015\uffa3\017\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\001\002\000\034" +
    "\017\uffe1\023\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\064\uffe1\066\uffe1" +
    "\001\002\000\034\017\uffee\023\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee" +
    "\064\uffee\066\uffee\001\002\000\032\002\ufff0\004\ufff0\015" +
    "\ufff0\023\ufff0\052\ufff0\053\ufff0\056\ufff0\061\ufff0\062\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\001\002\000\004\016\206\001" +
    "\002\000\026\023\027\052\015\053\011\054\064\055\061" +
    "\056\013\061\004\062\033\064\026\066\007\001\002\000" +
    "\030\017\210\023\027\052\015\053\011\054\064\055\061" +
    "\056\013\061\004\062\033\064\026\066\007\001\002\000" +
    "\032\002\ufff1\004\ufff1\015\ufff1\023\ufff1\052\ufff1\053\ufff1" +
    "\056\ufff1\061\ufff1\062\ufff1\064\ufff1\065\ufff1\066\ufff1\001" +
    "\002\000\004\023\212\001\002\000\014\010\uffde\011\uffde" +
    "\012\uffde\015\uffde\016\uffde\001\002\000\026\014\071\020" +
    "\110\021\116\022\101\023\111\024\070\025\072\026\115" +
    "\033\103\047\076\001\002\000\004\015\215\001\002\000" +
    "\004\016\216\001\002\000\026\023\027\052\015\053\011" +
    "\054\064\055\061\056\013\061\004\062\033\064\026\066" +
    "\007\001\002\000\030\017\220\023\027\052\015\053\011" +
    "\054\064\055\061\056\013\061\004\062\033\064\026\066" +
    "\007\001\002\000\044\002\uffce\004\uffce\017\uffce\023\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\063\221\064\uffce\065\uffce\066\uffce" +
    "\001\002\000\004\016\222\001\002\000\026\023\027\052" +
    "\015\053\011\054\064\055\061\056\013\061\004\062\033" +
    "\064\026\066\007\001\002\000\030\017\224\023\027\052" +
    "\015\053\011\054\064\055\061\056\013\061\004\062\033" +
    "\064\026\066\007\001\002\000\042\002\uffcd\004\uffcd\017" +
    "\uffcd\023\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\001\002\000\004\007\226\001\002\000\004\014\227" +
    "\001\002\000\004\024\230\001\002\000\004\012\231\001" +
    "\002\000\006\023\235\065\035\001\002\000\004\015\uffd8" +
    "\001\002\000\004\015\236\001\002\000\004\015\uffd7\001" +
    "\002\000\004\014\151\001\002\000\004\010\237\001\002" +
    "\000\030\002\uffd9\004\uffd9\023\uffd9\052\uffd9\053\uffd9\056" +
    "\uffd9\061\uffd9\062\uffd9\064\uffd9\065\uffd9\066\uffd9\001\002" +
    "\000\026\014\071\020\110\021\116\022\101\023\111\024" +
    "\070\025\072\026\115\033\103\047\076\001\002\000\004" +
    "\006\260\001\002\000\032\004\244\014\071\016\243\020" +
    "\110\021\116\022\101\023\111\024\070\025\072\026\115" +
    "\033\103\047\076\001\002\000\026\014\071\020\110\021" +
    "\116\022\101\023\111\024\070\025\072\026\115\033\103" +
    "\047\076\001\002\000\004\013\247\001\002\000\004\010" +
    "\246\001\002\000\042\002\uffd4\004\uffd4\017\uffd4\023\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\001\002" +
    "\000\004\005\250\001\002\000\004\014\251\001\002\000" +
    "\004\024\252\001\002\000\004\015\253\001\002\000\004" +
    "\010\254\001\002\000\042\002\uffd0\004\uffd0\017\uffd0\023" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\064\uffd0\065\uffd0\066\uffd0\001" +
    "\002\000\006\012\165\017\256\001\002\000\004\010\257" +
    "\001\002\000\042\002\uffd2\004\uffd2\017\uffd2\023\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\064\uffd2\065\uffd2\066\uffd2\001\002\000" +
    "\004\014\261\001\002\000\004\024\262\001\002\000\004" +
    "\012\263\001\002\000\004\024\264\001\002\000\004\015" +
    "\265\001\002\000\004\010\266\001\002\000\042\002\uffcf" +
    "\004\uffcf\017\uffcf\023\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\001\002\000\004\017\270\001\002\000" +
    "\010\011\271\031\uff93\032\uff93\001\002\000\026\014\071" +
    "\020\110\021\116\022\101\023\111\024\070\025\072\026" +
    "\115\033\103\047\076\001\002\000\004\010\273\001\002" +
    "\000\042\002\uffd3\004\uffd3\017\uffd3\023\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\062\uffd3\064\uffd3\065\uffd3\066\uffd3\001\002\000\012\010" +
    "\276\011\277\012\211\016\275\001\002\000\026\014\071" +
    "\020\110\021\116\022\101\023\111\024\070\025\072\026" +
    "\115\033\103\047\076\001\002\000\042\002\uffe0\004\uffe0" +
    "\017\uffe0\023\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\001\002\000\032\004\301\014\071\016\300\020" +
    "\110\021\116\022\101\023\111\024\070\025\072\026\115" +
    "\033\103\047\076\001\002\000\026\014\071\020\110\021" +
    "\116\022\101\023\111\024\070\025\072\026\115\033\103" +
    "\047\076\001\002\000\004\013\304\001\002\000\004\010" +
    "\303\001\002\000\042\002\uffdc\004\uffdc\017\uffdc\023\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\001\002" +
    "\000\004\005\305\001\002\000\004\014\306\001\002\000" +
    "\004\024\307\001\002\000\004\015\310\001\002\000\004" +
    "\010\311\001\002\000\042\002\uffda\004\uffda\017\uffda\023" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\062\uffda\064\uffda\065\uffda\066\uffda\001" +
    "\002\000\006\012\165\017\313\001\002\000\004\010\314" +
    "\001\002\000\042\002\uffdb\004\uffdb\017\uffdb\023\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb" +
    "\061\uffdb\062\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002\000" +
    "\004\017\316\001\002\000\004\010\317\001\002\000\042" +
    "\002\uffdf\004\uffdf\017\uffdf\023\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\001\002\000\030\002\ufff7\004" +
    "\ufff7\023\ufff7\052\ufff7\053\ufff7\056\ufff7\061\ufff7\062\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\001\002\000\030\002\uffff\004" +
    "\uffff\023\uffff\052\uffff\053\uffff\056\uffff\061\uffff\062\uffff" +
    "\064\uffff\065\uffff\066\uffff\001\002\000\042\002\uffd1\004" +
    "\uffd1\017\uffd1\023\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\001\002\000\026\014\071\020\110\021\116" +
    "\022\101\023\111\024\070\025\072\026\115\033\103\047" +
    "\076\001\002\000\004\015\325\001\002\000\004\010\326" +
    "\001\002\000\042\002\uffbc\004\uffbc\017\uffbc\023\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\001\002\000" +
    "\026\014\071\020\110\021\116\022\101\023\111\024\070" +
    "\025\072\026\115\033\103\047\076\001\002\000\004\015" +
    "\331\001\002\000\004\016\332\001\002\000\026\023\027" +
    "\052\015\053\011\054\064\055\061\056\013\061\004\062" +
    "\033\064\026\066\007\001\002\000\030\017\334\023\027" +
    "\052\015\053\011\054\064\055\061\056\013\061\004\062" +
    "\033\064\026\066\007\001\002\000\042\002\uffc0\004\uffc0" +
    "\017\uffc0\023\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\001\002\000\026\014\071\020\110\021\116\022" +
    "\101\023\111\024\070\025\072\026\115\033\103\047\076" +
    "\001\002\000\004\015\337\001\002\000\004\010\340\001" +
    "\002\000\042\002\uffbd\004\uffbd\017\uffbd\023\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061" +
    "\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000\026" +
    "\014\071\020\110\021\116\022\101\023\111\024\070\025" +
    "\072\026\115\033\103\047\076\001\002\000\004\015\344" +
    "\001\002\000\004\015\uffca\001\002\000\004\016\345\001" +
    "\002\000\004\060\347\001\002\000\010\017\uffc8\057\uffc8" +
    "\060\uffc8\001\002\000\016\020\110\021\116\022\101\024" +
    "\070\025\072\026\115\001\002\000\010\017\352\057\354" +
    "\060\347\001\002\000\004\017\357\001\002\000\042\002" +
    "\uffcc\004\uffcc\017\uffcc\023\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\064" +
    "\uffcc\065\uffcc\066\uffcc\001\002\000\010\017\uffc9\057\uffc9" +
    "\060\uffc9\001\002\000\004\011\355\001\002\000\026\023" +
    "\027\052\015\053\011\054\064\055\061\056\013\061\004" +
    "\062\033\064\026\066\007\001\002\000\030\017\uffc6\023" +
    "\027\052\015\053\011\054\064\055\061\056\013\061\004" +
    "\062\033\064\026\066\007\001\002\000\042\002\uffcb\004" +
    "\uffcb\017\uffcb\023\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\064\uffcb\065" +
    "\uffcb\066\uffcb\001\002\000\004\011\361\001\002\000\026" +
    "\023\027\052\015\053\011\054\064\055\061\056\013\061" +
    "\004\062\033\064\026\066\007\001\002\000\034\017\uffc7" +
    "\023\027\052\015\053\011\054\064\055\061\056\013\057" +
    "\uffc7\060\uffc7\061\004\062\033\064\026\066\007\001\002" +
    "\000\006\023\366\064\365\001\002\000\004\010\374\001" +
    "\002\000\004\023\371\001\002\000\004\011\367\001\002" +
    "\000\026\014\071\020\110\021\116\022\101\023\111\024" +
    "\070\025\072\026\115\033\103\047\076\001\002\000\004" +
    "\010\uffc3\001\002\000\004\011\372\001\002\000\026\014" +
    "\071\020\110\021\116\022\101\023\111\024\070\025\072" +
    "\026\115\033\103\047\076\001\002\000\004\010\uffc4\001" +
    "\002\000\026\014\071\020\110\021\116\022\101\023\111" +
    "\024\070\025\072\026\115\033\103\047\076\001\002\000" +
    "\004\010\376\001\002\000\006\031\146\032\147\001\002" +
    "\000\004\015\u0100\001\002\000\004\016\u0101\001\002\000" +
    "\026\023\027\052\015\053\011\054\064\055\061\056\013" +
    "\061\004\062\033\064\026\066\007\001\002\000\030\017" +
    "\u0103\023\027\052\015\053\011\054\064\055\061\056\013" +
    "\061\004\062\033\064\026\066\007\001\002\000\042\002" +
    "\uffc5\004\uffc5\017\uffc5\023\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\044\002\035\004\030\010\021\012\024\025" +
    "\007\027\016\031\017\034\015\041\005\042\022\043\033" +
    "\045\031\046\004\051\011\052\023\053\020\054\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\030\010\021\012\024\025\007\027\016\031" +
    "\017\034\015\041\005\042\022\043\033\045\031\046\004" +
    "\051\011\053\320\054\013\001\001\000\002\001\001\000" +
    "\004\044\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\041\047" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\030\010\021\012" +
    "\057\025\050\026\061\027\054\030\062\031\055\032\047" +
    "\034\053\041\046\042\056\043\065\045\064\050\052\051" +
    "\051\001\001\000\002\001\001\000\040\004\030\010\021" +
    "\012\057\025\050\026\061\027\054\030\062\031\055\034" +
    "\053\041\046\042\056\043\065\045\064\050\202\051\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\111\004" +
    "\112\005\116\007\077\010\103\012\106\014\105\015\101" +
    "\016\074\017\113\021\104\022\076\023\072\024\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\111\004\112\005\177\007\077" +
    "\010\103\012\106\014\105\015\101\016\074\017\113\021" +
    "\104\022\076\023\072\024\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\111\004\112\007\077\010\103\012\106\014\105" +
    "\015\101\016\074\017\113\021\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\111\004\112\007\077\010\103\012\106\015" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\144\001\001\000\004" +
    "\020\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\111\004\112\007\077\010\103\012\106\014\105\015" +
    "\101\016\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\111\004\112\007\077\010" +
    "\103\012\106\014\105\015\101\016\074\017\142\001\001" +
    "\000\002\001\001\000\022\003\111\004\112\007\077\010" +
    "\103\012\106\014\105\015\101\016\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\111\004\112\007" +
    "\077\010\103\012\106\014\141\015\101\001\001\000\020" +
    "\003\111\004\112\007\077\010\103\012\106\014\140\015" +
    "\101\001\001\000\020\003\111\004\112\007\077\010\103" +
    "\012\106\014\135\015\101\001\001\000\002\001\001\000" +
    "\016\003\111\004\112\007\077\010\103\012\106\015\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\111\004" +
    "\112\005\167\007\077\010\103\012\106\014\105\015\101" +
    "\016\074\017\113\021\104\022\076\023\072\024\073\001" +
    "\001\000\040\003\111\004\112\005\163\007\077\010\103" +
    "\012\106\013\162\014\105\015\101\016\074\017\113\021" +
    "\104\022\076\023\072\024\073\001\001\000\004\006\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\111\004\112\005\166\007\077" +
    "\010\103\012\106\014\105\015\101\016\074\017\113\021" +
    "\104\022\076\023\072\024\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\111\004\112" +
    "\007\077\010\103\012\106\014\105\015\101\016\074\017" +
    "\113\021\104\022\076\023\174\001\001\000\002\001\001" +
    "\000\030\003\111\004\112\007\077\010\103\012\106\014" +
    "\105\015\101\016\074\017\113\021\104\022\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\030\010\021\012\057\025\050\026" +
    "\061\027\054\030\062\031\055\032\206\034\053\041\046" +
    "\042\056\043\065\045\064\050\052\051\051\001\001\000" +
    "\040\004\030\010\021\012\057\025\050\026\061\027\054" +
    "\030\062\031\055\034\053\041\046\042\056\043\065\045" +
    "\064\050\202\051\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\111\004\112\005" +
    "\213\007\077\010\103\012\106\014\105\015\101\016\074" +
    "\017\113\021\104\022\076\023\072\024\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\030\010\021" +
    "\012\057\025\050\026\061\027\054\030\062\031\055\032" +
    "\216\034\053\041\046\042\056\043\065\045\064\050\052" +
    "\051\051\001\001\000\040\004\030\010\021\012\057\025" +
    "\050\026\061\027\054\030\062\031\055\034\053\041\046" +
    "\042\056\043\065\045\064\050\202\051\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\030\010\021" +
    "\012\057\025\050\026\061\027\054\030\062\031\055\032" +
    "\222\034\053\041\046\042\056\043\065\045\064\050\052" +
    "\051\051\001\001\000\040\004\030\010\021\012\057\025" +
    "\050\026\061\027\054\030\062\031\055\034\053\041\046" +
    "\042\056\043\065\045\064\050\202\051\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\233\046\231\055" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\111\004\112\005\266\007\077\010\103" +
    "\012\106\014\105\015\101\016\074\017\113\021\104\022" +
    "\076\023\072\024\073\001\001\000\002\001\001\000\036" +
    "\003\111\004\112\005\244\007\077\010\103\012\106\014" +
    "\105\015\101\016\074\017\113\021\104\022\076\023\072" +
    "\024\073\001\001\000\040\003\111\004\112\005\163\007" +
    "\077\010\103\012\106\013\254\014\105\015\101\016\074" +
    "\017\113\021\104\022\076\023\072\024\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\111\004\112\005\271" +
    "\007\077\010\103\012\106\014\105\015\101\016\074\017" +
    "\113\021\104\022\076\023\072\024\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\111\004\112\005\314\007\077\010\103\012\106\014\105" +
    "\015\101\016\074\017\113\021\104\022\076\023\072\024" +
    "\073\001\001\000\002\001\001\000\036\003\111\004\112" +
    "\005\301\007\077\010\103\012\106\014\105\015\101\016" +
    "\074\017\113\021\104\022\076\023\072\024\073\001\001" +
    "\000\040\003\111\004\112\005\163\007\077\010\103\012" +
    "\106\013\311\014\105\015\101\016\074\017\113\021\104" +
    "\022\076\023\072\024\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\111\004\112\005\323\007\077\010" +
    "\103\012\106\014\105\015\101\016\074\017\113\021\104" +
    "\022\076\023\072\024\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\111\004\112" +
    "\005\327\007\077\010\103\012\106\014\105\015\101\016" +
    "\074\017\113\021\104\022\076\023\072\024\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\030\010" +
    "\021\012\057\025\050\026\061\027\054\030\062\031\055" +
    "\032\332\034\053\041\046\042\056\043\065\045\064\050" +
    "\052\051\051\001\001\000\040\004\030\010\021\012\057" +
    "\025\050\026\061\027\054\030\062\031\055\034\053\041" +
    "\046\042\056\043\065\045\064\050\202\051\051\001\001" +
    "\000\002\001\001\000\036\003\111\004\112\005\335\007" +
    "\077\010\103\012\106\014\105\015\101\016\074\017\113" +
    "\021\104\022\076\023\072\024\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\111" +
    "\004\112\005\342\007\077\010\103\012\106\014\105\015" +
    "\101\016\074\017\113\021\104\022\076\023\072\024\073" +
    "\040\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\345\037\347\001\001\000\002" +
    "\001\001\000\004\003\357\001\001\000\006\035\350\036" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\030\010\021\012" +
    "\057\025\050\026\061\027\054\030\062\031\055\032\355" +
    "\034\053\041\046\042\056\043\065\045\064\050\052\051" +
    "\051\001\001\000\040\004\030\010\021\012\057\025\050" +
    "\026\061\027\054\030\062\031\055\034\053\041\046\042" +
    "\056\043\065\045\064\050\202\051\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\030\010\021\012" +
    "\057\025\050\026\061\027\054\030\062\031\055\032\361" +
    "\034\053\041\046\042\056\043\065\045\064\050\052\051" +
    "\051\001\001\000\040\004\030\010\021\012\057\025\050" +
    "\026\061\027\054\030\062\031\055\034\053\041\046\042" +
    "\056\043\065\045\064\050\202\051\051\001\001\000\004" +
    "\033\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\111\004\112\005\367\007\077" +
    "\010\103\012\106\014\105\015\101\016\074\017\113\021" +
    "\104\022\076\023\072\024\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\111\004\112\005\372\007" +
    "\077\010\103\012\106\014\105\015\101\016\074\017\113" +
    "\021\104\022\076\023\072\024\073\001\001\000\002\001" +
    "\001\000\036\003\111\004\112\005\374\007\077\010\103" +
    "\012\106\014\105\015\101\016\074\017\113\021\104\022" +
    "\076\023\072\024\073\001\001\000\002\001\001\000\004" +
    "\011\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\030\010\021\012\057\025\050\026\061\027\054" +
    "\030\062\031\055\032\u0101\034\053\041\046\042\056\043" +
    "\065\045\064\050\052\051\051\001\001\000\040\004\030" +
    "\010\021\012\057\025\050\026\061\027\054\030\062\031" +
    "\055\034\053\041\046\042\056\043\065\045\064\050\202" +
    "\051\051\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico_cjs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico_cjs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico_cjs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo Raiz=null;
    public static LinkedList<ErrorCjs> TablaES = new LinkedList<ErrorCjs>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        ErrorCjs datos = new ErrorCjs(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        ErrorCjs datos = new ErrorCjs(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico_cjs$actions {



  private final ParserCjs parser;

  /** Constructor */
  CUP$sintactico_cjs$actions(ParserCjs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico_cjs$do_action_part00000000(
    int                        CUP$sintactico_cjs$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_cjs$parser,
    java.util.Stack            CUP$sintactico_cjs$stack,
    int                        CUP$sintactico_cjs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico_cjs$result;

      /* select the action based on the action number */
      switch (CUP$sintactico_cjs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		RESULT = start_val;
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico_cjs$parser.done_parsing();
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_CJS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo root=new Nodo("INICIO_CJS");
                                    Nodo hijo=a;
                                    root.agregarHijo(hijo);
                                    
                                    Raiz=root;
                                    System.out.println("END_PARSER");
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_CJS ::= L_CJS CJS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    Nodo hijo=n2;
                                    nodo.agregarHijo(hijo);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("L_CJS",40, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_CJS ::= CJS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=new Nodo("L_CJS");
                                    Nodo hijo=n1;
                                    nodo.agregarHijo(hijo);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("L_CJS",40, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CJS ::= DECL_METFUN 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CJS ::= DECLARACION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CJS ::= DECLASIG 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CJS ::= SENTEIMPRIMIR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CJS ::= SENTEMENSAJE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CJS ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CJS ::= CALL_METFUN pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CJS ::= EVENTOBSERVADOR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CJS ::= SENTEFOR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CJS ::= SENTEMIENTRAS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CJS ::= SENTESELECC 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CJS ::= SENTEIF 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECL_METFUN ::= funcion id para PARAMETROS parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                    Nodo nodo=new Nodo("METFUNC",n1right,n1left);
                                    Nodo hijo1=new Nodo("ID",n2.toString().toLowerCase(),n2right,n2left);
                                    Nodo hijo2=n3;
                                    Nodo hijo3=n4;

                                    nodo.agregarHijo(hijo1);
                                    nodo.agregarHijo(hijo2);
                                    nodo.agregarHijo(hijo3);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECL_METFUN",36, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECL_METFUN ::= funcion id para parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                    Nodo nodo=new Nodo("METFUNC",n1right,n1left);
                                    Nodo hijo1=new Nodo("ID",n2.toString().toLowerCase(),n2right,n2left);
                                    Nodo hijo2=n3;

                                    nodo.agregarHijo(hijo1);
                                    nodo.agregarHijo(hijo2);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECL_METFUN",36, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS ::= LVAR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",37, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIST_SENTE ::= LIST_SENTE SENTENCIA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    Nodo hijo=n2;
                                    nodo.agregarHijo(hijo);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LIST_SENTE",24, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LIST_SENTE ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=new Nodo("LIST_SENTE");
                                    Nodo hijo=n1;
                                    nodo.agregarHijo(hijo);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LIST_SENTE",24, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= DECLARACION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DECLASIG 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTEIF 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTESELECC 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTEFOR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTEMIENTRAS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTERETORNAR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTEDETENER 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTEIMPRIMIR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTEMENSAJE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= CALL_METFUN pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= dimv LVAR pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("DECLVAR",n1right,n1left);
                                                        Nodo hijo=n2;
                                                        nodo.agregarHijo(hijo);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLARACION",39, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= dimv LVAR allav EXPRESION cllav pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("DECLVECT",n1right,n1left);
                                                        Nodo hijo1=n2;

                                                        Nodo hijo2=n3;

                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLARACION",39, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LVAR ::= LVAR comma id 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        Nodo hijo=new Nodo("VAR",n2.toString().toLowerCase(),n2right,n2left);
                                                        nodo.agregarHijo(hijo);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LVAR",34, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LVAR ::= id 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=new Nodo("LVAR");
                                                        Nodo hijo=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        nodo.agregarHijo(hijo);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LVAR",34, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLASIG ::= dimv LVAR dpuntos EXPRESION pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("DECLASIGVAR");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=n1;
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLASIG",35, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLASIG ::= dimv LVAR dpuntos allav LEXPR cllav pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("DECLASIGVECT");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=n1;
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLASIG",35, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLASIG ::= dimv LVAR dpuntos documento punto obtener para cadena parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("DECLASIGOBJ");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=n1;
                                                        hijo2=new Nodo("CAD", n2.toString().replace("\"", ""),n2right,n2left);
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLASIG",35, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EVENTOBSERVADOR ::= documento punto observador para cadena comma EVTOBSER parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("EVENTOBSERVADOR");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=new Nodo("CAD", n1.toString().replace("\"", ""),n1right,n1left);
                                                        hijo2=n3;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EVENTOBSERVADOR",42, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EVTOBSER ::= DECL_METFUN 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EVTOBSER",43, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EVTOBSER ::= CALL_METFUN 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EVTOBSER",43, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LEXPR ::= LEXPR comma EXPRESION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        Nodo hijo=n2;
                                                        nodo.agregarHijo(hijo);
                                                        RESULT = nodo;
                                                        
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LEXPR",9, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LEXPR ::= EXPRESION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=new Nodo("LEXPR");
                                                        Nodo hijo=n1;
                                                        nodo.agregarHijo(hijo);
                                                        RESULT = nodo;
                                                        
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LEXPR",9, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= id dpuntos EXPRESION pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("ASIG_VAR");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= id allav EXPRESION cllav dpuntos EXPRESION pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("ASIG_POSVECT");
                                                        Nodo hijo1,hijo2,hijo3;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;
                                                        hijo3=n3;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        nodo.agregarHijo(hijo3);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= id dpuntos allav LEXPR cllav pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("ASIG_VECT");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= OPSIMPLE pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=n1;
                                                        
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= id dpuntos documento punto obtener para cadena parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo =new Nodo("ASIG_OBJ");
                                                        Nodo hijo1, hijo2;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2= new Nodo("CAD", n2.toString().replace("\"", ""),n2right,n2left);
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT=nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= id punto setelemento para cadena comma cadena parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo =new Nodo("SET_OBJ");
                                                        Nodo hijo1, hijo2,hijo3;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2= new Nodo("CAD", n2.toString().replace("\"", ""),n2right,n2left);
                                                        hijo3= new Nodo("CAD", n3.toString().replace("\"", ""),n3right,n3left);
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        nodo.agregarHijo(hijo3);
                                                        RESULT=nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTEIF ::= si para EXPRESION parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("IF",n1right,n1left);
                                                        nodo.agregarHijos(n2,n3);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEIF",31, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTEIF ::= si para EXPRESION parc allav LIST_SENTE cllav sino allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("IF",n1right,n1left);
                                                        nodo.agregarHijos(n2,n3);
                                                        nodo.agregarHijo(n4);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEIF",31, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTESELECC ::= selecciona para VALCASO parc allav LCASOS cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("SELECCIONAR",n1right,n1left);
                                                        nodo.agregarHijos(n2,n3);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTESELECC",33, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTESELECC ::= selecciona para VALCASO parc allav LCASOS CDEFECTO cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("SELECCIONAR",n1right,n1left);
                                                        nodo.agregarHijos(n2,n3);
                                                        nodo.agregarHijo(n4);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTESELECC",33, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALCASO ::= EXPRESION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VALCASO",30, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LCASOS ::= LCASOS CASOS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        nodo.agregarHijo(n2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LCASOS",29, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LCASOS ::= CASOS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=new Nodo("LCASOS");
                                                        nodo.agregarHijo(n1);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LCASOS",29, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASOS ::= caso VPUNTUAL dpuntos LIST_SENTE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                            Nodo nodo=new Nodo("CASOS",n1right,n1left);
                                                            nodo.agregarHijos(n2,n3);
                                                            RESULT = nodo;
                                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CASOS",28, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CDEFECTO ::= defecto dpuntos LIST_SENTE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo = new Nodo("CDEFECTO",n1right,n1left);
                                                        nodo.agregarHijo(n2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CDEFECTO",27, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTEFOR ::= spara para DECLFOR pcoma EXPRESION pcoma ACCION parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n5 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("FOR",n1right,n1left);
                                                        nodo.agregarHijo(n2);
                                                        nodo.agregarHijo(n3);
                                                        nodo.agregarHijo(n4);
                                                        nodo.agregarHijo(n5);

                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEFOR",26, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLFOR ::= dimv id dpuntos EXPRESION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=new Nodo("DECLASIGVAR",n1right,n1left);
                                                        
                                                        Nodo hijo1,hijo2;
                                                        hijo1 = new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;

                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLFOR",25, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLFOR ::= id dpuntos EXPRESION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=new Nodo("ASIG_VAR",n1right,n1left);
                                                        Nodo hijo1,hijo2;
                                                        
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                        

                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLFOR",25, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ACCION ::= inc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                            Nodo nodo= new Nodo("INCR",n1.toString(),n1right,n1left);
                            RESULT=nodo;
                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ACCION",7, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ACCION ::= dec 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                            Nodo nodo= new Nodo("DECR",n1.toString(),n1right,n1left);
                            RESULT=nodo;
                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ACCION",7, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTEMIENTRAS ::= mientras para EXPRESION parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                                                    Nodo nodo=new Nodo("MIENTRAS",n1right,n1left);
                                                                                    nodo.agregarHijos(n2,n3);
                                                                                    RESULT = nodo;
                                                                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEMIENTRAS",23, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTERETORNAR ::= retornar EXPRESION pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                                Nodo nodo=new Nodo("RETORNAR",n1right,n1left);
                                                                nodo.agregarHijo(n2);
                                                                RESULT = nodo;
                                                            
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTERETORNAR",22, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTEDETENER ::= detener pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                                Nodo nodo=new Nodo("DETENER",n1right,n1left);
                                                                RESULT = nodo;
                                                            
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEDETENER",20, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTEIMPRIMIR ::= imprimir para EXPRESION parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                                Nodo nodo=new Nodo("IMPRIMIR",n1right,n1left);
                                                                nodo.agregarHijo(n2);
                                                                RESULT = nodo;
                                                            
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEIMPRIMIR",21, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTEMENSAJE ::= mensaje para EXPRESION parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                                Nodo nodo=new Nodo("MENSAJE",n1right,n1left);
                                                                nodo.agregarHijo(n2);
                                                                RESULT = nodo;
                                                            
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEMENSAJE",19, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPOR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=n1;
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPOR ::= EXPOR lor EXPAND 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=new Nodo(n2.toString(),n2right,n2left);
                                            nodo.agregarHijo(n1);
                                            nodo.agregarHijo(n3);
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPOR",18, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPOR ::= EXPAND 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=n1;
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPOR",18, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPAND ::= EXPAND land EXPNOT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=new Nodo(n2.toString(),n2right,n2left);
                                            nodo.agregarHijo(n1);
                                            nodo.agregarHijo(n3);
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPAND",17, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPAND ::= EXPNOT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=n1;
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPAND",17, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPNOT ::= lnot RELACIONAL 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=new Nodo(n1.toString(),n1right,n1left);
                                            nodo.agregarHijo(n2);
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPNOT",16, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPNOT ::= RELACIONAL 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=n1;
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPNOT",16, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RELACIONAL ::= EXPARITMETICA OPRELACIONAL EXPARITMETICA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                                        Nodo nodo=n2;
                                                                        nodo.agregarHijo(n1);
                                                                        nodo.agregarHijo(n3);
                                                                        RESULT = nodo;
                                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RELACIONAL ::= EXPARITMETICA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                                        Nodo nodo=n1;
                                                                        RESULT = nodo;
                                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPRELACIONAL ::= menorq 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPRELACIONAL ::= mayorq 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPRELACIONAL ::= menorigual 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPRELACIONAL ::= mayorigual 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPRELACIONAL ::= igualigual 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPRELACIONAL ::= diferente 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPARITMETICA ::= EXPARITMETICA mas T 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPARITMETICA",13, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPARITMETICA ::= EXPARITMETICA menos T 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPARITMETICA",13, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPARITMETICA ::= T 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo=n1;
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPARITMETICA",13, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // T ::= T por F 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // T ::= T div F 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // T ::= T modulo F 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // T ::= F 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo=n1;
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // F ::= F potencia G 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("F",10, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // F ::= G 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo=n1;
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("F",10, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // G ::= para EXPRESION parc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // G ::= VPUNTUAL 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // G ::= VACCESO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // G ::= CALL_METFUN 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // G ::= menos G 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo=new Nodo("_", n1right,n1left);
                                        nodo.agregarHijo(n2);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // G ::= OPSIMPLE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // G ::= CPRIMITIVAS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CALL_METFUN ::= id para parc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                        Nodo nodo=new Nodo("CALL_METFUN");
                                        
                                        Nodo hijo=new Nodo("ID",n1.toString().toLowerCase(),n1right,n1left);
                                        nodo.agregarHijo(hijo);

                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CALL_METFUN",8, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CALL_METFUN ::= id para LEXPR parc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                        Nodo nodo=new Nodo("CALL_METFUN");
                                        
                                        Nodo hijo=new Nodo("ID",n1.toString().toLowerCase(),n1right,n1left);
                                        nodo.agregarHijo(hijo);

                                        Nodo hijo2;
                                        hijo2=n2;
                                        nodo.agregarHijo(hijo2);

                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CALL_METFUN",8, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VPUNTUAL ::= num 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		  Nodo nodo;
                        nodo= new Nodo("NUM", n1.toString(),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VPUNTUAL ::= cadena 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                        Nodo nodo;
                        nodo= new Nodo("CAD", n1.toString().replace("\"", ""),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VPUNTUAL ::= fecha 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                        Nodo nodo;
                        nodo= new Nodo("FECHA", n1.toString().replace("\'", ""),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VPUNTUAL ::= fechah 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                        Nodo nodo;
                        nodo= new Nodo("FECHAHORA", n1.toString().replace("\'", ""),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VPUNTUAL ::= verdadero 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                        Nodo nodo;
                        nodo= new Nodo("BOOL", n1.toString(),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VPUNTUAL ::= falso 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                        Nodo nodo;
                        nodo= new Nodo("BOOL", n1.toString(),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VACCESO ::= id 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		  
                        Nodo nodo=new Nodo("VACCESO");
                        Nodo hijo;
                        hijo=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                        nodo.agregarHijo(hijo);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VACCESO",2, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VACCESO ::= id allav EXPRESION cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		   
                                        Nodo nodo=new Nodo("VACCESOVECT");
                                        
                                        Nodo hijo1, hijo2;
                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                        nodo.agregarHijo(hijo1);

                                        hijo2=n2;
                                        nodo.agregarHijo(hijo2);
                                        
                                        RESULT=nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VACCESO",2, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CPRIMITIVAS ::= id punto PRIMITIVAS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo=new Nodo("CPRIMITIVAS");
                                        Nodo nodo1,nodo2;

                                        nodo1= new Nodo("VAR",n1.toString(),n1right,n1left);
                                        nodo.agregarHijo(nodo1);

                                        nodo2=n2;
                                        nodo.agregarHijo(nodo2);

                                        RESULT=nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CPRIMITIVAS",5, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPSIMPLE ::= VACCESO ACCION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo("OPSIMPLE");
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n2);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPSIMPLE",6, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PRIMITIVAS ::= conteo para parc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                        Nodo nodo=new Nodo("CONTEO",n1.toString(),n1right,n1left);
                                        RESULT= nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("PRIMITIVAS",4, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PRIMITIVAS ::= atexto para parc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                        Nodo nodo=new Nodo("ATEXTO",n1.toString(),n1right,n1left);
                                        RESULT= nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("PRIMITIVAS",4, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico_cjs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico_cjs$do_action(
    int                        CUP$sintactico_cjs$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_cjs$parser,
    java.util.Stack            CUP$sintactico_cjs$stack,
    int                        CUP$sintactico_cjs$top)
    throws java.lang.Exception
    {
              return CUP$sintactico_cjs$do_action_part00000000(
                               CUP$sintactico_cjs$act_num,
                               CUP$sintactico_cjs$parser,
                               CUP$sintactico_cjs$stack,
                               CUP$sintactico_cjs$top);
    }
    }

}
