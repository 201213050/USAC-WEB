/* The following code was generated by JFlex 1.6.1 */


/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package Source.CJS.Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/*------------  2da Area: Opciones y Declaraciones ---------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico_cjs.jflex</tt>
 */
public class lexico_cjs implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0, 15,  0,  0,  0,  0,  0,  0,  7,  6, 58,  7,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 37, 28,  0,  0, 33, 40,  8, 34, 35, 10, 31, 30, 24,  4,  9, 
    14, 13, 11, 12, 27, 27,  1,  1,  1,  1, 26, 29, 38, 36, 39,  0, 
     0, 48, 57, 52, 17, 46, 47, 20,  2, 19, 56,  2, 49, 42, 53, 22, 
    55,  2, 44, 51, 21, 45, 43,  2, 54,  2,  2,  0,  0,  0, 32,  3, 
     0, 48, 57, 52, 17, 46, 47, 20,  2, 19, 56,  2, 49, 42, 53, 22, 
    55,  2, 44, 51, 21, 45, 43,  2, 54,  2,  2, 16, 41, 23,  0,  0, 
     0,  0,  0,  0,  0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    25,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\1\1\6"+
    "\1\7\1\10\1\3\1\1\3\3\1\11\1\12\1\13"+
    "\1\1\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\1\1\23\1\24\1\25\2\1\4\3\1\1\3\3"+
    "\2\0\2\26\4\0\3\3\1\0\3\3\1\27\1\0"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\0\6\3\1\40\1\0\1\40\4\3\1\2\1\0"+
    "\2\26\3\0\4\3\1\0\3\3\1\0\1\3\1\0"+
    "\6\3\3\0\4\3\1\0\2\3\10\0\2\41\3\3"+
    "\1\0\1\3\1\42\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\1\0\2\3\1\43\2\0\1\43\3\3"+
    "\2\44\1\45\3\26\1\0\1\26\5\0\3\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\2\3\1\0"+
    "\1\3\2\46\1\3\2\0\3\3\1\0\2\26\2\0"+
    "\1\26\5\0\3\3\1\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\2\3\1\0\1\3\1\47\2\0\2\3"+
    "\1\50\4\0\1\3\1\51\1\52\1\0\1\3\1\53"+
    "\1\0\1\3\1\0\1\3\2\54\1\3\2\55\2\0"+
    "\2\3\2\0\1\3\2\56\1\0\1\3\2\57\1\60"+
    "\2\0\2\3\2\0\1\61\1\0\1\3\2\0\2\3"+
    "\2\0\2\62\1\0\1\63\1\3\1\63\2\0\2\64"+
    "\16\0\2\26\1\0\1\65\22\0\2\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\73\0\u0127"+
    "\0\73\0\73\0\73\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e"+
    "\0\73\0\u0289\0\73\0\u02c4\0\73\0\73\0\u02ff\0\73"+
    "\0\73\0\73\0\73\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426"+
    "\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe"+
    "\0\u0639\0\u0674\0\u06af\0\u06ea\0\73\0\u0725\0\u0760\0\u079b"+
    "\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\73\0\u02c4\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad"+
    "\0\u0674\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2"+
    "\0\u140d\0\u1448\0\u1483\0\u14be\0\u0d5e\0\u14f9\0\u1534\0\u156f"+
    "\0\u15aa\0\u15e5\0\73\0\261\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\261\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e"+
    "\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\73\0\u1a0b"+
    "\0\u1a46\0\261\0\u1a81\0\u1abc\0\u1af7\0\73\0\261\0\261"+
    "\0\u1b32\0\u1b6d\0\u156f\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044"+
    "\0\u207f\0\73\0\261\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u1b32\0\u22cd\0\u06af\0\u2292"+
    "\0\u1be3\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a"+
    "\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642"+
    "\0\u267d\0\u26b8\0\u26f3\0\261\0\u272e\0\u2769\0\u27a4\0\u27df"+
    "\0\261\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\261\0\261"+
    "\0\u2941\0\u297c\0\261\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\73"+
    "\0\261\0\u2aa3\0\73\0\261\0\u2ade\0\u2b19\0\u2b54\0\u2b8f"+
    "\0\u2bca\0\u2c05\0\u2c40\0\73\0\261\0\u2c7b\0\u2cb6\0\73"+
    "\0\261\0\261\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18"+
    "\0\261\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5"+
    "\0\u2ff0\0\73\0\261\0\u302b\0\73\0\u3066\0\261\0\u30a1"+
    "\0\u30dc\0\73\0\261\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203"+
    "\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db"+
    "\0\u3416\0\u3451\0\u348c\0\u34c7\0\u06af\0\u3502\0\u353d\0\u3578"+
    "\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750"+
    "\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\73"+
    "\0\u06af";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\2\7\1\10"+
    "\1\11\1\12\4\3\1\2\1\13\1\14\1\15\1\16"+
    "\1\4\1\17\1\20\1\21\1\22\1\2\1\23\1\3"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\4"+
    "\1\43\2\4\1\44\1\45\1\4\1\46\1\47\1\50"+
    "\2\4\1\51\2\4\75\0\1\3\2\0\1\52\6\0"+
    "\4\3\14\0\1\3\40\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\4\4\4\0\1\4\16\0\10\4\1\0"+
    "\7\4\7\0\1\7\64\0\5\53\1\54\1\55\2\53"+
    "\1\56\1\53\1\57\1\60\2\57\54\53\1\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\61\1\62\2\4\1\63"+
    "\4\0\1\4\16\0\4\4\1\64\3\4\1\0\7\4"+
    "\53\0\1\65\21\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\1\66\7\4\1\0"+
    "\7\4\2\0\3\4\7\0\4\4\2\0\1\4\1\0"+
    "\4\4\4\0\1\4\16\0\2\4\1\67\5\4\1\0"+
    "\7\4\2\0\3\4\7\0\4\4\2\0\1\4\1\0"+
    "\4\4\4\0\1\4\16\0\10\4\1\0\6\4\1\70"+
    "\31\0\1\71\42\0\34\72\1\73\36\72\37\0\1\74"+
    "\77\0\1\75\72\0\1\76\72\0\1\77\72\0\1\100"+
    "\76\0\1\101\73\0\1\102\22\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\103\1\104\3\4\4\0\1\4\16\0"+
    "\4\4\1\105\3\4\1\0\7\4\2\0\3\4\7\0"+
    "\4\4\2\0\1\4\1\0\4\4\4\0\1\4\16\0"+
    "\4\4\1\106\3\4\1\0\7\4\2\0\3\4\7\0"+
    "\4\4\2\0\1\4\1\0\4\4\4\0\1\4\16\0"+
    "\3\4\1\107\2\4\1\110\1\4\1\0\7\4\2\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\2\4\1\111"+
    "\1\4\4\0\1\4\16\0\10\4\1\0\7\4\23\0"+
    "\2\112\32\0\1\113\15\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\112\1\114\3\4\4\0\1\4\16\0\4\4"+
    "\1\115\3\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\3\4\1\116\4\0\1\4\16\0"+
    "\6\4\1\117\1\4\1\0\7\4\2\0\3\4\7\0"+
    "\4\4\2\0\1\4\1\0\4\4\4\0\1\4\16\0"+
    "\6\4\1\120\1\4\1\0\7\4\2\0\1\121\11\0"+
    "\4\121\14\0\1\121\37\0\5\53\1\54\1\55\64\53"+
    "\6\0\1\55\64\0\5\122\1\123\1\124\1\122\1\125"+
    "\1\122\1\53\60\122\1\53\1\126\3\53\1\54\1\55"+
    "\4\53\4\126\14\53\1\126\44\53\1\54\1\55\6\53"+
    "\2\126\54\53\52\0\1\127\21\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\1\130"+
    "\7\4\1\0\7\4\2\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\4\4\4\0\1\4\16\0\10\4\1\0"+
    "\1\4\1\131\5\4\2\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\2\4\1\132\1\4\4\0\1\4\16\0"+
    "\5\4\1\133\2\4\1\0\7\4\70\0\1\134\4\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\4\4\4\0"+
    "\1\4\16\0\10\4\1\0\4\4\1\135\2\4\2\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\4\4\4\0"+
    "\1\4\16\0\3\4\1\136\4\4\1\0\7\4\2\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\2\4\1\137"+
    "\1\4\4\0\1\4\16\0\10\4\1\140\1\141\6\4"+
    "\57\0\1\142\15\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\4\4\1\143\3\4"+
    "\1\0\7\4\2\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\10\4\1\0\2\4"+
    "\1\144\4\4\2\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\2\4\1\145\1\4\4\0\1\4\16\0\10\4"+
    "\1\0\7\4\2\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\10\4\1\0\2\4"+
    "\1\146\4\4\2\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\7\4\1\147\1\0"+
    "\7\4\2\0\3\4\7\0\4\4\2\0\1\4\1\0"+
    "\4\4\4\0\1\4\16\0\4\4\1\150\3\4\1\0"+
    "\7\4\66\0\1\151\32\0\1\152\33\0\1\153\12\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\4\4\4\0"+
    "\1\4\16\0\10\4\1\0\2\4\1\154\4\4\2\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\2\4\1\155"+
    "\1\4\4\0\1\4\16\0\7\4\1\156\1\0\7\4"+
    "\2\0\3\4\7\0\4\4\2\0\1\4\1\0\4\4"+
    "\4\0\1\4\16\0\10\4\1\0\2\4\1\157\4\4"+
    "\2\0\3\4\7\0\4\4\2\0\1\4\1\0\4\4"+
    "\4\0\1\4\16\0\10\4\1\160\1\161\6\4\2\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\4\4\4\0"+
    "\1\4\16\0\2\4\1\162\5\4\1\0\7\4\1\0"+
    "\5\122\1\123\1\124\1\122\1\125\1\163\1\164\60\122"+
    "\6\165\1\124\1\165\1\166\1\167\1\170\70\165\1\166"+
    "\1\167\1\170\60\165\5\122\1\123\1\124\1\122\1\125"+
    "\1\163\61\122\5\53\1\54\1\55\2\53\1\171\16\53"+
    "\1\172\42\53\53\0\1\173\20\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\1\4"+
    "\1\174\6\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\3\4"+
    "\1\175\4\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\4\4"+
    "\1\176\3\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\4\4"+
    "\1\177\3\4\1\0\7\4\55\0\1\200\17\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\4\4\4\0\1\4"+
    "\16\0\2\4\1\201\5\4\1\0\7\4\2\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\4\4\4\0\1\4"+
    "\16\0\4\4\1\202\3\4\1\0\7\4\2\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\4\4\4\0\1\4"+
    "\16\0\4\4\1\203\3\4\1\0\7\4\57\0\1\204"+
    "\15\0\3\4\7\0\4\4\2\0\1\4\1\0\4\4"+
    "\4\0\1\4\16\0\4\4\1\205\3\4\1\0\7\4"+
    "\66\0\1\206\6\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\10\4\1\0\2\4"+
    "\1\207\4\4\2\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\10\4\1\210\1\211"+
    "\6\4\2\0\3\4\7\0\4\4\2\0\1\4\1\0"+
    "\3\4\1\212\4\0\1\4\16\0\10\4\1\0\7\4"+
    "\2\0\3\4\7\0\4\4\2\0\1\4\1\0\4\4"+
    "\4\0\1\4\16\0\10\4\1\0\1\4\1\213\5\4"+
    "\2\0\3\4\7\0\4\4\2\0\1\4\1\0\4\4"+
    "\4\0\1\4\16\0\10\4\1\214\1\215\6\4\2\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\4\4\4\0"+
    "\1\4\16\0\10\4\1\0\3\4\1\216\3\4\27\0"+
    "\1\217\122\0\1\220\72\0\1\221\15\0\3\4\7\0"+
    "\4\4\2\0\1\4\1\0\3\4\1\222\4\0\1\4"+
    "\16\0\10\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\4\4"+
    "\1\223\3\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\4\4"+
    "\1\224\3\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\2\4\1\225\1\4\4\0\1\4"+
    "\16\0\10\4\1\0\7\4\27\0\1\226\45\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\3\4\1\227\4\0"+
    "\1\4\16\0\10\4\1\0\7\4\2\0\3\4\7\0"+
    "\4\4\2\0\1\4\1\0\4\4\4\0\1\4\16\0"+
    "\6\4\1\230\1\4\1\0\7\4\1\0\5\122\1\123"+
    "\1\124\1\122\1\231\1\163\1\164\60\122\5\164\1\232"+
    "\1\233\2\164\1\234\61\164\10\165\1\166\1\167\71\165"+
    "\1\235\1\167\1\170\60\165\11\170\1\236\61\170\5\53"+
    "\1\54\1\55\6\53\1\237\1\240\61\53\1\54\1\55"+
    "\6\53\1\241\1\242\54\53\1\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\1\243"+
    "\7\4\1\0\7\4\2\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\4\4\4\0\1\4\16\0\10\4\1\0"+
    "\2\4\1\244\4\4\2\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\4\4\4\0\1\4\16\0\10\4\1\0"+
    "\1\4\1\245\5\4\23\0\2\246\50\0\3\4\7\0"+
    "\4\4\2\0\1\4\1\246\1\247\3\4\4\0\1\4"+
    "\16\0\10\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\10\4"+
    "\1\0\2\4\1\250\4\4\55\0\1\251\17\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\4\4\4\0\1\4"+
    "\16\0\2\4\1\252\5\4\1\0\7\4\26\0\1\253"+
    "\46\0\3\4\7\0\4\4\2\0\1\4\1\0\2\4"+
    "\1\254\1\4\4\0\1\4\16\0\10\4\1\0\7\4"+
    "\61\0\1\255\13\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\6\4\1\256\1\4"+
    "\1\0\7\4\2\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\2\4\1\257\5\4"+
    "\1\0\7\4\2\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\260\1\261\3\4\4\0\1\4\16\0\10\4\1\0"+
    "\7\4\57\0\1\262\15\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\4\4\4\0\1\4\16\0\4\4\1\263"+
    "\3\4\1\0\7\4\2\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\2\4\1\264\1\4\4\0\1\4\16\0"+
    "\10\4\1\0\7\4\62\0\1\265\75\0\1\266\7\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\4\4\4\0"+
    "\1\4\16\0\7\4\1\267\1\0\7\4\2\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\4\4\4\0\1\4"+
    "\16\0\10\4\1\0\1\4\1\270\5\4\2\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\4\4\4\0\1\4"+
    "\16\0\4\4\1\271\3\4\1\0\7\4\1\0\5\272"+
    "\1\273\1\274\1\272\1\275\1\276\61\272\6\170\1\233"+
    "\2\170\1\236\61\170\5\164\1\232\1\233\1\164\1\277"+
    "\1\234\61\164\10\300\1\301\1\302\61\300\10\170\1\55"+
    "\1\236\61\170\5\53\1\54\1\55\4\53\1\303\1\53"+
    "\2\303\55\53\1\303\3\53\1\54\1\55\4\53\3\303"+
    "\15\53\1\303\44\53\1\54\1\55\4\53\1\304\1\53"+
    "\2\304\55\53\1\304\3\53\1\54\1\55\4\53\3\304"+
    "\15\53\1\304\37\53\1\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\4\4\4\0\1\4\16\0\4\4\1\305"+
    "\3\4\1\0\7\4\2\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\4\4\4\0\1\4\16\0\4\4\1\306"+
    "\3\4\1\0\7\4\2\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\2\4\1\307\1\4\4\0\1\4\16\0"+
    "\10\4\1\0\7\4\53\0\1\310\21\0\3\4\7\0"+
    "\4\4\2\0\1\4\1\0\4\4\4\0\1\4\16\0"+
    "\1\311\7\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\4\4"+
    "\1\312\3\4\1\0\7\4\54\0\1\313\20\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\4\4\4\0\1\4"+
    "\16\0\1\4\1\314\6\4\1\0\7\4\55\0\1\315"+
    "\17\0\3\4\7\0\4\4\2\0\1\4\1\0\4\4"+
    "\4\0\1\4\16\0\2\4\1\316\5\4\1\0\7\4"+
    "\71\0\1\317\3\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\10\4\1\0\5\4"+
    "\1\320\1\4\2\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\10\4\1\0\2\4"+
    "\1\321\4\4\27\0\1\322\45\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\3\4\1\323\4\0\1\4\16\0"+
    "\10\4\1\0\7\4\2\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\3\4\1\324\4\0\1\4\16\0\10\4"+
    "\1\0\7\4\57\0\1\325\100\0\1\326\7\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\4\4\4\0\1\4"+
    "\16\0\4\4\1\327\3\4\1\0\7\4\2\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\4\4\4\0\1\4"+
    "\16\0\10\4\1\0\1\4\1\330\5\4\2\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\3\4\1\331\4\0"+
    "\1\4\16\0\10\4\1\0\7\4\1\0\5\272\1\273"+
    "\1\274\1\272\1\275\1\276\1\53\60\272\6\300\1\274"+
    "\1\300\1\301\1\302\1\0\70\300\1\301\1\302\1\0"+
    "\60\300\5\272\1\273\1\274\1\272\1\275\1\332\1\53"+
    "\60\272\10\300\1\301\1\333\1\0\60\300\5\53\1\54"+
    "\1\55\10\53\1\334\60\53\1\54\1\55\10\53\1\335"+
    "\53\53\1\0\3\4\7\0\4\4\2\0\1\4\1\0"+
    "\4\4\4\0\1\4\16\0\10\4\1\0\2\4\1\336"+
    "\4\4\2\0\3\4\7\0\4\4\2\0\1\4\1\0"+
    "\4\4\4\0\1\4\16\0\2\4\1\337\5\4\1\0"+
    "\7\4\2\0\3\4\7\0\4\4\2\0\1\4\1\0"+
    "\3\4\1\340\4\0\1\4\16\0\10\4\1\0\7\4"+
    "\23\0\2\341\50\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\341\1\342\3\4\4\0\1\4\16\0\10\4\1\0"+
    "\7\4\2\0\3\4\7\0\4\4\2\0\1\4\1\0"+
    "\4\4\4\0\1\4\16\0\2\4\1\343\5\4\1\0"+
    "\7\4\61\0\1\344\13\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\4\4\4\0\1\4\16\0\6\4\1\345"+
    "\1\4\1\0\7\4\61\0\1\346\13\0\3\4\7\0"+
    "\4\4\2\0\1\4\1\0\4\4\4\0\1\4\16\0"+
    "\6\4\1\347\1\4\1\0\7\4\57\0\1\350\15\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\4\4\4\0"+
    "\1\4\16\0\4\4\1\351\3\4\1\0\7\4\2\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\4\4\4\0"+
    "\1\4\16\0\6\4\1\352\1\4\1\0\7\4\66\0"+
    "\1\353\6\0\3\4\7\0\4\4\2\0\1\4\1\0"+
    "\4\4\4\0\1\4\16\0\10\4\1\0\2\4\1\354"+
    "\4\4\53\0\1\355\42\0\2\356\50\0\3\4\7\0"+
    "\4\4\2\0\1\4\1\0\4\4\4\0\1\4\16\0"+
    "\1\357\7\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\356\1\360\3\4\4\0\1\4\16\0"+
    "\10\4\1\0\7\4\1\0\5\272\1\273\1\274\1\272"+
    "\1\231\1\332\1\53\60\272\10\300\1\235\1\333\1\0"+
    "\60\300\5\53\1\54\1\55\11\53\1\361\57\53\1\54"+
    "\1\55\11\53\1\362\52\53\1\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\2\4\1\363\1\4\4\0\1\4"+
    "\16\0\10\4\1\0\7\4\55\0\1\364\17\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\4\4\4\0\1\4"+
    "\16\0\2\4\1\365\5\4\1\0\7\4\22\0\1\366"+
    "\52\0\3\4\7\0\4\4\2\0\1\367\1\0\4\4"+
    "\4\0\1\4\16\0\10\4\1\0\7\4\63\0\2\370"+
    "\10\0\3\4\7\0\4\4\2\0\1\4\1\0\4\4"+
    "\4\0\1\4\16\0\10\4\1\370\1\371\6\4\2\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\4\4\4\0"+
    "\1\4\16\0\2\4\1\372\5\4\1\0\7\4\57\0"+
    "\1\373\42\0\1\374\45\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\4\4\4\0\1\4\16\0\4\4\1\375"+
    "\3\4\1\0\7\4\2\0\3\4\7\0\4\4\2\0"+
    "\1\4\1\0\3\4\1\376\4\0\1\4\16\0\10\4"+
    "\1\0\7\4\1\0\5\53\1\54\1\55\12\53\1\377"+
    "\56\53\1\54\1\55\12\53\1\u0100\51\53\1\0\3\4"+
    "\7\0\4\4\2\0\1\4\1\0\3\4\1\u0101\4\0"+
    "\1\4\16\0\10\4\1\0\7\4\27\0\1\u0102\45\0"+
    "\3\4\7\0\4\4\2\0\1\4\1\0\3\4\1\u0103"+
    "\4\0\1\4\16\0\10\4\1\0\7\4\66\0\1\u0104"+
    "\72\0\1\u0105\6\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\10\4\1\0\2\4"+
    "\1\u0106\4\4\2\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\4\4\4\0\1\4\16\0\10\4\1\0\2\4"+
    "\1\u0107\4\4\1\0\5\53\1\54\1\55\13\53\2\u0108"+
    "\54\53\1\54\1\55\13\53\2\u0109\47\53\54\0\1\u010a"+
    "\17\0\3\4\7\0\4\4\2\0\1\4\1\0\4\4"+
    "\4\0\1\4\16\0\2\4\1\u010b\5\4\1\0\7\4"+
    "\26\0\1\u010c\125\0\1\u010d\13\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\2\4\1\u010e\1\4\4\0\1\4"+
    "\16\0\10\4\1\0\7\4\2\0\3\4\7\0\4\4"+
    "\2\0\1\4\1\0\4\4\4\0\1\4\16\0\6\4"+
    "\1\u010f\1\4\1\0\7\4\1\0\5\53\1\54\1\55"+
    "\15\53\1\u0110\53\53\1\54\1\55\15\53\1\u0111\46\53"+
    "\26\0\1\u0112\45\0\3\4\7\0\4\4\2\0\1\4"+
    "\1\0\3\4\1\u0113\4\0\1\4\16\0\10\4\1\0"+
    "\7\4\1\0\5\53\1\54\1\55\13\53\2\u0114\54\53"+
    "\1\54\1\55\13\53\2\u0115\54\53\1\54\1\55\16\53"+
    "\1\u0116\52\53\1\54\1\55\16\53\1\u0117\52\53\1\54"+
    "\1\55\17\53\1\u0118\51\53\1\54\1\55\17\53\1\u0119"+
    "\51\53\1\54\1\55\20\53\1\u011a\50\53\1\54\1\55"+
    "\20\53\1\u011b\50\53\1\54\1\55\20\53\1\u011c\50\53"+
    "\1\54\1\55\20\53\1\u011d\50\53\1\54\1\55\20\53"+
    "\1\u011e\50\53\1\54\1\55\20\53\1\u011f\50\53\1\54"+
    "\1\55\20\53\1\u0120\50\53\1\54\1\55\20\53\1\u0121"+
    "\50\53\1\u0122\1\u0123\1\u0124\1\u0125\20\53\1\u0124\40\53"+
    "\1\u0124\5\53\1\u0122\1\u0123\1\u0124\21\53\1\u0124\40\53"+
    "\1\u0124\6\0\1\55\4\0\1\u0126\1\0\2\u0127\67\0"+
    "\1\u0126\1\0\2\u0127\54\0\5\53\1\54\1\55\4\53"+
    "\1\u0128\1\53\2\u0129\54\53\13\0\4\u012a\55\0\1\u012a"+
    "\11\0\4\u012a\14\0\1\u012a\37\0\5\53\1\54\1\55"+
    "\4\53\4\u012b\55\53\1\u012b\3\53\1\54\1\55\4\53"+
    "\4\u012b\14\53\1\u012b\37\53\32\0\1\u012c\40\0\5\53"+
    "\1\54\1\55\23\53\1\u012d\40\53\13\0\4\u012e\14\0"+
    "\1\u012e\37\0\5\53\1\54\1\55\4\53\4\u012f\14\53"+
    "\1\u012f\37\53\1\0\1\u0130\11\0\4\u0130\14\0\1\u0130"+
    "\37\0\1\53\1\u0131\3\53\1\54\1\55\4\53\4\u0131"+
    "\14\53\1\u0131\37\53\32\0\1\u0132\40\0\5\53\1\54"+
    "\1\55\23\53\1\u0133\40\53\13\0\4\u0134\14\0\1\u0134"+
    "\37\0\5\53\1\54\1\55\4\53\4\u0135\14\53\1\u0135"+
    "\37\53\1\0\1\u0136\11\0\4\u0136\14\0\1\u0136\37\0"+
    "\1\53\1\u0137\3\53\1\54\1\55\4\53\4\u0137\14\53"+
    "\1\u0137\37\53\10\0\1\u0138\62\0\5\53\1\54\1\55"+
    "\1\53\1\u0139\62\53";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14632];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\1\1\3\11"+
    "\5\1\1\11\1\1\1\11\1\1\2\11\1\1\4\11"+
    "\16\1\2\0\1\1\1\11\4\0\3\1\1\0\3\1"+
    "\1\11\1\0\10\11\1\0\7\1\1\0\6\1\1\0"+
    "\2\1\3\0\4\1\1\0\3\1\1\0\1\1\1\0"+
    "\6\1\3\0\4\1\1\0\2\1\10\0\1\11\4\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\2\1\1\11\2\0\4\1\1\11\5\1\1\0"+
    "\1\1\5\0\3\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\11\2\1\2\0"+
    "\3\1\1\0\2\1\2\0\1\1\5\0\3\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\2\0\3\1\4\0\3\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\2\1\1\11\1\1\2\0"+
    "\2\1\2\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\2\1\2\0\2\1\2\0\1\1\1\0\1\1\2\0"+
    "\2\1\2\0\1\11\1\1\1\0\1\11\2\1\2\0"+
    "\1\11\1\1\16\0\2\1\1\0\1\1\22\0\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java
    public static LinkedList<Terror> TablaEL = new LinkedList<Terror>(); 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico_cjs(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symcjs.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico"+yytext()+" Linea "+yyline+" Columna "+yycolumn);
                          Terror datos = new Terror(yytext(),yyline,yycolumn,"Error Lexico","Simbolo no existe en el lenguaje");
                          TablaEL.add(datos);
            }
          case 55: break;
          case 2: 
            { System.out.println("Reconocio "+yytext()+" num"); return new Symbol(Symcjs.num, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 3: 
            { System.out.println("Reconocio "+yytext()+" identificador"); return new Symbol(Symcjs.id, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 4: 
            { System.out.println("Reconocio "+yytext()+" punto"); return new Symbol(Symcjs.punto, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 5: 
            { /* ignore white space. */
            }
          case 59: break;
          case 6: 
            { System.out.println("Reconocio "+yytext()+" div"); return new Symbol(Symcjs.div, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 7: 
            { System.out.println("Reconocio "+yytext()+" por"); return new Symbol(Symcjs.por, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 8: 
            { System.out.println("Reconocio "+yytext()+" allaves"); return new Symbol(Symcjs.allav, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 9: 
            { System.out.println("Reconocio "+yytext()+" cllaves"); return new Symbol(Symcjs.cllav, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 10: 
            { System.out.println("Reconocio "+yytext()+" menos"); return new Symbol(Symcjs.menos, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 11: 
            { System.out.println("Reconocio "+yytext()+" dospuntos"); return new Symbol(Symcjs.dpuntos, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 12: 
            { System.out.println("Reconocio "+yytext()+" puntoycoma"); return new Symbol(Symcjs.pcoma, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 13: 
            { System.out.println("Reconocio "+yytext()+" comma"); return new Symbol(Symcjs.comma, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 14: 
            { System.out.println("Reconocio "+yytext()+" mas"); return new Symbol(Symcjs.mas, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 15: 
            { System.out.println("Reconocio "+yytext()+" potencia"); return new Symbol(Symcjs.potencia, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 16: 
            { System.out.println("Reconocio "+yytext()+" modulo"); return new Symbol(Symcjs.modulo, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 17: 
            { System.out.println("Reconocio "+yytext()+" para"); return new Symbol(Symcjs.para, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 18: 
            { System.out.println("Reconocio "+yytext()+" parc"); return new Symbol(Symcjs.parc, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 19: 
            { System.out.println("Reconocio "+yytext()+" lnot"); return new Symbol(Symcjs.lnot, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 20: 
            { System.out.println("Reconocio "+yytext()+" menorq"); return new Symbol(Symcjs.menorq, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 21: 
            { System.out.println("Reconocio "+yytext()+" mayorq"); return new Symbol(Symcjs.mayorq, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 22: 
            { /*Se ignoran*/
            }
          case 76: break;
          case 23: 
            { System.out.println("Reconocio "+yytext()+" decremento"); return new Symbol(Symcjs.dec, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 24: 
            { System.out.println("Reconocio "+yytext()+" cadena"); return new Symbol(Symcjs.cadena, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 25: 
            { System.out.println("Reconocio "+yytext()+" incremento"); return new Symbol(Symcjs.inc, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 26: 
            { System.out.println("Reconocio "+yytext()+" igualigual"); return new Symbol(Symcjs.igualigual, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 27: 
            { System.out.println("Reconocio "+yytext()+" diferente"); return new Symbol(Symcjs.diferente, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 28: 
            { System.out.println("Reconocio "+yytext()+" menorigual"); return new Symbol(Symcjs.menorigual, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 29: 
            { System.out.println("Reconocio "+yytext()+" mayorigual"); return new Symbol(Symcjs.mayorigual, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 30: 
            { System.out.println("Reconocio "+yytext()+" land"); return new Symbol(Symcjs.land, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 31: 
            { System.out.println("Reconocio "+yytext()+" lor"); return new Symbol(Symcjs.lor, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 32: 
            { System.out.println("Reconocio "+yytext()+" si"); return new Symbol(Symcjs.si, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 33: 
            { System.out.println("Reconocio "+yytext()+" dimv"); return new Symbol(Symcjs.dimv, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 34: 
            { System.out.println("Reconocio "+yytext()+" true"); return new Symbol(Symcjs.verdadero, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 35: 
            { System.out.println("Reconocio "+yytext()+" sino"); return new Symbol(Symcjs.sino, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 36: 
            { System.out.println("Reconocio "+yytext()+" caso"); return new Symbol(Symcjs.caso, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 37: 
            { System.out.println("Reconocio "+yytext()+" para"); return new Symbol(Symcjs.spara, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 38: 
            { System.out.println("Reconocio "+yytext()+" false"); return new Symbol(Symcjs.falso, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 39: 
            { System.out.println("Reconocio "+yytext()+" atexto"); return new Symbol(Symcjs.atexto, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 40: 
            { System.out.println("Reconocio "+yytext()+" conteo"); return new Symbol(Symcjs.conteo, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 41: 
            { System.out.println("Reconocio "+yytext()+" detener"); return new Symbol(Symcjs.detener, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 42: 
            { System.out.println("Reconocio "+yytext()+" defecto"); return new Symbol(Symcjs.defecto, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 43: 
            { System.out.println("Reconocio "+yytext()+" obtener"); return new Symbol(Symcjs.obtener, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 44: 
            { System.out.println("Reconocio "+yytext()+" mensaje"); return new Symbol(Symcjs.mensaje, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 45: 
            { System.out.println("Reconocio "+yytext()+" funcion"); return new Symbol(Symcjs.funcion, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 46: 
            { System.out.println("Reconocio "+yytext()+" imprimir"); return new Symbol(Symcjs.imprimir, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 47: 
            { System.out.println("Reconocio "+yytext()+" mientras"); return new Symbol(Symcjs.mientras, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 48: 
            { System.out.println("Reconocio "+yytext()+" retornar"); return new Symbol(Symcjs.retornar, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 49: 
            { System.out.println("Reconocio "+yytext()+" documento"); return new Symbol(Symcjs.documento, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 50: 
            { System.out.println("Reconocio "+yytext()+" observador"); return new Symbol(Symcjs.observador, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 51: 
            { System.out.println("Reconocio "+yytext()+" selecciona"); return new Symbol(Symcjs.selecciona, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 52: 
            { System.out.println("Reconocio "+yytext()+" setelemento"); return new Symbol(Symcjs.setelemento, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 53: 
            { System.out.println("Reconocio "+yytext()+" fecha"); return new Symbol(Symcjs.fecha, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 54: 
            { System.out.println("Reconocio "+yytext()+" fechahora"); return new Symbol(Symcjs.fechah, yycolumn, yyline, yytext());
            }
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
