
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Source.CJS.Analizadores;

import Source.CJS.principal.Nodo;
import java_cup.runtime.*;
import java.util.LinkedList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico_cjs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symcjs.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico_cjs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico_cjs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico_cjs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\003\000\002\052" +
    "\004\000\002\052\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\004\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\046\012\000\002\046\011\000\002\056\010" +
    "\000\002\047\003\000\002\032\004\000\002\032\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\004\000\002\050\003\000" +
    "\002\051\005\000\002\051\010\000\002\044\005\000\002" +
    "\044\003\000\002\045\007\000\002\045\011\000\002\045" +
    "\014\000\002\054\013\000\002\054\013\000\002\055\003" +
    "\000\002\055\003\000\002\013\005\000\002\013\003\000" +
    "\002\042\006\000\002\042\011\000\002\042\010\000\002" +
    "\042\004\000\002\042\013\000\002\042\013\000\002\042" +
    "\020\000\002\041\011\000\002\041\015\000\002\043\011" +
    "\000\002\043\012\000\002\040\003\000\002\037\004\000" +
    "\002\037\003\000\002\036\006\000\002\035\005\000\002" +
    "\034\015\000\002\033\006\000\002\033\005\000\002\011" +
    "\003\000\002\011\003\000\002\031\011\000\002\030\005" +
    "\000\002\026\004\000\002\027\007\000\002\025\007\000" +
    "\002\005\003\000\002\024\005\000\002\024\003\000\002" +
    "\023\005\000\002\023\003\000\002\022\004\000\002\022" +
    "\003\000\002\021\005\000\002\021\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\003\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\003\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\004\000\002" +
    "\015\003\000\002\015\003\000\002\012\005\000\002\012" +
    "\006\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\006\000\002\007\005\000\002" +
    "\010\004\000\002\006\005\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\026\004\031\023\027\052\015\053\011\056" +
    "\013\061\004\062\033\064\026\065\035\066\007\001\002" +
    "\000\004\014\u010c\001\002\000\030\002\ufffd\004\ufffd\023" +
    "\ufffd\052\ufffd\053\ufffd\056\ufffd\061\ufffd\062\ufffd\064\ufffd" +
    "\065\ufffd\066\ufffd\001\002\000\030\002\ufff2\004\ufff2\023" +
    "\ufff2\052\ufff2\053\ufff2\056\ufff2\061\ufff2\062\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\001\002\000\004\014\372\001\002\000" +
    "\030\002\ufff9\004\ufff9\023\ufff9\052\ufff9\053\ufff9\056\ufff9" +
    "\061\ufff9\062\ufff9\064\ufff9\065\ufff9\066\ufff9\001\002\000" +
    "\004\014\366\001\002\000\030\002\ufffc\004\ufffc\023\ufffc" +
    "\052\ufffc\053\ufffc\056\ufffc\061\ufffc\062\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\001\002\000\004\014\360\001\002\000\030" +
    "\002\ufff6\004\ufff6\023\ufff6\052\ufff6\053\ufff6\056\ufff6\061" +
    "\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6\001\002\000\004" +
    "\014\354\001\002\000\030\002\ufff5\004\ufff5\023\ufff5\052" +
    "\ufff5\053\ufff5\056\ufff5\061\ufff5\062\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\001\002\000\030\002\ufffa\004\ufffa\023\ufffa\052" +
    "\ufffa\053\ufffa\056\ufffa\061\ufffa\062\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\001\002\000\030\002\ufff4\004\ufff4\023\ufff4\052" +
    "\ufff4\053\ufff4\056\ufff4\061\ufff4\062\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\001\002\000\030\002\ufffe\004\ufffe\023\ufffe\052" +
    "\ufffe\053\ufffe\056\ufffe\061\ufffe\062\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\001\002\000\004\010\353\001\002\000\030\002" +
    "\ufff8\004\ufff8\023\ufff8\052\ufff8\053\ufff8\056\ufff8\061\ufff8" +
    "\062\ufff8\064\ufff8\065\ufff8\066\ufff8\001\002\000\030\002" +
    "\000\004\031\023\027\052\015\053\011\056\013\061\004" +
    "\062\033\064\026\065\035\066\007\001\002\000\004\010" +
    "\351\001\002\000\004\023\045\001\002\000\016\011\264" +
    "\013\263\014\152\016\262\031\uff90\032\uff90\001\002\000" +
    "\006\031\147\032\150\001\002\000\004\013\226\001\002" +
    "\000\030\002\ufffb\004\ufffb\023\ufffb\052\ufffb\053\ufffb\056" +
    "\ufffb\061\ufffb\062\ufffb\064\ufffb\065\ufffb\066\ufffb\001\002" +
    "\000\004\014\214\001\002\000\030\002\ufff3\004\ufff3\023" +
    "\ufff3\052\ufff3\053\ufff3\056\ufff3\061\ufff3\062\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\001\002\000\004\023\040\001\002\000" +
    "\004\002\037\001\002\000\004\002\001\001\002\000\004" +
    "\014\041\001\002\000\006\015\044\023\045\001\002\000" +
    "\006\012\212\015\uffee\001\002\000\004\015\206\001\002" +
    "\000\004\016\046\001\002\000\014\010\uffdb\011\uffdb\012" +
    "\uffdb\015\uffdb\016\uffdb\001\002\000\030\004\031\023\027" +
    "\052\015\053\011\054\065\055\062\056\013\061\004\062" +
    "\033\064\026\066\007\001\002\000\036\004\uffe8\017\uffe8" +
    "\023\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\064\uffe8\066\uffe8\001\002" +
    "\000\032\004\031\017\205\023\027\052\015\053\011\054" +
    "\065\055\062\056\013\061\004\062\033\064\026\066\007" +
    "\001\002\000\036\004\uffe1\017\uffe1\023\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\064\uffe1\066\uffe1\001\002\000\036\004\uffeb\017" +
    "\uffeb\023\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\064\uffeb\066\uffeb\001" +
    "\002\000\036\004\uffec\017\uffec\023\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\064\uffec\066\uffec\001\002\000\036\004\uffdf\017\uffdf" +
    "\023\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\064\uffdf\066\uffdf\001\002" +
    "\000\036\004\uffe6\017\uffe6\023\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\064\uffe6\066\uffe6\001\002\000\036\004\uffe2\017\uffe2\023" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\064\uffe2\066\uffe2\001\002\000" +
    "\036\004\uffe5\017\uffe5\023\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\064" +
    "\uffe5\066\uffe5\001\002\000\036\004\uffe9\017\uffe9\023\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\064\uffe9\066\uffe9\001\002\000\004" +
    "\010\203\001\002\000\026\014\072\020\111\021\117\022" +
    "\102\023\112\024\071\025\073\026\116\033\104\047\077" +
    "\001\002\000\036\004\uffe3\017\uffe3\023\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3" +
    "\062\uffe3\064\uffe3\066\uffe3\001\002\000\036\004\uffe4\017" +
    "\uffe4\023\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\062\uffe4\064\uffe4\066\uffe4\001" +
    "\002\000\004\010\070\001\002\000\036\004\uffea\017\uffea" +
    "\023\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\064\uffea\066\uffea\001\002" +
    "\000\036\004\uffe7\017\uffe7\023\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\064\uffe7\066\uffe7\001\002\000\036\004\uffba\017\uffba\023" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\064\uffba\066\uffba\001\002\000" +
    "\050\010\uff95\011\uff95\012\uff95\015\uff95\017\uff95\033\uff95" +
    "\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\044\uff95\045\uff95\046\uff95\050\uff95\051\uff95" +
    "\001\002\000\026\014\072\020\111\021\117\022\102\023" +
    "\112\024\071\025\073\026\116\033\104\047\077\001\002" +
    "\000\050\010\uff94\011\uff94\012\uff94\015\uff94\017\uff94\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\050\uff94\051" +
    "\uff94\001\002\000\016\010\uffb5\012\uffb5\015\uffb5\017\uffb5" +
    "\050\177\051\uffb5\001\002\000\014\010\uffb7\012\uffb7\015" +
    "\uffb7\017\uffb7\051\175\001\002\000\044\010\uffa6\012\uffa6" +
    "\015\uffa6\017\uffa6\033\uffa6\035\134\036\136\037\135\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\050\uffa6\051\uffa6\001\002\000\024\014\072\020\111\021" +
    "\117\022\102\023\112\024\071\025\073\026\116\033\104" +
    "\001\002\000\016\010\uffb3\012\uffb3\015\uffb3\017\uffb3\050" +
    "\uffb3\051\uffb3\001\002\000\046\010\uff99\012\uff99\015\uff99" +
    "\017\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\050\uff99\051\uff99\001\002\000\050\010\uff96\011\uff96\012" +
    "\uff96\015\uff96\017\uff96\033\uff96\034\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\050\uff96\051\uff96\001\002\000\046\010\uffa0" +
    "\012\uffa0\015\uffa0\017\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\050\uffa0\051\uffa0\001\002\000\024\014" +
    "\072\020\111\021\117\022\102\023\112\024\071\025\073" +
    "\026\116\033\104\001\002\000\046\010\uff9a\012\uff9a\015" +
    "\uff9a\017\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\050\uff9a\051\uff9a\001\002\000\016\010\uffb1\012\uffb1" +
    "\015\uffb1\017\uffb1\050\uffb1\051\uffb1\001\002\000\046\010" +
    "\uffa2\012\uffa2\015\uffa2\017\uffa2\033\uffa2\034\140\035\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\001\002\000\046" +
    "\010\uff9c\012\uff9c\015\uff9c\017\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\001\002\000" +
    "\050\010\uff92\011\uff92\012\uff92\015\uff92\017\uff92\033\uff92" +
    "\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042" +
    "\uff92\043\uff92\044\uff92\045\uff92\046\uff92\050\uff92\051\uff92" +
    "\001\002\000\060\010\uff90\012\uff90\013\153\014\152\015" +
    "\uff90\016\151\017\uff90\031\uff90\032\uff90\033\uff90\034\uff90" +
    "\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\044\uff90\045\uff90\046\uff90\050\uff90\051\uff90\001\002" +
    "\000\046\010\uff9e\012\uff9e\015\uff9e\017\uff9e\033\uff9e\034" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e\001" +
    "\002\000\052\010\uff9d\012\uff9d\015\uff9d\017\uff9d\031\147" +
    "\032\150\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\050\uff9d\051\uff9d\001\002\000\036\010\uffaf\012\uffaf\015" +
    "\uffaf\017\uffaf\033\123\040\131\041\125\042\126\043\124" +
    "\044\132\045\130\046\122\050\uffaf\051\uffaf\001\002\000" +
    "\050\010\uff93\011\uff93\012\uff93\015\uff93\017\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\050\uff93\051\uff93" +
    "\001\002\000\050\010\uff91\011\uff91\012\uff91\015\uff91\017" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\050" +
    "\uff91\051\uff91\001\002\000\004\010\121\001\002\000\036" +
    "\004\uffbb\017\uffbb\023\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\064\uffbb" +
    "\066\uffbb\001\002\000\024\014\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\033\uffab\001\002" +
    "\000\024\014\072\020\111\021\117\022\102\023\112\024" +
    "\071\025\073\026\116\033\104\001\002\000\024\014\uffae" +
    "\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\033\uffae\001\002\000\024\014\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\033\uffaa\001" +
    "\002\000\024\014\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\033\uffa9\001\002\000\024\014" +
    "\072\020\111\021\117\022\102\023\112\024\071\025\073" +
    "\026\116\033\104\001\002\000\024\014\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\033\uffac" +
    "\001\002\000\024\014\072\020\111\021\117\022\102\023" +
    "\112\024\071\025\073\026\116\033\104\001\002\000\024" +
    "\014\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\033\uffad\001\002\000\044\010\uffa8\012\uffa8" +
    "\015\uffa8\017\uffa8\033\uffa8\035\134\036\136\037\135\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\050\uffa8\051\uffa8\001\002\000\024\014\072\020\111\021" +
    "\117\022\102\023\112\024\071\025\073\026\116\033\104" +
    "\001\002\000\024\014\072\020\111\021\117\022\102\023" +
    "\112\024\071\025\073\026\116\033\104\001\002\000\024" +
    "\014\072\020\111\021\117\022\102\023\112\024\071\025" +
    "\073\026\116\033\104\001\002\000\046\010\uffa4\012\uffa4" +
    "\015\uffa4\017\uffa4\033\uffa4\034\140\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\050\uffa4\051\uffa4\001\002\000\024\014\072\020" +
    "\111\021\117\022\102\023\112\024\071\025\073\026\116" +
    "\033\104\001\002\000\046\010\uffa1\012\uffa1\015\uffa1\017" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\050" +
    "\uffa1\051\uffa1\001\002\000\046\010\uffa3\012\uffa3\015\uffa3" +
    "\017\uffa3\033\uffa3\034\140\035\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\050\uffa3\051\uffa3\001\002\000\046\010\uffa5\012\uffa5\015" +
    "\uffa5\017\uffa5\033\uffa5\034\140\035\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\050\uffa5\051\uffa5\001\002\000\022\010\uffb0\012\uffb0" +
    "\015\uffb0\017\uffb0\033\123\040\131\050\uffb0\051\uffb0\001" +
    "\002\000\044\010\uffa7\012\uffa7\015\uffa7\017\uffa7\033\uffa7" +
    "\035\134\036\136\037\135\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7\001\002" +
    "\000\046\010\uff8d\012\uff8d\015\uff8d\017\uff8d\033\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\050\uff8d\051\uff8d\001" +
    "\002\000\046\010\uffbe\012\uffbe\015\uffbe\017\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe" +
    "\001\002\000\046\010\uffbd\012\uffbd\015\uffbd\017\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\050\uffbd\051" +
    "\uffbd\001\002\000\026\014\072\020\111\021\117\022\102" +
    "\023\112\024\071\025\073\026\116\033\104\047\077\001" +
    "\002\000\030\014\072\015\163\020\111\021\117\022\102" +
    "\023\112\024\071\025\073\026\116\033\104\047\077\001" +
    "\002\000\006\027\156\030\155\001\002\000\046\010\uff8e" +
    "\012\uff8e\015\uff8e\017\uff8e\033\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e" +
    "\045\uff8e\046\uff8e\050\uff8e\051\uff8e\001\002\000\004\014" +
    "\161\001\002\000\004\014\157\001\002\000\004\015\160" +
    "\001\002\000\046\010\uff8c\012\uff8c\015\uff8c\017\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\050\uff8c\051" +
    "\uff8c\001\002\000\004\015\162\001\002\000\046\010\uff8b" +
    "\012\uff8b\015\uff8b\017\uff8b\033\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b" +
    "\045\uff8b\046\uff8b\050\uff8b\051\uff8b\001\002\000\046\010" +
    "\uff98\012\uff98\015\uff98\017\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\050\uff98\051\uff98\001\002\000\006" +
    "\012\166\015\167\001\002\000\010\012\uffd2\015\uffd2\017" +
    "\uffd2\001\002\000\026\014\072\020\111\021\117\022\102" +
    "\023\112\024\071\025\073\026\116\033\104\047\077\001" +
    "\002\000\046\010\uff97\012\uff97\015\uff97\017\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051\uff97" +
    "\001\002\000\010\012\uffd3\015\uffd3\017\uffd3\001\002\000" +
    "\004\017\172\001\002\000\052\010\uff8f\012\uff8f\015\uff8f" +
    "\017\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\050\uff8f\051\uff8f\001\002\000\046\010" +
    "\uff9b\012\uff9b\015\uff9b\017\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\050\uff9b\051\uff9b\001\002\000\016" +
    "\010\uffb2\012\uffb2\015\uffb2\017\uffb2\050\uffb2\051\uffb2\001" +
    "\002\000\026\014\072\020\111\021\117\022\102\023\112" +
    "\024\071\025\073\026\116\033\104\047\077\001\002\000" +
    "\016\010\uffb6\012\uffb6\015\uffb6\017\uffb6\050\177\051\uffb6" +
    "\001\002\000\026\014\072\020\111\021\117\022\102\023" +
    "\112\024\071\025\073\026\116\033\104\047\077\001\002" +
    "\000\016\010\uffb4\012\uffb4\015\uffb4\017\uffb4\050\uffb4\051" +
    "\uffb4\001\002\000\004\015\202\001\002\000\046\010\uff9f" +
    "\012\uff9f\015\uff9f\017\uff9f\033\uff9f\034\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\050\uff9f\051\uff9f\001\002\000\036\004" +
    "\uffe0\017\uffe0\023\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\064\uffe0\066" +
    "\uffe0\001\002\000\036\004\uffed\017\uffed\023\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\064\uffed\066\uffed\001\002\000\030\002\ufff0" +
    "\004\ufff0\023\ufff0\052\ufff0\053\ufff0\056\ufff0\061\ufff0\062" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\001\002\000\004\016\207" +
    "\001\002\000\030\004\031\023\027\052\015\053\011\054" +
    "\065\055\062\056\013\061\004\062\033\064\026\066\007" +
    "\001\002\000\032\004\031\017\211\023\027\052\015\053" +
    "\011\054\065\055\062\056\013\061\004\062\033\064\026" +
    "\066\007\001\002\000\030\002\ufff1\004\ufff1\023\ufff1\052" +
    "\ufff1\053\ufff1\056\ufff1\061\ufff1\062\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\001\002\000\004\023\213\001\002\000\014\010" +
    "\uffdc\011\uffdc\012\uffdc\015\uffdc\016\uffdc\001\002\000\026" +
    "\014\072\020\111\021\117\022\102\023\112\024\071\025" +
    "\073\026\116\033\104\047\077\001\002\000\004\015\216" +
    "\001\002\000\004\016\217\001\002\000\030\004\031\023" +
    "\027\052\015\053\011\054\065\055\062\056\013\061\004" +
    "\062\033\064\026\066\007\001\002\000\032\004\031\017" +
    "\221\023\027\052\015\053\011\054\065\055\062\056\013" +
    "\061\004\062\033\064\026\066\007\001\002\000\044\002" +
    "\uffca\004\uffca\017\uffca\023\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063" +
    "\222\064\uffca\065\uffca\066\uffca\001\002\000\004\016\223" +
    "\001\002\000\030\004\031\023\027\052\015\053\011\054" +
    "\065\055\062\056\013\061\004\062\033\064\026\066\007" +
    "\001\002\000\032\004\031\017\225\023\027\052\015\053" +
    "\011\054\065\055\062\056\013\061\004\062\033\064\026" +
    "\066\007\001\002\000\042\002\uffc9\004\uffc9\017\uffc9\023" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9\001" +
    "\002\000\006\005\230\007\227\001\002\000\004\014\244" +
    "\001\002\000\004\014\231\001\002\000\026\014\072\020" +
    "\111\021\117\022\102\023\112\024\071\025\073\026\116" +
    "\033\104\047\077\001\002\000\004\015\233\001\002\000" +
    "\004\013\234\001\002\000\004\006\235\001\002\000\004" +
    "\014\236\001\002\000\026\014\072\020\111\021\117\022" +
    "\102\023\112\024\071\025\073\026\116\033\104\047\077" +
    "\001\002\000\004\012\240\001\002\000\026\014\072\020" +
    "\111\021\117\022\102\023\112\024\071\025\073\026\116" +
    "\033\104\047\077\001\002\000\004\015\242\001\002\000" +
    "\004\010\243\001\002\000\042\002\uffcb\004\uffcb\017\uffcb" +
    "\023\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\062\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\001\002\000\026\014\072\020\111\021\117\022\102\023" +
    "\112\024\071\025\073\026\116\033\104\047\077\001\002" +
    "\000\004\012\246\001\002\000\004\023\252\001\002\000" +
    "\004\015\260\001\002\000\004\015\uffd5\001\002\000\004" +
    "\015\uffd4\001\002\000\004\014\253\001\002\000\030\014" +
    "\072\015\254\020\111\021\117\022\102\023\112\024\071" +
    "\025\073\026\116\033\104\047\077\001\002\000\006\015" +
    "\uff98\016\255\001\002\000\030\004\031\023\027\052\015" +
    "\053\011\054\065\055\062\056\013\061\004\062\033\064" +
    "\026\066\007\001\002\000\032\004\031\017\257\023\027" +
    "\052\015\053\011\054\065\055\062\056\013\061\004\062" +
    "\033\064\026\066\007\001\002\000\004\015\uffef\001\002" +
    "\000\004\010\261\001\002\000\042\002\uffd7\004\uffd7\017" +
    "\uffd7\023\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\064\uffd7\065\uffd7\066" +
    "\uffd7\001\002\000\026\014\072\020\111\021\117\022\102" +
    "\023\112\024\071\025\073\026\116\033\104\047\077\001" +
    "\002\000\006\006\302\007\303\001\002\000\032\004\266" +
    "\014\072\016\265\020\111\021\117\022\102\023\112\024" +
    "\071\025\073\026\116\033\104\047\077\001\002\000\026" +
    "\014\072\020\111\021\117\022\102\023\112\024\071\025" +
    "\073\026\116\033\104\047\077\001\002\000\004\013\271" +
    "\001\002\000\004\010\270\001\002\000\042\002\uffd1\004" +
    "\uffd1\017\uffd1\023\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\001\002\000\004\005\272\001\002\000\004" +
    "\014\273\001\002\000\026\014\072\020\111\021\117\022" +
    "\102\023\112\024\071\025\073\026\116\033\104\047\077" +
    "\001\002\000\004\015\275\001\002\000\004\010\276\001" +
    "\002\000\042\002\uffcd\004\uffcd\017\uffcd\023\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\001\002\000\006" +
    "\012\166\017\300\001\002\000\004\010\301\001\002\000" +
    "\042\002\uffcf\004\uffcf\017\uffcf\023\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002\000\004\014\312" +
    "\001\002\000\004\014\304\001\002\000\026\014\072\020" +
    "\111\021\117\022\102\023\112\024\071\025\073\026\116" +
    "\033\104\047\077\001\002\000\004\012\306\001\002\000" +
    "\004\023\252\001\002\000\004\015\310\001\002\000\004" +
    "\010\311\001\002\000\042\002\uffd6\004\uffd6\017\uffd6\023" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\064\uffd6\065\uffd6\066\uffd6\001" +
    "\002\000\026\014\072\020\111\021\117\022\102\023\112" +
    "\024\071\025\073\026\116\033\104\047\077\001\002\000" +
    "\004\012\314\001\002\000\026\014\072\020\111\021\117" +
    "\022\102\023\112\024\071\025\073\026\116\033\104\047" +
    "\077\001\002\000\004\015\316\001\002\000\004\010\317" +
    "\001\002\000\042\002\uffcc\004\uffcc\017\uffcc\023\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\001\002\000" +
    "\004\017\321\001\002\000\010\011\322\031\uff8f\032\uff8f" +
    "\001\002\000\026\014\072\020\111\021\117\022\102\023" +
    "\112\024\071\025\073\026\116\033\104\047\077\001\002" +
    "\000\004\010\324\001\002\000\042\002\uffd0\004\uffd0\017" +
    "\uffd0\023\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\062\uffd0\064\uffd0\065\uffd0\066" +
    "\uffd0\001\002\000\012\010\327\011\330\012\212\016\326" +
    "\001\002\000\026\014\072\020\111\021\117\022\102\023" +
    "\112\024\071\025\073\026\116\033\104\047\077\001\002" +
    "\000\042\002\uffde\004\uffde\017\uffde\023\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde" +
    "\062\uffde\064\uffde\065\uffde\066\uffde\001\002\000\032\004" +
    "\332\014\072\016\331\020\111\021\117\022\102\023\112" +
    "\024\071\025\073\026\116\033\104\047\077\001\002\000" +
    "\026\014\072\020\111\021\117\022\102\023\112\024\071" +
    "\025\073\026\116\033\104\047\077\001\002\000\004\013" +
    "\335\001\002\000\004\010\334\001\002\000\042\002\uffda" +
    "\004\uffda\017\uffda\023\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\064\uffda" +
    "\065\uffda\066\uffda\001\002\000\004\005\336\001\002\000" +
    "\004\014\337\001\002\000\004\024\340\001\002\000\004" +
    "\015\341\001\002\000\004\010\342\001\002\000\042\002" +
    "\uffd8\004\uffd8\017\uffd8\023\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\064" +
    "\uffd8\065\uffd8\066\uffd8\001\002\000\006\012\166\017\344" +
    "\001\002\000\004\010\345\001\002\000\042\002\uffd9\004" +
    "\uffd9\017\uffd9\023\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\001\002\000\004\017\347\001\002\000\004" +
    "\010\350\001\002\000\042\002\uffdd\004\uffdd\017\uffdd\023" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\062\uffdd\064\uffdd\065\uffdd\066\uffdd\001" +
    "\002\000\030\002\ufff7\004\ufff7\023\ufff7\052\ufff7\053\ufff7" +
    "\056\ufff7\061\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\001" +
    "\002\000\030\002\uffff\004\uffff\023\uffff\052\uffff\053\uffff" +
    "\056\uffff\061\uffff\062\uffff\064\uffff\065\uffff\066\uffff\001" +
    "\002\000\042\002\uffce\004\uffce\017\uffce\023\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\064\uffce\065\uffce\066\uffce\001\002\000\026" +
    "\014\072\020\111\021\117\022\102\023\112\024\071\025" +
    "\073\026\116\033\104\047\077\001\002\000\004\015\356" +
    "\001\002\000\004\010\357\001\002\000\042\002\uffb8\004" +
    "\uffb8\017\uffb8\023\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\001\002\000\026\014\072\020\111\021\117" +
    "\022\102\023\112\024\071\025\073\026\116\033\104\047" +
    "\077\001\002\000\004\015\362\001\002\000\004\016\363" +
    "\001\002\000\030\004\031\023\027\052\015\053\011\054" +
    "\065\055\062\056\013\061\004\062\033\064\026\066\007" +
    "\001\002\000\032\004\031\017\365\023\027\052\015\053" +
    "\011\054\065\055\062\056\013\061\004\062\033\064\026" +
    "\066\007\001\002\000\042\002\uffbc\004\uffbc\017\uffbc\023" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\001" +
    "\002\000\026\014\072\020\111\021\117\022\102\023\112" +
    "\024\071\025\073\026\116\033\104\047\077\001\002\000" +
    "\004\015\370\001\002\000\004\010\371\001\002\000\042" +
    "\002\uffb9\004\uffb9\017\uffb9\023\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\001\002\000\026\014\072\020" +
    "\111\021\117\022\102\023\112\024\071\025\073\026\116" +
    "\033\104\047\077\001\002\000\004\015\375\001\002\000" +
    "\004\015\uffc6\001\002\000\004\016\376\001\002\000\004" +
    "\060\u0100\001\002\000\010\017\uffc4\057\uffc4\060\uffc4\001" +
    "\002\000\016\020\111\021\117\022\102\024\071\025\073" +
    "\026\116\001\002\000\010\017\u0103\057\u0105\060\u0100\001" +
    "\002\000\004\017\u0108\001\002\000\042\002\uffc8\004\uffc8" +
    "\017\uffc8\023\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\001\002\000\010\017\uffc5\057\uffc5\060\uffc5\001" +
    "\002\000\004\011\u0106\001\002\000\030\004\031\023\027" +
    "\052\015\053\011\054\065\055\062\056\013\061\004\062" +
    "\033\064\026\066\007\001\002\000\032\004\031\017\uffc2" +
    "\023\027\052\015\053\011\054\065\055\062\056\013\061" +
    "\004\062\033\064\026\066\007\001\002\000\042\002\uffc7" +
    "\004\uffc7\017\uffc7\023\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\064\uffc7" +
    "\065\uffc7\066\uffc7\001\002\000\004\011\u010a\001\002\000" +
    "\030\004\031\023\027\052\015\053\011\054\065\055\062" +
    "\056\013\061\004\062\033\064\026\066\007\001\002\000" +
    "\036\004\031\017\uffc3\023\027\052\015\053\011\054\065" +
    "\055\062\056\013\057\uffc3\060\uffc3\061\004\062\033\064" +
    "\026\066\007\001\002\000\006\023\u010f\064\u010e\001\002" +
    "\000\004\010\u0115\001\002\000\004\023\u0112\001\002\000" +
    "\004\011\u0110\001\002\000\026\014\072\020\111\021\117" +
    "\022\102\023\112\024\071\025\073\026\116\033\104\047" +
    "\077\001\002\000\004\010\uffbf\001\002\000\004\011\u0113" +
    "\001\002\000\026\014\072\020\111\021\117\022\102\023" +
    "\112\024\071\025\073\026\116\033\104\047\077\001\002" +
    "\000\004\010\uffc0\001\002\000\026\014\072\020\111\021" +
    "\117\022\102\023\112\024\071\025\073\026\116\033\104" +
    "\047\077\001\002\000\004\010\u0117\001\002\000\006\031" +
    "\147\032\150\001\002\000\004\015\u0119\001\002\000\004" +
    "\016\u011a\001\002\000\030\004\031\023\027\052\015\053" +
    "\011\054\065\055\062\056\013\061\004\062\033\064\026" +
    "\066\007\001\002\000\032\004\031\017\u011c\023\027\052" +
    "\015\053\011\054\065\055\062\056\013\061\004\062\033" +
    "\064\026\066\007\001\002\000\042\002\uffc1\004\uffc1\017" +
    "\uffc1\023\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\062\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\044\002\035\004\027\010\021\012\024\025" +
    "\007\027\016\031\017\034\015\041\005\042\022\043\033" +
    "\045\031\046\004\051\011\052\023\053\020\054\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\027\010\021\012\024\025\007\027\016\031" +
    "\017\034\015\041\005\042\022\043\033\045\031\046\004" +
    "\051\011\053\351\054\013\001\001\000\002\001\001\000" +
    "\004\044\324\001\001\000\002\001\001\000\004\011\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\041\047" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\027\010\021\012" +
    "\060\025\050\026\062\027\055\030\063\031\056\032\047" +
    "\034\054\041\046\042\057\043\066\045\065\050\052\051" +
    "\051\054\053\001\001\000\002\001\001\000\042\004\027" +
    "\010\021\012\060\025\050\026\062\027\055\030\063\031" +
    "\056\034\054\041\046\042\057\043\066\045\065\050\203" +
    "\051\051\054\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\112\004\113\005\117\007\100" +
    "\010\104\012\107\014\106\015\102\016\075\017\114\021" +
    "\105\022\077\023\073\024\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\112\004\113\005\200\007\100\010\104\012\107\014" +
    "\106\015\102\016\075\017\114\021\105\022\077\023\073" +
    "\024\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\112\004\113" +
    "\007\100\010\104\012\107\014\106\015\102\016\075\017" +
    "\114\021\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\112\004" +
    "\113\007\100\010\104\012\107\015\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\145\001\001\000\004\020\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\112\004\113\007" +
    "\100\010\104\012\107\014\106\015\102\016\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\112\004\113\007\100\010\104\012\107\014\106" +
    "\015\102\016\075\017\143\001\001\000\002\001\001\000" +
    "\022\003\112\004\113\007\100\010\104\012\107\014\106" +
    "\015\102\016\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\112\004\113\007\100\010\104\012\107" +
    "\014\142\015\102\001\001\000\020\003\112\004\113\007" +
    "\100\010\104\012\107\014\141\015\102\001\001\000\020" +
    "\003\112\004\113\007\100\010\104\012\107\014\136\015" +
    "\102\001\001\000\002\001\001\000\016\003\112\004\113" +
    "\007\100\010\104\012\107\015\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\112\004\113\005\170\007\100" +
    "\010\104\012\107\014\106\015\102\016\075\017\114\021" +
    "\105\022\077\023\073\024\074\001\001\000\040\003\112" +
    "\004\113\005\164\007\100\010\104\012\107\013\163\014" +
    "\106\015\102\016\075\017\114\021\105\022\077\023\073" +
    "\024\074\001\001\000\004\006\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\112\004\113\005\167\007\100\010\104\012\107\014" +
    "\106\015\102\016\075\017\114\021\105\022\077\023\073" +
    "\024\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\112\004\113\007\100\010\104\012" +
    "\107\014\106\015\102\016\075\017\114\021\105\022\077" +
    "\023\175\001\001\000\002\001\001\000\030\003\112\004" +
    "\113\007\100\010\104\012\107\014\106\015\102\016\075" +
    "\017\114\021\105\022\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\027\010\021\012\060\025\050\026\062\027\055\030\063" +
    "\031\056\032\207\034\054\041\046\042\057\043\066\045" +
    "\065\050\052\051\051\054\053\001\001\000\042\004\027" +
    "\010\021\012\060\025\050\026\062\027\055\030\063\031" +
    "\056\034\054\041\046\042\057\043\066\045\065\050\203" +
    "\051\051\054\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\112\004\113\005\214" +
    "\007\100\010\104\012\107\014\106\015\102\016\075\017" +
    "\114\021\105\022\077\023\073\024\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\027\010\021\012" +
    "\060\025\050\026\062\027\055\030\063\031\056\032\217" +
    "\034\054\041\046\042\057\043\066\045\065\050\052\051" +
    "\051\054\053\001\001\000\042\004\027\010\021\012\060" +
    "\025\050\026\062\027\055\030\063\031\056\034\054\041" +
    "\046\042\057\043\066\045\065\050\203\051\051\054\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\027\010\021\012\060\025\050\026\062\027\055\030\063" +
    "\031\056\032\223\034\054\041\046\042\057\043\066\045" +
    "\065\050\052\051\051\054\053\001\001\000\042\004\027" +
    "\010\021\012\060\025\050\026\062\027\055\030\063\031" +
    "\056\034\054\041\046\042\057\043\066\045\065\050\203" +
    "\051\051\054\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\112" +
    "\004\113\005\231\007\100\010\104\012\107\014\106\015" +
    "\102\016\075\017\114\021\105\022\077\023\073\024\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\112\004\113\005\236" +
    "\007\100\010\104\012\107\014\106\015\102\016\075\017" +
    "\114\021\105\022\077\023\073\024\074\001\001\000\002" +
    "\001\001\000\036\003\112\004\113\005\240\007\100\010" +
    "\104\012\107\014\106\015\102\016\075\017\114\021\105" +
    "\022\077\023\073\024\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\112\004\113" +
    "\005\244\007\100\010\104\012\107\014\106\015\102\016" +
    "\075\017\114\021\105\022\077\023\073\024\074\001\001" +
    "\000\002\001\001\000\010\012\250\055\246\056\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\112\004\113\005\164\007" +
    "\100\010\104\012\107\013\163\014\106\015\102\016\075" +
    "\017\114\021\105\022\077\023\073\024\074\001\001\000" +
    "\002\001\001\000\044\004\027\010\021\012\060\025\050" +
    "\026\062\027\055\030\063\031\056\032\255\034\054\041" +
    "\046\042\057\043\066\045\065\050\052\051\051\054\053" +
    "\001\001\000\042\004\027\010\021\012\060\025\050\026" +
    "\062\027\055\030\063\031\056\034\054\041\046\042\057" +
    "\043\066\045\065\050\203\051\051\054\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\112\004\113\005\317\007\100\010\104\012\107\014" +
    "\106\015\102\016\075\017\114\021\105\022\077\023\073" +
    "\024\074\001\001\000\002\001\001\000\036\003\112\004" +
    "\113\005\266\007\100\010\104\012\107\014\106\015\102" +
    "\016\075\017\114\021\105\022\077\023\073\024\074\001" +
    "\001\000\040\003\112\004\113\005\164\007\100\010\104" +
    "\012\107\013\276\014\106\015\102\016\075\017\114\021" +
    "\105\022\077\023\073\024\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\112\004\113\005\273\007\100" +
    "\010\104\012\107\014\106\015\102\016\075\017\114\021" +
    "\105\022\077\023\073\024\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\112\004\113\005\304\007\100\010" +
    "\104\012\107\014\106\015\102\016\075\017\114\021\105" +
    "\022\077\023\073\024\074\001\001\000\002\001\001\000" +
    "\010\012\250\055\306\056\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\112\004" +
    "\113\005\312\007\100\010\104\012\107\014\106\015\102" +
    "\016\075\017\114\021\105\022\077\023\073\024\074\001" +
    "\001\000\002\001\001\000\036\003\112\004\113\005\314" +
    "\007\100\010\104\012\107\014\106\015\102\016\075\017" +
    "\114\021\105\022\077\023\073\024\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\112\004\113\005\322" +
    "\007\100\010\104\012\107\014\106\015\102\016\075\017" +
    "\114\021\105\022\077\023\073\024\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\112\004\113\005\345\007\100\010\104\012\107\014\106" +
    "\015\102\016\075\017\114\021\105\022\077\023\073\024" +
    "\074\001\001\000\002\001\001\000\036\003\112\004\113" +
    "\005\332\007\100\010\104\012\107\014\106\015\102\016" +
    "\075\017\114\021\105\022\077\023\073\024\074\001\001" +
    "\000\040\003\112\004\113\005\164\007\100\010\104\012" +
    "\107\013\342\014\106\015\102\016\075\017\114\021\105" +
    "\022\077\023\073\024\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\112\004\113\005\354\007\100\010" +
    "\104\012\107\014\106\015\102\016\075\017\114\021\105" +
    "\022\077\023\073\024\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\112\004\113" +
    "\005\360\007\100\010\104\012\107\014\106\015\102\016" +
    "\075\017\114\021\105\022\077\023\073\024\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\027\010" +
    "\021\012\060\025\050\026\062\027\055\030\063\031\056" +
    "\032\363\034\054\041\046\042\057\043\066\045\065\050" +
    "\052\051\051\054\053\001\001\000\042\004\027\010\021" +
    "\012\060\025\050\026\062\027\055\030\063\031\056\034" +
    "\054\041\046\042\057\043\066\045\065\050\203\051\051" +
    "\054\053\001\001\000\002\001\001\000\036\003\112\004" +
    "\113\005\366\007\100\010\104\012\107\014\106\015\102" +
    "\016\075\017\114\021\105\022\077\023\073\024\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\112\004\113\005\373\007\100\010\104\012" +
    "\107\014\106\015\102\016\075\017\114\021\105\022\077" +
    "\023\073\024\074\040\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\376\037\u0100" +
    "\001\001\000\002\001\001\000\004\003\u0108\001\001\000" +
    "\006\035\u0101\036\u0103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\027\010\021\012\060\025\050\026\062\027\055\030\063" +
    "\031\056\032\u0106\034\054\041\046\042\057\043\066\045" +
    "\065\050\052\051\051\054\053\001\001\000\042\004\027" +
    "\010\021\012\060\025\050\026\062\027\055\030\063\031" +
    "\056\034\054\041\046\042\057\043\066\045\065\050\203" +
    "\051\051\054\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\027\010\021\012\060\025\050\026\062" +
    "\027\055\030\063\031\056\032\u010a\034\054\041\046\042" +
    "\057\043\066\045\065\050\052\051\051\054\053\001\001" +
    "\000\042\004\027\010\021\012\060\025\050\026\062\027" +
    "\055\030\063\031\056\034\054\041\046\042\057\043\066" +
    "\045\065\050\203\051\051\054\053\001\001\000\004\033" +
    "\u010c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\112\004\113\005\u0110\007\100\010" +
    "\104\012\107\014\106\015\102\016\075\017\114\021\105" +
    "\022\077\023\073\024\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\112\004\113\005\u0113\007\100" +
    "\010\104\012\107\014\106\015\102\016\075\017\114\021" +
    "\105\022\077\023\073\024\074\001\001\000\002\001\001" +
    "\000\036\003\112\004\113\005\u0115\007\100\010\104\012" +
    "\107\014\106\015\102\016\075\017\114\021\105\022\077" +
    "\023\073\024\074\001\001\000\002\001\001\000\004\011" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\027\010\021\012\060\025\050\026\062\027\055\030" +
    "\063\031\056\032\u011a\034\054\041\046\042\057\043\066" +
    "\045\065\050\052\051\051\054\053\001\001\000\042\004" +
    "\027\010\021\012\060\025\050\026\062\027\055\030\063" +
    "\031\056\034\054\041\046\042\057\043\066\045\065\050" +
    "\203\051\051\054\053\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico_cjs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico_cjs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico_cjs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo Raiz=null;
    public static LinkedList<Terror> TablaES = new LinkedList<Terror>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        Terror datos = new Terror(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        Terror datos = new Terror(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico_cjs$actions {



  private final sintactico_cjs parser;

  /** Constructor */
  CUP$sintactico_cjs$actions(sintactico_cjs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico_cjs$do_action_part00000000(
    int                        CUP$sintactico_cjs$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_cjs$parser,
    java.util.Stack            CUP$sintactico_cjs$stack,
    int                        CUP$sintactico_cjs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico_cjs$result;

      /* select the action based on the action number */
      switch (CUP$sintactico_cjs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		RESULT = start_val;
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico_cjs$parser.done_parsing();
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_CJS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo root=new Nodo("INICIO_CJS");
                                    Nodo hijo=a;
                                    root.agregarHijo(hijo);
                                    
                                    Raiz=root;
                                    System.out.println("END_PARSER");
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_CJS ::= L_CJS CJS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    Nodo hijo=n2;
                                    nodo.agregarHijo(hijo);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("L_CJS",40, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_CJS ::= CJS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=new Nodo("L_CJS");
                                    Nodo hijo=n1;
                                    nodo.agregarHijo(hijo);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("L_CJS",40, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CJS ::= DECL_METFUN 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CJS ::= DECLARACION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CJS ::= DECLASIG 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CJS ::= SENTEIMPRIMIR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CJS ::= SENTEMENSAJE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CJS ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CJS ::= CALL_METFUN pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CJS ::= EVENTOBSERVADOR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CJS ::= SENTEFOR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CJS ::= SENTEMIENTRAS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CJS ::= SENTESELECC 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CJS ::= SENTEIF 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CJS",41, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECL_METFUN ::= funcion id para PARAMETROS parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                    Nodo nodo=new Nodo("METFUNC",n1right,n1left);
                                    Nodo hijo1=new Nodo("ID",n2.toString().toLowerCase(),n2right,n2left);
                                    Nodo hijo2=n3;
                                    Nodo hijo3=n4;

                                    nodo.agregarHijo(hijo1);
                                    nodo.agregarHijo(hijo2);
                                    nodo.agregarHijo(hijo3);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECL_METFUN",36, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECL_METFUN ::= funcion id para parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                    Nodo nodo=new Nodo("METFUNC",n1right,n1left);
                                    Nodo hijo1=new Nodo("ID",n2.toString().toLowerCase(),n2right,n2left);
                                    Nodo hijo2=n3;

                                    nodo.agregarHijo(hijo1);
                                    nodo.agregarHijo(hijo2);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECL_METFUN",36, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECL_FUN ::= id para parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                    Nodo nodo=new Nodo("FUNC",n1right,n1left);
                                    Nodo hijo1=new Nodo("ID",n1.toString().toLowerCase(),n1right,n1left);
                                    Nodo hijo2=n3;
                                    nodo.agregarHijos(hijo1,hijo2);

                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECL_FUN",44, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS ::= LVAR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",37, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LIST_SENTE ::= LIST_SENTE SENTENCIA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    Nodo hijo=n2;
                                    nodo.agregarHijo(hijo);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LIST_SENTE",24, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIST_SENTE ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=new Nodo("LIST_SENTE");
                                    Nodo hijo=n1;
                                    nodo.agregarHijo(hijo);
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LIST_SENTE",24, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DECLARACION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DECLASIG 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTEIF 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTESELECC 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTEFOR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTEMIENTRAS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTERETORNAR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTEDETENER 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTEIMPRIMIR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTEMENSAJE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= CALL_METFUN pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= EVENTOBSERVADOR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                    Nodo nodo=n1;
                                    RESULT = nodo;
                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTENCIA",38, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= dimv LVAR pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("DECLVAR",n1right,n1left);
                                                        Nodo hijo=n2;
                                                        nodo.agregarHijo(hijo);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLARACION",39, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= dimv LVAR allav EXPRESION cllav pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("DECLVECT",n1right,n1left);
                                                        Nodo hijo1=n2;

                                                        Nodo hijo2=n3;

                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLARACION",39, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LVAR ::= LVAR comma id 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        Nodo hijo=new Nodo("VAR",n2.toString().toLowerCase(),n2right,n2left);
                                                        nodo.agregarHijo(hijo);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LVAR",34, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LVAR ::= id 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=new Nodo("LVAR");
                                                        Nodo hijo=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        nodo.agregarHijo(hijo);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LVAR",34, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLASIG ::= dimv LVAR dpuntos EXPRESION pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("DECLASIGVAR");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=n1;
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLASIG",35, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLASIG ::= dimv LVAR dpuntos allav LEXPR cllav pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("DECLASIGVECT");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=n1;
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLASIG",35, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLASIG ::= dimv LVAR dpuntos documento punto obtener para cadena parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("DECLASIGOBJ");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=n1;
                                                        hijo2=new Nodo("CAD", n2.toString().replace("\"", ""),n2right,n2left);
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLASIG",35, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EVENTOBSERVADOR ::= documento punto observador para EXPRESION comma EVTOBSER parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("EVENTOBSERVADOR");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=n1;
                                                        hijo2=n3;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EVENTOBSERVADOR",42, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EVENTOBSERVADOR ::= id punto observador para EXPRESION comma EVTOBSER parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("OBJETOOBSERVADOR");
                                                        Nodo hijo1,hijo2,hijo3;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;
                                                        hijo3=n3;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        nodo.agregarHijo(hijo3);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EVENTOBSERVADOR",42, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EVTOBSER ::= DECL_FUN 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EVTOBSER",43, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EVTOBSER ::= CALL_METFUN 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EVTOBSER",43, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LEXPR ::= LEXPR comma EXPRESION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        Nodo hijo=n2;
                                                        nodo.agregarHijo(hijo);
                                                        RESULT = nodo;
                                                        
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LEXPR",9, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LEXPR ::= EXPRESION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=new Nodo("LEXPR");
                                                        Nodo hijo=n1;
                                                        nodo.agregarHijo(hijo);
                                                        RESULT = nodo;
                                                        
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LEXPR",9, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= id dpuntos EXPRESION pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("ASIG_VAR");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= id allav EXPRESION cllav dpuntos EXPRESION pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("ASIG_POSVECT");
                                                        Nodo hijo1,hijo2,hijo3;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;
                                                        hijo3=n3;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        nodo.agregarHijo(hijo3);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= id dpuntos allav LEXPR cllav pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo=new Nodo("ASIG_VECT");
                                                        Nodo hijo1,hijo2;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= OPSIMPLE pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=n1;
                                                        
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= id dpuntos documento punto obtener para EXPRESION parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo =new Nodo("ASIG_OBJ");
                                                        Nodo hijo1, hijo2;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT=nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= id punto setelemento para EXPRESION comma EXPRESION parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo =new Nodo("SET_OBJ");
                                                        Nodo hijo1, hijo2,hijo3;
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2= n2;
                                                        hijo3= n3;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        nodo.agregarHijo(hijo3);
                                                        RESULT=nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= documento punto obtener para EXPRESION parc punto setelemento para EXPRESION comma EXPRESION parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-9)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                        Nodo nodo =new Nodo("SET_OBJETO");
                                                        Nodo hijo1, hijo2,hijo3;
                                                        hijo1=n1;
                                                        hijo2= n2;
                                                        hijo3= n3;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        nodo.agregarHijo(hijo3);
                                                        RESULT=nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",32, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-13)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTEIF ::= si para EXPRESION parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("IF",n1right,n1left);
                                                        nodo.agregarHijos(n2,n3);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEIF",31, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTEIF ::= si para EXPRESION parc allav LIST_SENTE cllav sino allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("IF",n1right,n1left);
                                                        nodo.agregarHijos(n2,n3);
                                                        nodo.agregarHijo(n4);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEIF",31, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTESELECC ::= selecciona para VALCASO parc allav LCASOS cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("SELECCIONAR",n1right,n1left);
                                                        nodo.agregarHijos(n2,n3);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTESELECC",33, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTESELECC ::= selecciona para VALCASO parc allav LCASOS CDEFECTO cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("SELECCIONAR",n1right,n1left);
                                                        nodo.agregarHijos(n2,n3);
                                                        nodo.agregarHijo(n4);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTESELECC",33, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALCASO ::= EXPRESION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VALCASO",30, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LCASOS ::= LCASOS CASOS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=n1;
                                                        nodo.agregarHijo(n2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LCASOS",29, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LCASOS ::= CASOS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=new Nodo("LCASOS");
                                                        nodo.agregarHijo(n1);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("LCASOS",29, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASOS ::= caso VPUNTUAL dpuntos LIST_SENTE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                            Nodo nodo=new Nodo("CASOS",n1right,n1left);
                                                            nodo.agregarHijos(n2,n3);
                                                            RESULT = nodo;
                                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CASOS",28, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CDEFECTO ::= defecto dpuntos LIST_SENTE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo = new Nodo("CDEFECTO",n1right,n1left);
                                                        nodo.agregarHijo(n2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CDEFECTO",27, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTEFOR ::= spara para DECLFOR pcoma EXPRESION pcoma ACCION parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-8)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n4 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n5 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                        Nodo nodo=new Nodo("FOR",n1right,n1left);
                                                        nodo.agregarHijo(n2);
                                                        nodo.agregarHijo(n3);
                                                        nodo.agregarHijo(n4);
                                                        nodo.agregarHijo(n5);

                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEFOR",26, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLFOR ::= dimv id dpuntos EXPRESION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=new Nodo("DECLASIGVAR",n1right,n1left);
                                                        
                                                        Nodo hijo1,hijo2;
                                                        hijo1 = new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;

                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLFOR",25, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLFOR ::= id dpuntos EXPRESION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                        Nodo nodo=new Nodo("ASIG_VAR",n1right,n1left);
                                                        Nodo hijo1,hijo2;
                                                        
                                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                                        hijo2=n2;
                                                        nodo.agregarHijos(hijo1,hijo2);
                                                        RESULT = nodo;
                                                        

                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("DECLFOR",25, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCION ::= inc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                            Nodo nodo= new Nodo("INCR",n1.toString(),n1right,n1left);
                            RESULT=nodo;
                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ACCION",7, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCION ::= dec 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                            Nodo nodo= new Nodo("DECR",n1.toString(),n1right,n1left);
                            RESULT=nodo;
                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("ACCION",7, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTEMIENTRAS ::= mientras para EXPRESION parc allav LIST_SENTE cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                                                    Nodo nodo=new Nodo("MIENTRAS",n1right,n1left);
                                                                                    nodo.agregarHijos(n2,n3);
                                                                                    RESULT = nodo;
                                                                                
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEMIENTRAS",23, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTERETORNAR ::= retornar EXPRESION pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                                Nodo nodo=new Nodo("RETORNAR",n1right,n1left);
                                                                nodo.agregarHijo(n2);
                                                                RESULT = nodo;
                                                            
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTERETORNAR",22, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTEDETENER ::= detener pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                                                Nodo nodo=new Nodo("DETENER",n1right,n1left);
                                                                RESULT = nodo;
                                                            
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEDETENER",20, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTEIMPRIMIR ::= imprimir para EXPRESION parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                                Nodo nodo=new Nodo("IMPRIMIR",n1right,n1left);
                                                                nodo.agregarHijo(n2);
                                                                RESULT = nodo;
                                                            
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEIMPRIMIR",21, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTEMENSAJE ::= mensaje para EXPRESION parc pcoma 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                                                Nodo nodo=new Nodo("MENSAJE",n1right,n1left);
                                                                nodo.agregarHijo(n2);
                                                                RESULT = nodo;
                                                            
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("SENTEMENSAJE",19, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPOR 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=n1;
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPOR ::= EXPOR lor EXPAND 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=new Nodo(n2.toString(),n2right,n2left);
                                            nodo.agregarHijo(n1);
                                            nodo.agregarHijo(n3);
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPOR",18, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPOR ::= EXPAND 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=n1;
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPOR",18, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPAND ::= EXPAND land EXPNOT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=new Nodo(n2.toString(),n2right,n2left);
                                            nodo.agregarHijo(n1);
                                            nodo.agregarHijo(n3);
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPAND",17, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPAND ::= EXPNOT 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=n1;
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPAND",17, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPNOT ::= lnot RELACIONAL 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=new Nodo(n1.toString(),n1right,n1left);
                                            nodo.agregarHijo(n2);
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPNOT",16, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPNOT ::= RELACIONAL 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                            Nodo nodo=n1;
                                            RESULT = nodo;
                                        
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPNOT",16, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RELACIONAL ::= EXPARITMETICA OPRELACIONAL EXPARITMETICA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                                        Nodo nodo=n2;
                                                                        nodo.agregarHijo(n1);
                                                                        nodo.agregarHijo(n3);
                                                                        RESULT = nodo;
                                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RELACIONAL ::= EXPARITMETICA 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                                                        Nodo nodo=n1;
                                                                        RESULT = nodo;
                                                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPRELACIONAL ::= menorq 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPRELACIONAL ::= mayorq 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPRELACIONAL ::= menorigual 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPRELACIONAL ::= mayorigual 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPRELACIONAL ::= igualigual 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPRELACIONAL ::= diferente 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo(n1.toString(), n1right,n1left);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPRELACIONAL",14, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPARITMETICA ::= EXPARITMETICA mas T 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPARITMETICA",13, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPARITMETICA ::= EXPARITMETICA menos T 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPARITMETICA",13, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPARITMETICA ::= T 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo=n1;
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPARITMETICA",13, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // T ::= T por F 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // T ::= T div F 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // T ::= T modulo F 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // T ::= F 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo=n1;
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // F ::= F potencia G 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n3 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo = new Nodo(n2.toString(),n2right,n2left);
                                        
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n3);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("F",10, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // F ::= G 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo=n1;
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("F",10, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // G ::= para EXPRESION parc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // G ::= VPUNTUAL 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // G ::= VACCESO 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // G ::= CALL_METFUN 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // G ::= menos G 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo=new Nodo("_", n1right,n1left);
                                        nodo.agregarHijo(n2);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // G ::= OPSIMPLE 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // G ::= CPRIMITIVAS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        RESULT = n1;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("G",11, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CALL_METFUN ::= id para parc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                        Nodo nodo=new Nodo("CALL_METFUN");
                                        
                                        Nodo hijo=new Nodo("ID",n1.toString().toLowerCase(),n1right,n1left);
                                        nodo.agregarHijo(hijo);

                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CALL_METFUN",8, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CALL_METFUN ::= id para LEXPR parc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		
                                        Nodo nodo=new Nodo("CALL_METFUN");
                                        
                                        Nodo hijo=new Nodo("ID",n1.toString().toLowerCase(),n1right,n1left);
                                        nodo.agregarHijo(hijo);

                                        Nodo hijo2;
                                        hijo2=n2;
                                        nodo.agregarHijo(hijo2);

                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CALL_METFUN",8, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VPUNTUAL ::= num 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		  Nodo nodo;
                        nodo= new Nodo("NUM", n1.toString(),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VPUNTUAL ::= cadena 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                        Nodo nodo;
                        nodo= new Nodo("CAD", n1.toString().replace("\"", ""),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VPUNTUAL ::= fecha 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                        Nodo nodo;
                        nodo= new Nodo("FECHA", n1.toString().replace("\'", ""),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VPUNTUAL ::= fechah 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                        Nodo nodo;
                        nodo= new Nodo("FECHAHORA", n1.toString().replace("\'", ""),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VPUNTUAL ::= verdadero 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                        Nodo nodo;
                        nodo= new Nodo("BOOL", n1.toString(),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VPUNTUAL ::= falso 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                        Nodo nodo;
                        nodo= new Nodo("BOOL", n1.toString(),n1right,n1left);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VPUNTUAL",1, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VACCESO ::= id 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		  
                        Nodo nodo=new Nodo("VACCESO");
                        Nodo hijo;
                        hijo=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                        nodo.agregarHijo(hijo);
                        RESULT=nodo;
                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VACCESO",2, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VACCESO ::= id allav EXPRESION cllav 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		   
                                        Nodo nodo=new Nodo("VACCESOVECT");
                                        
                                        Nodo hijo1, hijo2;
                                        hijo1=new Nodo("VAR",n1.toString().toLowerCase(),n1right,n1left);
                                        nodo.agregarHijo(hijo1);

                                        hijo2=n2;
                                        nodo.agregarHijo(hijo2);
                                        
                                        RESULT=nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("VACCESO",2, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CPRIMITIVAS ::= id punto PRIMITIVAS 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo=new Nodo("CPRIMITIVAS");
                                        Nodo nodo1,nodo2;

                                        nodo1= new Nodo("VAR",n1.toString(),n1right,n1left);
                                        nodo.agregarHijo(nodo1);

                                        nodo2=n2;
                                        nodo.agregarHijo(nodo2);

                                        RESULT=nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("CPRIMITIVAS",5, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPSIMPLE ::= VACCESO ACCION 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.peek()).value;
		
                                        Nodo nodo= new Nodo("OPSIMPLE");
                                        nodo.agregarHijo(n1);
                                        nodo.agregarHijo(n2);
                                        RESULT = nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("OPSIMPLE",6, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PRIMITIVAS ::= conteo para parc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                        Nodo nodo=new Nodo("CONTEO",n1.toString(),n1right,n1left);
                                        RESULT= nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("PRIMITIVAS",4, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PRIMITIVAS ::= atexto para parc 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)).value;
		
                                        Nodo nodo=new Nodo("ATEXTO",n1.toString(),n1right,n1left);
                                        RESULT= nodo;
                                    
              CUP$sintactico_cjs$result = parser.getSymbolFactory().newSymbol("PRIMITIVAS",4, ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.elementAt(CUP$sintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$sintactico_cjs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico_cjs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico_cjs$do_action(
    int                        CUP$sintactico_cjs$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_cjs$parser,
    java.util.Stack            CUP$sintactico_cjs$stack,
    int                        CUP$sintactico_cjs$top)
    throws java.lang.Exception
    {
              return CUP$sintactico_cjs$do_action_part00000000(
                               CUP$sintactico_cjs$act_num,
                               CUP$sintactico_cjs$parser,
                               CUP$sintactico_cjs$stack,
                               CUP$sintactico_cjs$top);
    }
    }

}
