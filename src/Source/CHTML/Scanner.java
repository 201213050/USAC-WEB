/* The following code was generated by JFlex 1.6.1 */

package Source.CHTML;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Principal.Errores;
import Principal.Interfaz;
import Principal.tablaSimbolos;
/*
Directivas:
public: clase publica
cup: compatibilidad con cup
full: extender el alfabeto con todos los valores de 8 bits
line: agrega la variable int yyline, para indicar la fila del lexema
char: agrega la variable int yychar, indica el indice del primer caracter del lexema
ignorecase: validar, indistitntamente si la letra es mayuscula o minuscula
eofval: especifica un valor de retorno al final del archivo
*/





/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>chtml.l</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int ENCABEZADO1 = 4;
  public static final int ENCABEZADO2 = 6;
  public static final int CUERPO = 8;
  public static final int TITULO1 = 10;
  public static final int TITULO2 = 12;
  public static final int TITULO3 = 14;
  public static final int ELEMENTOS = 16;
  public static final int TEXTO1 = 18;
  public static final int TEXTO2 = 20;
  public static final int IMAGEN1 = 22;
  public static final int IMAGEN2 = 24;
  public static final int BOTON1 = 26;
  public static final int BOTON2 = 28;
  public static final int ENLACE1 = 30;
  public static final int ENLACE2 = 32;
  public static final int T1 = 34;
  public static final int T2 = 36;
  public static final int T3 = 38;
  public static final int T4 = 40;
  public static final int T5 = 42;
  public static final int T6 = 44;
  public static final int T7 = 46;
  public static final int TB = 48;
  public static final int TB2 = 50;
  public static final int TI = 52;
  public static final int TI2 = 54;
  public static final int TB3 = 56;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 10, 10, 14, 14, 
    10, 10, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     6,  6,  6,  6,  6,  6,  6,  6,  6,  1,  3, 50,  2,  2,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     1,  6,  8, 18,  6,  6,  6,  6, 11, 12, 13,  6,  6, 14,  5, 19, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  7, 44, 34, 43, 35,  6, 
     6, 28, 39, 29, 27, 25, 38, 42, 30, 21, 47, 46, 37, 36, 31, 33, 
    40, 23, 26, 49, 32, 24, 15, 15, 41, 15, 22,  6, 16,  6,  6, 17, 
     6, 28, 39, 29, 27, 25, 38, 42, 30, 21, 47, 46, 37, 36, 31, 33, 
    40, 23, 26, 49, 32, 24, 15, 15, 41, 15, 22,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6, 50,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6, 10,  6,  6,  6,  6,  6,  6,  6, 10,  6,  6,  6, 10,  6,  6, 
     6, 10,  6, 10,  6,  6,  6,  6,  6,  6, 10,  6,  6,  6,  6,  6, 
     6,  6,  6,  9,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  9,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\1\1\1\2\1\3\4\1\1\4\1\5\3\1"+
    "\1\6\1\7\1\6\1\10\1\11\4\1\1\12\1\13"+
    "\1\1\1\14\1\15\1\1\1\16\1\1\1\17\1\20"+
    "\1\21\1\22\3\1\1\23\1\1\1\24\1\25\1\1"+
    "\1\26\1\27\5\1\1\30\2\1\1\31\4\1\1\32"+
    "\2\1\1\33\1\34\1\4\1\1\1\35\2\1\1\36"+
    "\1\37\3\1\1\40\1\41\1\42\1\43\1\44\2\1"+
    "\36\0\1\45\3\0\1\46\17\0\1\45\5\0\1\47"+
    "\1\50\25\0\1\51\3\0\1\52\4\0\1\53\11\0"+
    "\1\54\31\0\1\55\3\0\1\56\1\0\1\57\1\60"+
    "\3\0\1\61\10\0\1\62\2\0\1\63\7\0\1\62"+
    "\1\0\1\63\14\0\1\64\1\65\1\66\5\0\1\67"+
    "\1\70\6\0\1\71\4\0\1\72\1\0\1\73\2\0"+
    "\2\74\2\0\1\72\1\0\1\73\1\0\1\75\3\0"+
    "\1\76\2\0\1\77\1\0\1\100\1\101\7\0\1\102"+
    "\13\0\1\103\4\0\1\104\1\105\1\106\15\0\1\107"+
    "\25\0\1\110\1\0\1\111\5\0\1\112\1\113\1\0"+
    "\1\112\7\0\1\114\1\115\1\116\1\117\3\0\1\120"+
    "\1\0\1\121\1\122\1\0\1\123\1\124\1\125\1\126"+
    "\1\0\1\127\1\0\1\130\1\131\3\0\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u057c\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u057c\0\u06b4\0\u06e8\0\u071c\0\u057c"+
    "\0\u057c\0\u0750\0\u057c\0\u057c\0\u0784\0\u07b8\0\u07ec\0\u0820"+
    "\0\u057c\0\u057c\0\u0854\0\u057c\0\u057c\0\u0888\0\u057c\0\u08bc"+
    "\0\u057c\0\u057c\0\u057c\0\u057c\0\u08f0\0\u0924\0\u0958\0\u057c"+
    "\0\u098c\0\u057c\0\u057c\0\u09c0\0\u057c\0\u057c\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u057c\0\u0af8\0\u0b2c\0\u057c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u057c\0\u0c30\0\u0c64\0\u057c\0\u057c"+
    "\0\u057c\0\u0c98\0\u057c\0\u0ccc\0\u0d00\0\u057c\0\u057c\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u057c\0\u057c\0\u057c\0\u057c\0\u057c\0\u0dd0"+
    "\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70"+
    "\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u057c"+
    "\0\u1450\0\u1484\0\u14b8\0\u057c\0\u14ec\0\u1520\0\u0a5c\0\u0a28"+
    "\0\u1554\0\u1588\0\u15bc\0\u0b2c\0\u15f0\0\u1624\0\u1658\0\u168c"+
    "\0\u16c0\0\u16f4\0\u1728\0\u0a5c\0\u175c\0\u1790\0\u17c4\0\u17f8"+
    "\0\u182c\0\u057c\0\u057c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u057c\0\u1ca4\0\u1cd8\0\u1d0c\0\u057c\0\u1d40\0\u1d74\0\u1da8"+
    "\0\u1ddc\0\u057c\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14"+
    "\0\u1f48\0\u1f7c\0\u1fb0\0\u057c\0\u1fe4\0\u2018\0\u204c\0\u2080"+
    "\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220"+
    "\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0"+
    "\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u057c\0\u24f8\0\u252c"+
    "\0\u2560\0\u057c\0\u2594\0\u057c\0\u057c\0\u25c8\0\u25fc\0\u2630"+
    "\0\u057c\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c"+
    "\0\u27d0\0\u057c\0\u2804\0\u2838\0\u0a5c\0\u286c\0\u28a0\0\u28d4"+
    "\0\u2908\0\u293c\0\u2970\0\u29a4\0\u0a5c\0\u29d8\0\u057c\0\u2a0c"+
    "\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac"+
    "\0\u2be0\0\u2c14\0\u2c48\0\u057c\0\u057c\0\u057c\0\u2c7c\0\u2cb0"+
    "\0\u2ce4\0\u2d18\0\u2d4c\0\u057c\0\u057c\0\u2d80\0\u2db4\0\u2de8"+
    "\0\u2e1c\0\u2e50\0\u2e84\0\u057c\0\u2eb8\0\u2eec\0\u2f20\0\u2f54"+
    "\0\u057c\0\u2f88\0\u057c\0\u2fbc\0\u2ff0\0\u057c\0\u0a5c\0\u3024"+
    "\0\u3058\0\u0a5c\0\u308c\0\u0a5c\0\u30c0\0\u057c\0\u30f4\0\u3128"+
    "\0\u315c\0\u057c\0\u3190\0\u31c4\0\u057c\0\u31f8\0\u057c\0\u057c"+
    "\0\u322c\0\u3260\0\u3294\0\u32c8\0\u32fc\0\u3330\0\u3364\0\u057c"+
    "\0\u3398\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c\0\u34d0\0\u3504"+
    "\0\u3538\0\u356c\0\u35a0\0\u35d4\0\u3608\0\u363c\0\u3670\0\u36a4"+
    "\0\u057c\0\u057c\0\u057c\0\u36d8\0\u370c\0\u3740\0\u3774\0\u37a8"+
    "\0\u37dc\0\u3810\0\u3844\0\u3878\0\u38ac\0\u38e0\0\u3914\0\u3948"+
    "\0\u057c\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\u3a80\0\u3ab4"+
    "\0\u3ae8\0\u3b1c\0\u3b50\0\u3b84\0\u3bb8\0\u3bec\0\u3c20\0\u3c54"+
    "\0\u3c88\0\u3cbc\0\u3cf0\0\u3d24\0\u3d58\0\u3d8c\0\u057c\0\u3dc0"+
    "\0\u057c\0\u3df4\0\u3e28\0\u3e5c\0\u3e90\0\u3ec4\0\u057c\0\u057c"+
    "\0\u3ef8\0\u0a5c\0\u3f2c\0\u3f60\0\u3f94\0\u3fc8\0\u3ffc\0\u4030"+
    "\0\u4064\0\u057c\0\u057c\0\u057c\0\u057c\0\u4098\0\u40cc\0\u4100"+
    "\0\u057c\0\u4134\0\u057c\0\u057c\0\u4168\0\u057c\0\u057c\0\u057c"+
    "\0\u057c\0\u419c\0\u057c\0\u41d0\0\u057c\0\u057c\0\u4204\0\u4238"+
    "\0\u426c\0\u057c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\34\2\35\1\36\20\34\2\37\3\34\1\40\3\34"+
    "\1\41\2\34\1\42\1\34\1\43\1\44\2\34\1\45"+
    "\1\46\1\47\11\34\2\0\1\50\2\51\1\36\11\50"+
    "\1\34\1\52\4\50\1\34\40\50\1\34\2\51\1\36"+
    "\37\34\1\53\16\34\2\0\1\34\2\54\1\36\4\34"+
    "\1\55\21\34\1\56\2\34\1\57\2\34\1\60\1\34"+
    "\1\61\1\62\2\34\1\63\4\34\1\64\1\65\5\34"+
    "\2\0\1\34\2\51\1\36\4\34\1\66\32\34\1\67"+
    "\2\34\1\70\4\34\1\64\1\65\5\34\2\0\1\34"+
    "\2\51\1\36\37\34\1\71\16\34\2\0\1\34\2\72"+
    "\1\36\20\73\1\34\30\73\1\34\2\73\1\34\2\73"+
    "\1\0\1\34\2\51\1\36\36\34\1\74\17\34\2\0"+
    "\1\34\2\51\1\36\4\34\1\75\13\34\2\76\6\34"+
    "\1\77\6\34\1\100\6\34\1\101\1\102\1\103\5\34"+
    "\2\0\1\34\2\51\1\36\4\34\1\75\13\34\2\104"+
    "\6\34\1\77\6\34\1\105\6\34\1\101\1\102\1\103"+
    "\5\34\2\0\1\34\2\72\1\36\20\106\1\34\30\106"+
    "\1\34\2\106\1\34\2\106\1\0\1\34\2\51\1\36"+
    "\4\34\1\107\1\110\5\34\1\111\5\34\5\111\1\112"+
    "\2\111\1\113\4\111\1\34\1\114\7\111\1\102\1\103"+
    "\1\34\2\111\1\34\1\111\2\0\1\34\2\51\1\36"+
    "\5\34\1\115\5\34\1\116\5\34\15\116\1\117\1\34"+
    "\2\116\1\120\4\116\3\34\2\116\1\34\1\116\2\0"+
    "\1\34\2\51\1\36\4\34\1\121\1\110\5\34\1\111"+
    "\4\34\1\76\1\122\4\111\1\112\1\111\1\123\1\113"+
    "\4\111\1\34\1\124\6\111\1\125\1\102\1\103\1\34"+
    "\2\111\1\34\1\111\2\0\1\34\2\51\1\36\4\34"+
    "\1\121\13\34\2\76\4\34\1\126\1\34\1\77\6\34"+
    "\1\127\6\34\1\101\1\102\1\103\5\34\2\0\1\34"+
    "\2\51\1\36\4\34\1\75\13\34\2\76\6\34\1\77"+
    "\6\34\1\130\6\34\1\101\1\102\1\103\5\34\2\0"+
    "\1\34\2\51\1\36\36\34\1\131\3\34\1\132\13\34"+
    "\2\0\1\34\2\51\1\36\4\34\1\75\13\34\2\76"+
    "\6\34\1\77\6\34\1\133\6\34\1\101\1\102\1\103"+
    "\5\34\2\0\1\34\2\51\1\36\31\34\1\134\4\34"+
    "\1\131\1\44\2\34\1\135\13\34\2\0\1\34\2\51"+
    "\1\36\4\34\1\75\13\34\2\76\6\34\1\77\6\34"+
    "\1\136\6\34\1\101\1\102\1\103\5\34\2\0\1\34"+
    "\2\72\1\36\20\137\1\34\30\137\1\34\2\137\1\34"+
    "\2\137\1\0\2\34\1\0\1\36\20\34\2\140\20\34"+
    "\1\141\1\142\12\34\2\0\1\34\2\51\1\36\4\34"+
    "\1\121\1\110\5\34\1\111\4\34\1\76\1\122\4\111"+
    "\1\112\1\111\1\123\1\113\4\111\1\34\1\143\6\111"+
    "\1\125\1\102\1\103\1\34\2\111\1\34\1\111\2\0"+
    "\1\34\2\72\1\36\20\144\1\34\30\144\1\34\2\144"+
    "\1\34\2\144\1\0\1\34\2\51\1\36\4\34\1\107"+
    "\1\110\5\34\1\111\5\34\5\111\1\112\2\111\1\113"+
    "\4\111\1\34\1\145\7\111\1\102\1\103\1\34\2\111"+
    "\1\34\1\111\2\0\1\34\2\51\1\36\5\34\1\115"+
    "\5\34\1\116\5\34\15\116\1\146\1\147\2\116\1\150"+
    "\4\116\3\34\2\116\1\34\1\116\2\0\1\34\2\51"+
    "\1\36\36\34\1\146\1\136\2\34\1\151\13\34\132\0"+
    "\1\152\56\0\1\153\54\0\1\154\5\0\1\155\56\0"+
    "\1\156\2\0\1\157\52\0\1\160\64\0\2\161\77\0"+
    "\1\162\56\0\1\163\52\0\1\164\51\0\1\165\5\0"+
    "\1\166\5\0\15\166\2\0\7\166\3\0\2\166\1\0"+
    "\1\166\32\0\1\167\70\0\1\170\21\0\1\171\30\0"+
    "\2\172\62\0\2\173\42\0\1\174\4\0\1\175\5\0"+
    "\1\176\2\0\1\177\2\0\15\176\2\0\7\176\3\0"+
    "\2\176\1\0\1\176\43\0\1\200\26\0\1\201\4\0"+
    "\1\202\5\0\1\203\4\0\1\204\1\205\5\203\1\206"+
    "\1\203\1\207\4\203\2\0\7\203\3\0\2\203\1\0"+
    "\1\203\35\0\1\210\67\0\1\211\5\0\1\212\50\0"+
    "\1\213\64\0\1\214\41\0\1\215\5\0\1\216\5\0"+
    "\15\216\2\0\7\216\3\0\2\216\1\0\1\216\14\0"+
    "\1\217\55\0\1\217\4\0\1\220\1\0\1\221\2\0"+
    "\2\217\1\0\1\217\3\0\15\217\2\0\7\217\3\0"+
    "\2\217\1\0\1\217\6\0\1\217\4\0\1\220\1\0"+
    "\1\221\2\0\2\217\1\0\1\217\3\0\3\217\1\222"+
    "\11\217\2\0\7\217\3\0\2\217\1\0\1\217\6\0"+
    "\1\217\4\0\1\220\1\0\1\221\2\0\2\217\1\0"+
    "\1\217\3\0\15\217\2\0\1\217\1\223\5\217\3\0"+
    "\2\217\1\0\1\217\14\0\1\224\60\0\1\225\63\0"+
    "\1\225\14\0\2\226\42\0\1\201\4\0\1\227\5\0"+
    "\1\230\4\0\1\204\1\231\5\230\1\232\1\230\1\233"+
    "\4\230\2\0\7\230\3\0\2\230\1\0\1\230\6\0"+
    "\1\217\4\0\1\220\1\0\1\221\2\0\2\217\1\0"+
    "\1\217\3\0\6\217\1\234\6\217\2\0\7\217\3\0"+
    "\2\217\1\0\1\217\6\0\1\217\4\0\1\220\1\0"+
    "\1\221\2\0\2\217\1\0\1\217\3\0\12\217\1\235"+
    "\2\217\2\0\1\217\1\236\5\217\3\0\2\217\1\0"+
    "\1\217\6\0\1\217\4\0\1\220\1\0\1\221\2\0"+
    "\2\217\1\0\1\217\3\0\5\217\1\237\7\217\2\0"+
    "\7\217\3\0\2\217\1\0\1\217\32\0\1\240\57\0"+
    "\2\241\76\0\1\242\6\0\1\243\40\0\2\244\102\0"+
    "\1\245\43\0\2\246\77\0\1\247\31\0\1\225\14\0"+
    "\2\250\62\0\2\251\72\0\1\252\64\0\1\253\7\0"+
    "\1\254\47\0\1\255\72\0\1\256\74\0\1\257\61\0"+
    "\1\260\37\0\1\261\77\0\1\262\64\0\1\263\62\0"+
    "\1\264\47\0\1\265\52\0\1\166\60\0\1\266\114\0"+
    "\1\267\103\0\2\270\62\0\2\271\42\0\1\272\62\0"+
    "\1\273\30\0\1\174\1\274\2\0\1\275\65\0\1\176"+
    "\55\0\1\176\3\0\1\275\1\175\4\0\2\176\1\0"+
    "\1\176\3\0\15\176\2\0\7\176\3\0\2\176\1\0"+
    "\1\176\6\0\1\177\4\0\1\276\5\0\1\277\5\0"+
    "\15\277\2\0\7\277\3\0\2\277\1\0\1\277\41\0"+
    "\1\300\30\0\1\201\1\301\2\0\1\302\65\0\1\203"+
    "\55\0\1\203\3\0\1\302\1\202\4\0\2\203\1\0"+
    "\1\203\3\0\15\203\2\0\7\203\3\0\2\203\1\0"+
    "\1\203\30\0\1\303\41\0\1\203\3\0\1\302\1\202"+
    "\4\0\2\203\1\0\1\203\3\0\1\203\1\304\13\203"+
    "\2\0\7\203\3\0\2\203\1\0\1\203\6\0\1\203"+
    "\3\0\1\302\1\202\4\0\2\203\1\0\1\203\3\0"+
    "\4\203\1\305\10\203\2\0\7\203\3\0\2\203\1\0"+
    "\1\203\6\0\1\203\3\0\1\302\1\202\4\0\2\203"+
    "\1\0\1\203\3\0\4\203\1\306\10\203\2\0\7\203"+
    "\3\0\2\203\1\0\1\203\37\0\1\307\52\0\2\310"+
    "\12\0\1\311\53\0\1\312\45\0\1\216\60\0\1\313"+
    "\70\0\1\314\53\0\1\217\4\0\1\220\1\0\1\221"+
    "\2\0\2\217\1\0\1\217\3\0\13\217\1\315\1\217"+
    "\2\0\7\217\3\0\2\217\1\0\1\217\6\0\1\217"+
    "\4\0\1\220\1\0\1\221\2\0\2\217\1\0\1\217"+
    "\2\0\1\316\1\317\14\217\2\0\7\217\3\0\2\217"+
    "\1\0\1\217\22\0\1\320\102\0\1\321\36\0\1\230"+
    "\55\0\1\203\2\0\1\313\1\302\1\202\4\0\2\203"+
    "\1\0\1\203\3\0\15\203\2\0\7\203\3\0\2\203"+
    "\1\0\1\203\6\0\1\203\2\0\1\313\1\302\1\202"+
    "\4\0\2\203\1\0\1\203\3\0\1\203\1\304\13\203"+
    "\2\0\7\203\3\0\2\203\1\0\1\203\6\0\1\203"+
    "\2\0\1\313\1\302\1\202\4\0\2\203\1\0\1\203"+
    "\3\0\4\203\1\305\10\203\2\0\7\203\3\0\2\203"+
    "\1\0\1\203\6\0\1\203\2\0\1\313\1\302\1\202"+
    "\4\0\2\203\1\0\1\203\3\0\4\203\1\306\10\203"+
    "\2\0\7\203\3\0\2\203\1\0\1\203\6\0\1\217"+
    "\4\0\1\220\1\0\1\221\2\0\2\217\1\0\1\217"+
    "\3\0\10\217\1\322\4\217\2\0\7\217\3\0\2\217"+
    "\1\0\1\217\6\0\1\217\4\0\1\220\1\0\1\221"+
    "\2\0\2\217\1\0\1\217\2\0\1\310\1\323\12\217"+
    "\1\324\1\217\2\0\7\217\3\0\2\217\1\0\1\217"+
    "\6\0\1\217\4\0\1\220\1\0\1\221\2\0\2\217"+
    "\1\0\1\217\3\0\3\217\1\325\11\217\2\0\7\217"+
    "\3\0\2\217\1\0\1\217\42\0\1\326\62\0\1\327"+
    "\5\0\1\330\55\0\1\331\60\0\1\332\66\0\1\333"+
    "\64\0\1\334\62\0\1\335\63\0\1\336\76\0\1\337"+
    "\45\0\1\340\63\0\1\341\61\0\1\342\75\0\1\343"+
    "\57\0\1\344\70\0\1\345\34\0\1\346\63\0\1\347"+
    "\106\0\1\350\53\0\1\351\75\0\1\352\40\0\1\353"+
    "\77\0\1\354\107\0\2\355\32\0\1\356\51\0\1\357"+
    "\51\0\1\360\71\0\1\277\55\0\1\277\3\0\1\361"+
    "\1\276\4\0\2\277\1\0\1\277\3\0\15\277\2\0"+
    "\7\277\3\0\2\277\1\0\1\277\35\0\1\362\34\0"+
    "\1\363\106\0\1\364\40\0\1\203\3\0\1\302\1\202"+
    "\4\0\2\203\1\0\1\203\3\0\2\203\1\365\12\203"+
    "\2\0\7\203\3\0\2\203\1\0\1\203\6\0\1\203"+
    "\3\0\1\302\1\202\4\0\2\203\1\0\1\203\3\0"+
    "\5\203\1\366\7\203\2\0\7\203\3\0\2\203\1\0"+
    "\1\203\6\0\1\203\3\0\1\302\1\202\4\0\2\203"+
    "\1\0\1\203\3\0\12\203\1\367\2\203\2\0\7\203"+
    "\3\0\2\203\1\0\1\203\40\0\1\370\64\0\1\371"+
    "\65\0\1\372\72\0\1\373\33\0\1\374\47\0\1\217"+
    "\4\0\1\220\1\0\1\221\2\0\2\217\1\0\1\217"+
    "\3\0\7\217\1\375\5\217\2\0\7\217\3\0\2\217"+
    "\1\0\1\217\37\0\1\376\32\0\1\217\4\0\1\220"+
    "\1\0\1\221\2\0\2\217\1\0\1\217\3\0\10\217"+
    "\1\377\4\217\2\0\7\217\3\0\2\217\1\0\1\217"+
    "\13\0\1\u0100\5\0\1\u0101\5\0\15\u0101\2\0\7\u0101"+
    "\3\0\2\u0101\1\0\1\u0101\20\0\1\u0102\51\0\1\217"+
    "\4\0\1\220\1\0\1\221\2\0\2\217\1\0\1\217"+
    "\3\0\11\217\1\u0103\3\217\2\0\7\217\3\0\2\217"+
    "\1\0\1\217\6\0\1\217\4\0\1\220\1\0\1\221"+
    "\2\0\2\217\1\0\1\217\3\0\12\217\1\u0104\2\217"+
    "\2\0\7\217\3\0\2\217\1\0\1\217\6\0\1\217"+
    "\4\0\1\220\1\0\1\221\2\0\2\217\1\0\1\217"+
    "\3\0\14\217\1\u0105\2\0\7\217\3\0\2\217\1\0"+
    "\1\217\6\0\1\217\4\0\1\220\1\0\1\221\2\0"+
    "\2\217\1\0\1\217\3\0\15\217\2\0\4\217\1\u0106"+
    "\2\217\3\0\2\217\1\0\1\217\36\0\1\u0107\45\0"+
    "\1\u0108\66\0\1\u0109\60\0\1\u010a\117\0\1\u010b\27\0"+
    "\1\u010c\106\0\1\u010d\40\0\1\u010e\63\0\1\u010f\76\0"+
    "\1\u0110\101\0\1\u0111\51\0\1\u0112\76\0\1\u0113\60\0"+
    "\1\u0114\57\0\1\u0115\56\0\1\u0116\60\0\1\u0117\3\0"+
    "\1\u0118\2\0\1\u0119\6\0\1\u011a\1\u011b\52\0\1\u011c"+
    "\71\0\1\u011d\27\0\1\u011e\5\0\1\u011f\5\0\15\u011f"+
    "\2\0\7\u011f\3\0\2\u011f\1\0\1\u011f\47\0\1\u0120"+
    "\47\0\1\u0121\3\0\1\u0122\2\0\1\u0123\27\0\1\360"+
    "\3\0\1\275\114\0\1\u0124\26\0\1\363\3\0\1\302"+
    "\103\0\1\u0125\37\0\1\203\3\0\1\302\1\202\4\0"+
    "\2\203\1\0\1\203\3\0\3\203\1\u0126\11\203\2\0"+
    "\7\203\3\0\2\203\1\0\1\203\6\0\1\203\3\0"+
    "\1\302\1\202\4\0\2\203\1\0\1\203\3\0\4\203"+
    "\1\u0127\10\203\2\0\7\203\3\0\2\203\1\0\1\203"+
    "\6\0\1\203\3\0\1\302\1\202\4\0\2\203\1\0"+
    "\1\203\3\0\13\203\1\u0128\1\203\2\0\7\203\3\0"+
    "\2\203\1\0\1\203\43\0\1\u0129\53\0\1\u012a\73\0"+
    "\1\u012b\33\0\1\u012c\5\0\1\u012d\5\0\15\u012d\2\0"+
    "\7\u012d\3\0\2\u012d\1\0\1\u012d\57\0\2\u012e\11\0"+
    "\1\217\4\0\1\220\1\0\1\221\2\0\2\217\1\0"+
    "\1\217\3\0\15\217\2\0\7\217\2\0\1\u012e\1\u012f"+
    "\1\217\1\0\1\217\14\0\1\u0101\55\0\1\u0101\1\u0130"+
    "\3\0\1\u0100\4\0\2\u0101\1\320\1\u0101\3\0\15\u0101"+
    "\2\0\7\u0101\3\0\2\u0101\1\0\1\u0101\26\0\2\u0131"+
    "\42\0\1\217\4\0\1\220\1\0\1\221\2\0\2\217"+
    "\1\0\1\217\3\0\14\217\1\u0132\2\0\7\217\3\0"+
    "\2\217\1\0\1\217\6\0\1\217\4\0\1\220\1\0"+
    "\1\221\2\0\2\217\1\0\1\217\3\0\4\217\1\u0133"+
    "\10\217\2\0\7\217\3\0\2\217\1\0\1\217\6\0"+
    "\1\217\4\0\1\220\1\0\1\221\2\0\2\217\1\0"+
    "\1\217\3\0\14\217\1\u0134\2\0\7\217\3\0\2\217"+
    "\1\0\1\217\42\0\1\u0135\63\0\1\u0136\71\0\1\u0137"+
    "\46\0\1\u0138\67\0\1\u0139\65\0\1\u013a\50\0\2\u013b"+
    "\105\0\1\u013c\53\0\1\u013d\55\0\1\u013e\63\0\1\u013f"+
    "\73\0\1\u0140\61\0\1\u0141\54\0\1\u0142\5\0\1\u0143"+
    "\56\0\1\u0144\73\0\1\u0145\56\0\1\u0146\41\0\1\u011f"+
    "\55\0\1\u011f\1\u0147\3\0\1\u011e\4\0\2\u011f\1\353"+
    "\1\u011f\3\0\15\u011f\2\0\7\u011f\3\0\2\u011f\1\0"+
    "\1\u011f\43\0\1\u0148\61\0\1\u0149\61\0\1\u014a\21\0"+
    "\1\u014b\30\0\2\u014c\62\0\2\u014d\42\0\1\203\3\0"+
    "\1\302\1\202\4\0\2\203\1\0\1\203\2\0\1\u014d"+
    "\1\u014e\14\203\2\0\7\203\3\0\2\203\1\0\1\203"+
    "\6\0\1\203\3\0\1\302\1\202\4\0\2\203\1\0"+
    "\1\203\3\0\10\203\1\u014f\4\203\2\0\7\203\3\0"+
    "\2\203\1\0\1\203\6\0\1\203\3\0\1\302\1\202"+
    "\4\0\2\203\1\0\1\203\3\0\5\203\1\u0150\7\203"+
    "\2\0\7\203\3\0\2\203\1\0\1\203\36\0\1\u0151"+
    "\41\0\1\u012d\55\0\1\u012d\1\u0152\3\0\1\u012c\4\0"+
    "\2\u012d\1\374\1\u012d\3\0\15\u012d\2\0\7\u012d\3\0"+
    "\2\u012d\1\0\1\u012d\13\0\1\u0153\5\0\1\u0154\5\0"+
    "\15\u0154\2\0\7\u0154\3\0\2\u0154\1\0\1\u0154\46\0"+
    "\1\u0155\23\0\1\217\4\0\1\220\1\0\1\221\2\0"+
    "\2\217\1\0\1\217\3\0\7\217\1\u0156\5\217\2\0"+
    "\7\217\3\0\2\217\1\0\1\217\36\0\1\u0157\53\0"+
    "\2\u0158\75\0\1\u0159\64\0\1\u015a\6\0\1\u015b\60\0"+
    "\1\u015c\60\0\1\u015d\50\0\1\u015e\102\0\1\u015f\47\0"+
    "\1\u0160\72\0\1\u0161\74\0\1\u0162\52\0\1\u0163\62\0"+
    "\1\u0164\35\0\1\u0165\5\0\1\u0166\5\0\15\u0166\2\0"+
    "\7\u0166\3\0\2\u0166\1\0\1\u0166\37\0\1\u0167\106\0"+
    "\2\u0168\62\0\2\u0169\42\0\1\u016a\54\0\1\u016b\36\0"+
    "\1\203\3\0\1\302\1\202\4\0\2\203\1\0\1\203"+
    "\3\0\4\203\1\u016c\10\203\2\0\7\203\3\0\2\203"+
    "\1\0\1\203\6\0\1\203\3\0\1\302\1\202\4\0"+
    "\2\203\1\0\1\203\3\0\11\203\1\u016d\3\203\2\0"+
    "\7\203\3\0\2\203\1\0\1\203\6\0\1\203\3\0"+
    "\1\302\1\202\4\0\2\203\1\0\1\203\3\0\7\203"+
    "\1\u016e\5\203\2\0\7\203\3\0\2\203\1\0\1\203"+
    "\35\0\1\u016f\41\0\1\u0170\5\0\1\u0171\5\0\15\u0171"+
    "\2\0\7\u0171\3\0\2\u0171\1\0\1\u0171\14\0\1\u0154"+
    "\55\0\1\u0154\4\0\1\u0153\4\0\2\u0154\1\0\1\u0154"+
    "\3\0\15\u0154\2\0\7\u0154\3\0\2\u0154\1\0\1\u0154"+
    "\36\0\1\u0172\33\0\1\217\4\0\1\220\1\0\1\221"+
    "\2\0\2\217\1\0\1\217\3\0\6\217\1\u0173\6\217"+
    "\2\0\7\217\3\0\2\217\1\0\1\217\51\0\1\u0174"+
    "\61\0\1\u0175\52\0\1\u0176\67\0\1\u0177\57\0\1\u0178"+
    "\63\0\1\u0179\61\0\1\u017a\75\0\1\u017b\57\0\1\u017c"+
    "\64\0\1\u017d\53\0\1\u017e\44\0\1\u0166\55\0\1\u0166"+
    "\3\0\1\u017f\1\u0165\4\0\2\u0166\1\0\1\u0166\3\0"+
    "\15\u0166\2\0\7\u0166\3\0\2\u0166\1\0\1\u0166\36\0"+
    "\1\u0180\107\0\2\u0181\32\0\1\u0182\65\0\1\u0183\35\0"+
    "\1\203\3\0\1\302\1\202\4\0\2\203\1\0\1\203"+
    "\3\0\5\203\1\u0184\7\203\2\0\7\203\3\0\2\203"+
    "\1\0\1\203\6\0\1\203\3\0\1\302\1\202\4\0"+
    "\2\203\1\0\1\203\3\0\7\203\1\u0185\5\203\2\0"+
    "\7\203\3\0\2\203\1\0\1\203\6\0\1\203\3\0"+
    "\1\302\1\202\4\0\2\203\1\0\1\203\3\0\6\203"+
    "\1\u0186\6\203\2\0\7\203\3\0\2\203\1\0\1\203"+
    "\43\0\1\u0187\34\0\1\u0171\55\0\1\u0171\3\0\1\u0188"+
    "\1\u0170\4\0\2\u0171\1\0\1\u0171\3\0\15\u0171\2\0"+
    "\7\u0171\3\0\2\u0171\1\0\1\u0171\54\0\1\u0189\15\0"+
    "\1\217\4\0\1\220\1\0\1\221\2\0\2\217\1\0"+
    "\1\217\3\0\14\217\1\u018a\2\0\7\217\3\0\2\217"+
    "\1\0\1\217\47\0\1\u018b\37\0\1\u018c\114\0\1\u018d"+
    "\52\0\1\u018e\55\0\1\u018f\65\0\1\u0190\76\0\1\u0191"+
    "\60\0\1\u0192\57\0\1\u0193\61\0\1\u0194\71\0\1\u0195"+
    "\65\0\1\u0196\61\0\1\u0197\51\0\1\u0198\34\0\1\203"+
    "\3\0\1\302\1\202\4\0\2\203\1\0\1\203\3\0"+
    "\6\203\1\u016d\6\203\2\0\7\203\3\0\2\203\1\0"+
    "\1\203\6\0\1\203\3\0\1\u0199\1\202\4\0\2\203"+
    "\1\0\1\203\3\0\15\203\2\0\7\203\3\0\2\203"+
    "\1\0\1\203\6\0\1\203\3\0\1\302\1\202\4\0"+
    "\2\203\1\0\1\203\3\0\14\203\1\u0185\2\0\7\203"+
    "\3\0\2\203\1\0\1\203\33\0\1\u019a\66\0\1\u019b"+
    "\67\0\1\u019c\54\0\1\u019d\71\0\1\u019e\65\0\1\u019f"+
    "\53\0\1\u01a0\73\0\1\u01a1\53\0\1\u01a2\73\0\1\u01a3"+
    "\56\0\1\u01a4\66\0\1\u01a5\63\0\1\u01a6\52\0\1\u01a7"+
    "\45\0\1\u0199\107\0\1\u01a8\62\0\1\u01a9\71\0\1\u01aa"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17056];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\33\0\3\11\5\1\1\11\3\1\2\11\1\1\2\11"+
    "\4\1\2\11\1\1\2\11\1\1\1\11\1\1\4\11"+
    "\3\1\1\11\1\1\2\11\1\1\2\11\5\1\1\11"+
    "\2\1\1\11\4\1\1\11\2\1\3\11\1\1\1\11"+
    "\2\1\2\11\3\1\5\11\2\1\36\0\1\11\3\0"+
    "\1\11\17\0\1\1\5\0\2\11\25\0\1\11\3\0"+
    "\1\11\4\0\1\11\11\0\1\11\31\0\1\11\3\0"+
    "\1\11\1\0\2\11\3\0\1\11\10\0\1\11\2\0"+
    "\1\1\7\0\1\1\1\0\1\11\14\0\3\11\5\0"+
    "\2\11\6\0\1\11\4\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\1\2\0\1\1\1\0\1\1\1\0\1\11"+
    "\3\0\1\11\2\0\1\11\1\0\2\11\7\0\1\11"+
    "\13\0\1\1\4\0\3\11\15\0\1\11\25\0\1\11"+
    "\1\0\1\11\5\0\2\11\1\0\1\1\7\0\4\11"+
    "\3\0\1\11\1\0\2\11\1\0\4\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public static String urlAuxliar="";
	public static Boolean fin=false;
	public static String txt_temporal="";
	public static int linea=0;
	public static int columna=0;



    public static int flagInicio = 0;
    public String cadena = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(simbolos.EOF,new String("Fin del archivo"));
    /*({letra}":"("\\"({linea})+)+)*/
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
			Errores errorLexico=new Errores();
			errorLexico.setTipo("Lexico");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion("Caracter Ilegal: "+yytext());
			Interfaz.erroresLexicos.add(errorLexico);
			//Proyecto1_Compiladores.listaLexico.add(errorLexico);
			//Menu.listaLexico=Proyecto1_Compiladores.listaLexico;
            }
          case 91: break;
          case 2: 
            { System.out.println("Salto de linea");
            }
          case 92: break;
          case 3: 
            { yychar=0;
            }
          case 93: break;
          case 4: 
            { cadena = "";
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : Menor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        System.out.println("*****************************************************************");
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 94: break;
          case 5: 
            { cadena = "";
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 95: break;
          case 6: 
            { System.out.print(yytext());
            }
          case 96: break;
          case 7: 
            { 
            }
          case 97: break;
          case 8: 
            { yybegin(ENCABEZADO2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 98: break;
          case 9: 
            { cadena = "";
            }
          case 99: break;
          case 10: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : Menor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
       
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 100: break;
          case 11: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);


        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 101: break;
          case 12: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("asignacion");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("= : Asignacion");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                
        Interfaz.tablaSimbolos_.add(simbolo);
             
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.asignacion, yychar, yyline, yytext());
            }
          case 102: break;
          case 13: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("puntoComa");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("; : Punto coma");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
            
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.puntoComa, yychar, yyline, yytext());
            }
          case 103: break;
          case 14: 
            { yybegin(YYINITIAL);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 104: break;
          case 15: 
            { yybegin(TITULO2);                           
        System.out.println("Saltar a estado TITULO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 105: break;
          case 16: 
            { cadena  = cadena + yytext();
            }
          case 106: break;
          case 17: 
            { if(!yytext().equals("<"))
        {
            cadena  = cadena + yytext();
            //System.out.println(cadena);
        }
        else 
        {

            //cadena = cadena + yytext();
            
            yybegin(ENCABEZADO2);
            Interfaz.auxContador++;                                
            //Generamos la entrada en la tabla de simbolos.
            tablaSimbolos simbolo=new tablaSimbolos();
            simbolo.setTipo("cadena");
            simbolo.setLinea(yyline);
            simbolo.setColumna(yychar);
            simbolo.setDescripcion("Cadena : cadena de texto");
            simbolo.setIndex(Interfaz.auxContador);
            simbolo.setValor(cadena);                 
            Interfaz.tablaSimbolos_.add(simbolo);
            yypushback(1);	                
            return new Symbol(simbolos.cadena, yychar, yyline, cadena); 

        }
            }
          case 107: break;
          case 18: 
            { yybegin(ENCABEZADO2);  
        System.out.println("----------------------------------------------Saliendo de titulo3");                         
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : Menor que titulo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 108: break;
          case 19: 
            { yybegin(YYINITIAL);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 109: break;
          case 20: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("asignacion");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("= : Asignacion");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                
        Interfaz.tablaSimbolos_.add(simbolo);
                             
        return new Symbol(simbolos.asignacion, yychar, yyline, yytext());
            }
          case 110: break;
          case 21: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("puntoComa");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("; : Punto coma");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                    
        return new Symbol(simbolos.puntoComa, yychar, yyline, yytext());
            }
          case 111: break;
          case 22: 
            { yybegin(TEXTO2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 112: break;
          case 23: 
            { if(!yytext().equals("<"))
        {
            cadena  = cadena + yytext();
            //System.out.println(cadena);
        }
        else 
        {

            //cadena = cadena + yytext();
            
            yybegin(YYINITIAL);
            Interfaz.auxContador++;                                
            //Generamos la entrada en la tabla de simbolos.
            tablaSimbolos simbolo=new tablaSimbolos();
            simbolo.setTipo("cadena");
            simbolo.setLinea(yyline);
            simbolo.setColumna(yychar);
            simbolo.setDescripcion("Cadena : cadena de texto");
            simbolo.setIndex(Interfaz.auxContador);
            simbolo.setValor(cadena);                 
            Interfaz.tablaSimbolos_.add(simbolo);
            yypushback(1);	                
            return new Symbol(simbolos.cadena, yychar, yyline, cadena); 

        }
            }
          case 113: break;
          case 24: 
            { yybegin(IMAGEN2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 114: break;
          case 25: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : MenorQue fin Imagen");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 115: break;
          case 26: 
            { yybegin(BOTON2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 116: break;
          case 27: 
            { yybegin(ENLACE2);                           
        System.out.println("Saltar a estado ENLACE2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 117: break;
          case 28: 
            { yybegin(T2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 118: break;
          case 29: 
            { yybegin(T4);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 119: break;
          case 30: 
            { yybegin(T6);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 120: break;
          case 31: 
            { if(!yytext().equals("<"))
        {
            cadena  = cadena + yytext();
            //System.out.println(cadena);
        }
        else 
        {

            //cadena = cadena + yytext();
            
            yybegin(T7);
            Interfaz.auxContador++;                                
            //Generamos la entrada en la tabla de simbolos.
            tablaSimbolos simbolo=new tablaSimbolos();
            simbolo.setTipo("cadena");
            simbolo.setLinea(yyline);
            simbolo.setColumna(yychar);
            simbolo.setDescripcion("Cadena : cadena de texto");
            simbolo.setIndex(Interfaz.auxContador);
            simbolo.setValor(cadena);                 
            Interfaz.tablaSimbolos_.add(simbolo);
            yypushback(1);	                
            return new Symbol(simbolos.cadena, yychar, yyline, cadena); 

        }
            }
          case 121: break;
          case 32: 
            { yybegin(TB2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 122: break;
          case 33: 
            { if(!yytext().equals("<"))
        {
            cadena  = cadena + yytext();
            //System.out.println(cadena);
        }
        else 
        {

            //cadena = cadena + yytext();
            
            yybegin(TB3);
            Interfaz.auxContador++;                                
            //Generamos la entrada en la tabla de simbolos.
            tablaSimbolos simbolo=new tablaSimbolos();
            simbolo.setTipo("cadena");
            simbolo.setLinea(yyline);
            simbolo.setColumna(yychar);
            simbolo.setDescripcion("Cadena : cadena de texto");
            simbolo.setIndex(Interfaz.auxContador);
            simbolo.setValor(cadena);                 
            Interfaz.tablaSimbolos_.add(simbolo);
            yypushback(1);	                
            return new Symbol(simbolos.cadena, yychar, yyline, cadena); 

        }
            }
          case 123: break;
          case 34: 
            { yybegin(TI2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 124: break;
          case 35: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : MenorQue inicio Imagen");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 125: break;
          case 36: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : mayorQue fin Imagen");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        yybegin(T6);                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 126: break;
          case 37: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id Ccss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id : Identificador grupo ccss");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.idCcss, yychar, yyline, yytext());
            }
          case 127: break;
          case 38: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id Ccss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id : Identificador grupo ccss");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                            
        return new Symbol(simbolos.idCcss, yychar, yyline, yytext());
            }
          case 128: break;
          case 39: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ct");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ct: Inicio Celda");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(T5);                                    
        return new Symbol(simbolos.inicioCelda, yychar, yyline, yytext());
            }
          case 129: break;
          case 40: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("cb");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("cb: Inicio Celda cabecera");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(T5);                                    
        return new Symbol(simbolos.inicioCeldaCabecera, yychar, yyline, yytext());
            }
          case 130: break;
          case 41: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("inicioCjs");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("CJS : Inicio etiqueta CJS");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
              
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.inicioCjs, yychar, yyline, yytext());
            }
          case 131: break;
          case 42: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id: Posible nombre de color.");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.id, yychar, yyline, yytext());
            }
          case 132: break;
          case 43: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id: Posible nombre de color.");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);

        return new Symbol(simbolos.id, yychar, yyline, yytext());
            }
          case 133: break;
          case 44: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("metodo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("metodo : Llamada a metodo");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.metodo, yychar, yyline, yytext());
            }
          case 134: break;
          case 45: 
            { yybegin(COMENTARIO);
            }
          case 135: break;
          case 46: 
            { yybegin(YYINITIAL);
            }
          case 136: break;
          case 47: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ruta");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ruta : Declaración ruta archivo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.ruta, yychar, yyline, yytext());
            }
          case 137: break;
          case 48: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("inicioCcss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("CCSS : Inicio etiqueta CCSS");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
              
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.inicioCcss, yychar, yyline, yytext());
            }
          case 138: break;
          case 49: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("rgb");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("rgb: Posible nombre de color.");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.rgb, yychar, yyline, yytext());
            }
          case 139: break;
          case 50: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("alto");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("alto : Altura objeto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.alto, yychar, yyline, yytext());
            }
          case 140: break;
          case 51: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ruta");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ruta : Declaración ruta archivo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        return new Symbol(simbolos.ruta, yychar, yyline, yytext());
            }
          case 141: break;
          case 52: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("inicioChtml");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("CHTML : Inicio Documento");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        return new Symbol(simbolos.inicioChtml, yychar, yyline, yytext());
            }
          case 142: break;
          case 53: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("texto");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("texto: Inicio texto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(TEXTO1);                            
        return new Symbol(simbolos.inicioTexto, yychar, yyline, yytext());
            }
          case 143: break;
          case 54: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("enlace");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("enlace: Inicio enlace");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(T1);                                    
        return new Symbol(simbolos.inicioEnlace, yychar, yyline, yytext());
            }
          case 144: break;
          case 55: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("boton");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("boton: Inicio boton");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(BOTON1);                                    
        return new Symbol(simbolos.inicioBoton, yychar, yyline, yytext());
            }
          case 145: break;
          case 56: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("inicioPanel");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("panel: Declaracion panel");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        yybegin(ELEMENTOS);        
        return new Symbol(simbolos.inicioPanel, yychar, yyline, yytext());
            }
          case 146: break;
          case 57: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fondo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fondo : declaracion fondo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
       
        return new Symbol(simbolos.fondo, yychar, yyline, yytext());
            }
          case 147: break;
          case 58: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ancho");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ancho : Anchura objeto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.ancho, yychar, yyline, yytext());
            }
          case 148: break;
          case 59: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("grupo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("grupo : grupo ccss");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.grupo, yychar, yyline, yytext());
            }
          case 149: break;
          case 60: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("click");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("click : Evento Click");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                            
        return new Symbol(simbolos.click, yychar, yyline, yytext());
            }
          case 150: break;
          case 61: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fil_t");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fil_t: Inicio fila");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo); 
        yybegin(T3);                                
        return new Symbol(simbolos.inicioFila, yychar, yyline, yytext());
            }
          case 151: break;
          case 62: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("boton");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("boton : Inicio boton");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);    
        yybegin(TB);                        
        return new Symbol(simbolos.inicioBoton, yychar, yyline, yytext());
            }
          case 152: break;
          case 63: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("imagen");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("imagen: Inicio imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(IMAGEN1);                                    
        return new Symbol(simbolos.inicioImagen, yychar, yyline, yytext());
            }
          case 153: break;
          case 64: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("enlace");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("enlace: Inicio enlace");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(ENLACE1);                                    
        return new Symbol(simbolos.inicioEnlace, yychar, yyline, yytext());
            }
          case 154: break;
          case 65: 
            { yybegin(CUERPO);
        System.out.println("Saltar a estado CUERPO");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("cuerpo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("cuerpo : Inicio cuerpo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.inicioCuerpo, yychar, yyline, yytext());
            }
          case 155: break;
          case 66: 
            { yybegin(TITULO1);
        System.out.println("Saltar a estado CUERPO");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("titulo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("titulo : Inicio titulo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.inicioTitulo, yychar, yyline, yytext());
            }
          case 156: break;
          case 67: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("path");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("path : Direccion a imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                          
        return new Symbol(simbolos.path, yychar, yyline, yytext());
            }
          case 157: break;
          case 68: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("imagen");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("imagen : Inicio imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);    
        yybegin(TI);                        
        return new Symbol(simbolos.inicioImagen, yychar, yyline, yytext());
            }
          case 158: break;
          case 69: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCeldaCabecera");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("finCeldaCabecera : Fin cabecera");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);    
        yybegin(T4);                        
        return new Symbol(simbolos.finCeldaCabecera, yychar, yyline, yytext());
            }
          case 159: break;
          case 70: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCelda");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("finCelda : Fin Celda");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);    
        yybegin(T4);                        
        return new Symbol(simbolos.finCelda, yychar, yyline, yytext());
            }
          case 160: break;
          case 71: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCjs");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-cjs : finCJs");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
             
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.finCjs, yychar, yyline, yytext());
            }
          case 161: break;
          case 72: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("pathComillas");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("Path: Ruta a archivo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.pathComillas, yychar, yyline, yytext());
            }
          case 162: break;
          case 73: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCcss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-CCSS : fin etiqueta CCSS");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
             
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.finCcss, yychar, yyline, yytext());
            }
          case 163: break;
          case 74: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("alineado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("alineado : Alineación objeto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.alineado, yychar, yyline, yytext());
            }
          case 164: break;
          case 75: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("path");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("path : Direccion a imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.pathComillas, yychar, yyline, yytext());
            }
          case 165: break;
          case 76: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("finChtml");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("FIN-CHTML : Fin Documento");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        return new Symbol(simbolos.finChtml, yychar, yyline, yytext());
            }
          case 166: break;
          case 77: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-texto");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-texto: Fin texto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                    
        return new Symbol(simbolos.finTexto, yychar, yyline, yytext());
            }
          case 167: break;
          case 78: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-boton");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-boton: Fin boton");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                 
        return new Symbol(simbolos.finBoton, yychar, yyline, yytext());
            }
          case 168: break;
          case 79: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finPanel");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-panel: Cierre panel");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                          
        return new Symbol(simbolos.finPanel, yychar, yyline, yytext());
            }
          case 169: break;
          case 80: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("valorAlineado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("valorAlineado : Alineación");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.valorAlineado, yychar, yyline, yytext());
            }
          case 170: break;
          case 81: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-tabla");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-tabla: Fin tabla");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                 
        return new Symbol(simbolos.finTabla, yychar, yyline, yytext());
            }
          case 171: break;
          case 82: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fin-fil_t");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-fil_t : Fin Fila");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);   
        yybegin(T2);     	        
        return new Symbol(simbolos.finFila, yychar, yyline, yytext());
            }
          case 172: break;
          case 83: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-boton");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-boton: Fin boton");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);            
        return new Symbol(simbolos.finBoton, yychar, yyline, yytext());
            }
          case 173: break;
          case 84: 
            { yybegin(ENCABEZADO1);
        System.out.println("Saltar a estado ENCABEZADO1");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("inicioEncabezado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("encabezado : Inicio encabezado");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.inicioEncabezado, yychar, yyline, yytext());
            }
          case 174: break;
          case 85: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-enlace");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-enlace: Fin enlace");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                 
        return new Symbol(simbolos.finEnlace, yychar, yyline, yytext());
            }
          case 175: break;
          case 86: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fin-cuerpo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-cuerpo : Fin cuerpo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.finCuerpo, yychar, yyline, yytext());
            }
          case 176: break;
          case 87: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fin-titulo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-titulo : Fin titulo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.finTitulo, yychar, yyline, yytext());
            }
          case 177: break;
          case 88: 
            { yybegin(YYINITIAL); 
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-imagen");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-imagen: Fin imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                    
        return new Symbol(simbolos.finImagen, yychar, yyline, yytext());
            }
          case 178: break;
          case 89: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-imagen");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-imagen: Fin imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                    
        return new Symbol(simbolos.finImagen, yychar, yyline, yytext());
            }
          case 179: break;
          case 90: 
            { yybegin(YYINITIAL);
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("finEncabezado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("FIN-ENCABEZADO : Fin Encabezado");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        return new Symbol(simbolos.finEncabezado, yychar, yyline, yytext());
            }
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
