/* The following code was generated by JFlex 1.6.1 */

package Source.CHTML;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Principal.Errores;
import Principal.Interfaz;
import Principal.tablaSimbolos;
/*
Directivas:
public: clase publica
cup: compatibilidad con cup
full: extender el alfabeto con todos los valores de 8 bits
line: agrega la variable int yyline, para indicar la fila del lexema
char: agrega la variable int yychar, indica el indice del primer caracter del lexema
ignorecase: validar, indistitntamente si la letra es mayuscula o minuscula
eofval: especifica un valor de retorno al final del archivo
*/





/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>chtml.l</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int ENCABEZADO1 = 4;
  public static final int ENCABEZADO2 = 6;
  public static final int CUERPO = 8;
  public static final int TITULO1 = 10;
  public static final int TITULO2 = 12;
  public static final int TITULO3 = 14;
  public static final int ELEMENTOS = 16;
  public static final int TEXTO1 = 18;
  public static final int TEXTO2 = 20;
  public static final int IMAGEN1 = 22;
  public static final int IMAGEN2 = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     5,  5,  5,  5,  5,  5,  5,  5,  5,  1,  2, 49,  1,  1,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     1,  5,  7, 17,  5,  5,  5,  5, 10, 11, 12,  5,  5, 13,  4, 18, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  6, 45, 33, 44, 34,  5, 
     5, 27, 38, 28, 26, 24, 37, 41, 29, 20, 46, 43, 36, 35, 30, 32, 
    39, 22, 25, 48, 31, 23, 14, 14, 40, 14, 21,  5, 15,  5,  5, 16, 
     5, 27, 38, 28, 26, 24, 37, 41, 29, 20, 46, 43, 36, 35, 30, 32, 
    39, 22, 25, 48, 31, 23, 14, 14, 40, 14, 21,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5, 49,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  9,  5,  5,  5,  5,  5,  5,  5,  9,  5,  5,  5,  9,  5,  5, 
     5,  9,  5,  9,  5,  5,  5,  5,  5,  5,  9,  5,  5,  5,  5,  5, 
     5,  5,  5,  8,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  8,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\4\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\6\1\10\1\11\4\1\1\12\1\13"+
    "\1\1\1\14\1\15\1\1\1\16\1\1\1\17\1\20"+
    "\1\21\1\22\3\1\1\23\1\1\1\24\1\25\1\1"+
    "\1\26\1\27\5\1\1\30\2\1\1\31\1\1\34\0"+
    "\1\32\3\0\1\33\26\0\1\34\3\0\1\35\4\0"+
    "\1\36\11\0\1\37\12\0\1\40\2\0\1\41\1\0"+
    "\1\42\1\43\3\0\1\44\10\0\1\45\2\0\1\46"+
    "\10\0\1\47\1\50\3\0\1\51\6\0\1\52\4\0"+
    "\1\53\1\0\1\54\2\0\2\55\2\0\1\56\1\0"+
    "\1\57\5\0\1\60\13\0\1\61\12\0\1\62\16\0"+
    "\1\63\1\0\1\64\5\0\1\65\1\66\3\0\1\67"+
    "\1\70\1\71\3\0\1\72\1\0\1\73\1\74\1\0"+
    "\1\75\1\0\1\76\3\0\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u0297\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u0297\0\u03c9\0\u03fc"+
    "\0\u0297\0\u0297\0\u042f\0\u0297\0\u0297\0\u0462\0\u0495\0\u04c8"+
    "\0\u04fb\0\u0297\0\u0297\0\u052e\0\u0297\0\u0297\0\u0561\0\u0297"+
    "\0\u0594\0\u0297\0\u0297\0\u0297\0\u0297\0\u05c7\0\u05fa\0\u062d"+
    "\0\u0297\0\u0660\0\u0297\0\u0297\0\u0693\0\u0297\0\u0297\0\u06c6"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u0297\0\u07c5\0\u07f8\0\u0297"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0297\0\u0df2\0\u0e25"+
    "\0\u0e58\0\u0297\0\u0e8b\0\u0ebe\0\u072c\0\u06f9\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u07f8\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089"+
    "\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\u0297\0\u1254\0\u1287\0\u12ba\0\u0297\0\u12ed\0\u1320\0\u1353"+
    "\0\u1386\0\u0297\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8"+
    "\0\u14eb\0\u151e\0\u1551\0\u0297\0\u1584\0\u15b7\0\u15ea\0\u161d"+
    "\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u0297\0\u1782"+
    "\0\u17b5\0\u0297\0\u17e8\0\u0297\0\u0297\0\u181b\0\u184e\0\u1881"+
    "\0\u0297\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u0297\0\u1a4c\0\u1a7f\0\u072c\0\u1ab2\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u0297\0\u0297\0\u1c4a"+
    "\0\u1c7d\0\u1cb0\0\u0297\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf"+
    "\0\u1de2\0\u0297\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u0297\0\u1ee1"+
    "\0\u0297\0\u1f14\0\u1f47\0\u0297\0\u072c\0\u1f7a\0\u1fad\0\u0297"+
    "\0\u1fe0\0\u0297\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u0297"+
    "\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277"+
    "\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f"+
    "\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u0297\0\u2574"+
    "\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c"+
    "\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u0297\0\u283e\0\u0297"+
    "\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u0297\0\u0297\0\u2970"+
    "\0\u29a3\0\u29d6\0\u0297\0\u0297\0\u0297\0\u2a09\0\u2a3c\0\u2a6f"+
    "\0\u0297\0\u2aa2\0\u0297\0\u0297\0\u2ad5\0\u0297\0\u2b08\0\u0297"+
    "\0\u2b3b\0\u2b6e\0\u2ba1\0\u0297";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\20\16\2\21\3\16\1\22\3\16"+
    "\1\23\2\16\1\24\1\16\1\25\1\26\2\16\1\27"+
    "\1\16\1\30\11\16\2\0\1\31\1\32\1\20\11\31"+
    "\1\16\1\33\4\31\1\16\40\31\1\16\1\32\1\20"+
    "\37\16\1\34\16\16\2\0\1\16\1\35\1\20\4\16"+
    "\1\36\21\16\1\37\2\16\1\40\2\16\1\41\1\16"+
    "\1\42\1\43\2\16\1\44\6\16\1\45\1\46\3\16"+
    "\2\0\1\16\1\32\1\20\4\16\1\47\32\16\1\50"+
    "\2\16\1\51\6\16\1\45\1\46\3\16\2\0\1\16"+
    "\1\32\1\20\37\16\1\52\16\16\2\0\1\16\1\53"+
    "\1\20\20\54\1\16\26\54\1\16\4\54\1\16\2\54"+
    "\1\0\1\16\1\32\1\20\36\16\1\55\17\16\2\0"+
    "\1\16\1\32\1\20\4\16\1\56\13\16\2\57\6\16"+
    "\1\60\6\16\1\61\6\16\1\62\2\16\1\63\1\64"+
    "\3\16\2\0\1\16\1\32\1\20\4\16\1\56\13\16"+
    "\2\65\6\16\1\60\6\16\1\66\6\16\1\62\2\16"+
    "\1\63\1\64\3\16\2\0\1\16\1\53\1\20\20\67"+
    "\1\16\26\67\1\16\4\67\1\16\2\67\1\0\1\16"+
    "\1\32\1\20\4\16\1\70\1\71\5\16\1\72\5\16"+
    "\5\72\1\73\2\72\1\74\4\72\1\16\1\75\7\72"+
    "\1\16\1\72\1\63\1\64\1\72\1\16\1\72\2\0"+
    "\1\16\1\32\1\20\5\16\1\76\5\16\1\77\5\16"+
    "\15\77\1\100\1\16\2\77\1\101\4\77\1\16\1\77"+
    "\2\16\1\77\1\16\1\77\130\0\1\102\55\0\1\103"+
    "\53\0\1\104\5\0\1\105\55\0\1\106\54\0\1\107"+
    "\63\0\2\110\71\0\1\111\51\0\1\112\50\0\1\113"+
    "\5\0\1\114\5\0\15\114\2\0\7\114\1\0\1\114"+
    "\2\0\1\114\1\0\1\114\31\0\1\115\67\0\1\116"+
    "\21\0\1\117\27\0\2\120\61\0\2\121\41\0\1\122"+
    "\4\0\1\123\5\0\1\124\2\0\1\125\2\0\15\124"+
    "\2\0\7\124\1\0\1\124\2\0\1\124\1\0\1\124"+
    "\42\0\1\126\25\0\1\127\4\0\1\130\5\0\1\131"+
    "\4\0\1\132\1\133\5\131\1\134\1\131\1\135\4\131"+
    "\2\0\7\131\1\0\1\131\2\0\1\131\1\0\1\131"+
    "\34\0\1\136\66\0\1\137\5\0\1\140\47\0\1\141"+
    "\63\0\1\142\40\0\1\143\5\0\1\144\5\0\15\144"+
    "\2\0\7\144\1\0\1\144\2\0\1\144\1\0\1\144"+
    "\13\0\1\145\54\0\1\145\4\0\1\146\1\0\1\147"+
    "\2\0\2\145\1\0\1\145\3\0\15\145\2\0\7\145"+
    "\1\0\1\145\2\0\1\145\1\0\1\145\5\0\1\145"+
    "\4\0\1\146\1\0\1\147\2\0\2\145\1\0\1\145"+
    "\3\0\3\145\1\150\11\145\2\0\7\145\1\0\1\145"+
    "\2\0\1\145\1\0\1\145\5\0\1\145\4\0\1\146"+
    "\1\0\1\147\2\0\2\145\1\0\1\145\3\0\15\145"+
    "\2\0\1\145\1\151\5\145\1\0\1\145\2\0\1\145"+
    "\1\0\1\145\13\0\1\152\57\0\1\153\62\0\1\153"+
    "\14\0\2\154\71\0\1\155\63\0\1\156\56\0\1\157"+
    "\71\0\1\160\73\0\1\161\34\0\1\162\76\0\1\163"+
    "\62\0\1\164\46\0\1\165\51\0\1\114\57\0\1\166"+
    "\113\0\1\167\102\0\2\170\61\0\2\171\41\0\1\172"+
    "\61\0\1\173\27\0\1\122\1\174\2\0\1\175\64\0"+
    "\1\124\54\0\1\124\3\0\1\175\1\123\4\0\2\124"+
    "\1\0\1\124\3\0\15\124\2\0\7\124\1\0\1\124"+
    "\2\0\1\124\1\0\1\124\5\0\1\125\4\0\1\176"+
    "\5\0\1\177\5\0\15\177\2\0\7\177\1\0\1\177"+
    "\2\0\1\177\1\0\1\177\40\0\1\200\27\0\1\127"+
    "\1\201\2\0\1\202\64\0\1\131\54\0\1\131\3\0"+
    "\1\202\1\130\4\0\2\131\1\0\1\131\3\0\15\131"+
    "\2\0\7\131\1\0\1\131\2\0\1\131\1\0\1\131"+
    "\27\0\1\203\40\0\1\131\3\0\1\202\1\130\4\0"+
    "\2\131\1\0\1\131\3\0\1\131\1\204\13\131\2\0"+
    "\7\131\1\0\1\131\2\0\1\131\1\0\1\131\5\0"+
    "\1\131\3\0\1\202\1\130\4\0\2\131\1\0\1\131"+
    "\3\0\4\131\1\205\10\131\2\0\7\131\1\0\1\131"+
    "\2\0\1\131\1\0\1\131\5\0\1\131\3\0\1\202"+
    "\1\130\4\0\2\131\1\0\1\131\3\0\4\131\1\206"+
    "\10\131\2\0\7\131\1\0\1\131\2\0\1\131\1\0"+
    "\1\131\36\0\1\207\51\0\2\210\12\0\1\211\52\0"+
    "\1\212\44\0\1\144\57\0\1\213\67\0\1\214\52\0"+
    "\1\145\4\0\1\146\1\0\1\147\2\0\2\145\1\0"+
    "\1\145\3\0\13\145\1\215\1\145\2\0\7\145\1\0"+
    "\1\145\2\0\1\145\1\0\1\145\5\0\1\145\4\0"+
    "\1\146\1\0\1\147\2\0\2\145\1\0\1\145\2\0"+
    "\1\216\1\217\14\145\2\0\7\145\1\0\1\145\2\0"+
    "\1\145\1\0\1\145\21\0\1\220\101\0\1\221\75\0"+
    "\1\222\44\0\1\223\60\0\1\224\74\0\1\225\56\0"+
    "\1\226\40\0\1\227\62\0\1\230\75\0\1\231\74\0"+
    "\1\232\37\0\1\233\76\0\1\234\106\0\2\235\31\0"+
    "\1\236\50\0\1\237\50\0\1\240\70\0\1\177\54\0"+
    "\1\177\3\0\1\241\1\176\4\0\2\177\1\0\1\177"+
    "\3\0\15\177\2\0\7\177\1\0\1\177\2\0\1\177"+
    "\1\0\1\177\34\0\1\242\33\0\1\243\105\0\1\244"+
    "\37\0\1\131\3\0\1\202\1\130\4\0\2\131\1\0"+
    "\1\131\3\0\2\131\1\245\12\131\2\0\7\131\1\0"+
    "\1\131\2\0\1\131\1\0\1\131\5\0\1\131\3\0"+
    "\1\202\1\130\4\0\2\131\1\0\1\131\3\0\5\131"+
    "\1\246\7\131\2\0\7\131\1\0\1\131\2\0\1\131"+
    "\1\0\1\131\5\0\1\131\3\0\1\202\1\130\4\0"+
    "\2\131\1\0\1\131\3\0\12\131\1\247\2\131\2\0"+
    "\7\131\1\0\1\131\2\0\1\131\1\0\1\131\37\0"+
    "\1\250\63\0\1\251\64\0\1\252\71\0\1\253\32\0"+
    "\1\254\46\0\1\145\4\0\1\146\1\0\1\147\2\0"+
    "\2\145\1\0\1\145\3\0\7\145\1\255\5\145\2\0"+
    "\7\145\1\0\1\145\2\0\1\145\1\0\1\145\36\0"+
    "\1\256\31\0\1\145\4\0\1\146\1\0\1\147\2\0"+
    "\2\145\1\0\1\145\3\0\10\145\1\257\4\145\2\0"+
    "\7\145\1\0\1\145\2\0\1\145\1\0\1\145\12\0"+
    "\1\260\5\0\1\261\5\0\15\261\2\0\7\261\1\0"+
    "\1\261\2\0\1\261\1\0\1\261\17\0\1\262\75\0"+
    "\1\263\100\0\1\264\63\0\1\265\57\0\1\266\56\0"+
    "\1\267\56\0\1\270\2\0\1\271\7\0\1\272\57\0"+
    "\1\273\26\0\1\274\5\0\1\275\5\0\15\275\2\0"+
    "\7\275\1\0\1\275\2\0\1\275\1\0\1\275\46\0"+
    "\1\276\46\0\1\277\3\0\1\300\2\0\1\301\26\0"+
    "\1\240\3\0\1\175\113\0\1\302\25\0\1\243\3\0"+
    "\1\202\102\0\1\303\36\0\1\131\3\0\1\202\1\130"+
    "\4\0\2\131\1\0\1\131\3\0\3\131\1\304\11\131"+
    "\2\0\7\131\1\0\1\131\2\0\1\131\1\0\1\131"+
    "\5\0\1\131\3\0\1\202\1\130\4\0\2\131\1\0"+
    "\1\131\3\0\4\131\1\305\10\131\2\0\7\131\1\0"+
    "\1\131\2\0\1\131\1\0\1\131\5\0\1\131\3\0"+
    "\1\202\1\130\4\0\2\131\1\0\1\131\3\0\13\131"+
    "\1\306\1\131\2\0\7\131\1\0\1\131\2\0\1\131"+
    "\1\0\1\131\42\0\1\307\52\0\1\310\72\0\1\311"+
    "\32\0\1\312\5\0\1\313\5\0\15\313\2\0\7\313"+
    "\1\0\1\313\2\0\1\313\1\0\1\313\54\0\2\314"+
    "\12\0\1\145\4\0\1\146\1\0\1\147\2\0\2\145"+
    "\1\0\1\145\3\0\15\145\2\0\7\145\1\314\1\315"+
    "\2\0\1\145\1\0\1\145\13\0\1\261\54\0\1\261"+
    "\1\316\3\0\1\260\4\0\2\261\1\220\1\261\3\0"+
    "\15\261\2\0\7\261\1\0\1\261\2\0\1\261\1\0"+
    "\1\261\25\0\2\317\74\0\1\320\54\0\1\321\72\0"+
    "\1\322\51\0\1\323\5\0\1\324\55\0\1\325\65\0"+
    "\1\326\40\0\1\275\54\0\1\275\1\327\3\0\1\274"+
    "\4\0\2\275\1\233\1\275\3\0\15\275\2\0\7\275"+
    "\1\0\1\275\2\0\1\275\1\0\1\275\42\0\1\330"+
    "\60\0\1\331\60\0\1\332\21\0\1\333\27\0\2\334"+
    "\61\0\2\335\41\0\1\131\3\0\1\202\1\130\4\0"+
    "\2\131\1\0\1\131\2\0\1\335\1\336\14\131\2\0"+
    "\7\131\1\0\1\131\2\0\1\131\1\0\1\131\5\0"+
    "\1\131\3\0\1\202\1\130\4\0\2\131\1\0\1\131"+
    "\3\0\10\131\1\337\4\131\2\0\7\131\1\0\1\131"+
    "\2\0\1\131\1\0\1\131\5\0\1\131\3\0\1\202"+
    "\1\130\4\0\2\131\1\0\1\131\3\0\5\131\1\340"+
    "\7\131\2\0\7\131\1\0\1\131\2\0\1\131\1\0"+
    "\1\131\35\0\1\341\40\0\1\313\54\0\1\313\1\342"+
    "\3\0\1\312\4\0\2\313\1\254\1\313\3\0\15\313"+
    "\2\0\7\313\1\0\1\313\2\0\1\313\1\0\1\313"+
    "\12\0\1\343\5\0\1\344\5\0\15\344\2\0\7\344"+
    "\1\0\1\344\2\0\1\344\1\0\1\344\45\0\1\345"+
    "\44\0\1\346\65\0\1\347\71\0\1\350\73\0\1\351"+
    "\50\0\1\352\34\0\1\353\5\0\1\354\5\0\15\354"+
    "\2\0\7\354\1\0\1\354\2\0\1\354\1\0\1\354"+
    "\36\0\1\355\105\0\2\356\61\0\2\357\41\0\1\360"+
    "\53\0\1\361\35\0\1\131\3\0\1\202\1\130\4\0"+
    "\2\131\1\0\1\131\3\0\4\131\1\362\10\131\2\0"+
    "\7\131\1\0\1\131\2\0\1\131\1\0\1\131\5\0"+
    "\1\131\3\0\1\202\1\130\4\0\2\131\1\0\1\131"+
    "\3\0\11\131\1\363\3\131\2\0\7\131\1\0\1\131"+
    "\2\0\1\131\1\0\1\131\5\0\1\131\3\0\1\202"+
    "\1\130\4\0\2\131\1\0\1\131\3\0\7\131\1\364"+
    "\5\131\2\0\7\131\1\0\1\131\2\0\1\131\1\0"+
    "\1\131\34\0\1\365\40\0\1\366\5\0\1\367\5\0"+
    "\15\367\2\0\7\367\1\0\1\367\2\0\1\367\1\0"+
    "\1\367\13\0\1\344\54\0\1\344\4\0\1\343\4\0"+
    "\2\344\1\0\1\344\3\0\15\344\2\0\7\344\1\0"+
    "\1\344\2\0\1\344\1\0\1\344\35\0\1\370\62\0"+
    "\1\371\60\0\1\372\74\0\1\373\56\0\1\374\53\0"+
    "\1\375\43\0\1\354\54\0\1\354\3\0\1\376\1\353"+
    "\4\0\2\354\1\0\1\354\3\0\15\354\2\0\7\354"+
    "\1\0\1\354\2\0\1\354\1\0\1\354\35\0\1\377"+
    "\106\0\2\u0100\31\0\1\u0101\64\0\1\u0102\34\0\1\131"+
    "\3\0\1\202\1\130\4\0\2\131\1\0\1\131\3\0"+
    "\5\131\1\u0103\7\131\2\0\7\131\1\0\1\131\2\0"+
    "\1\131\1\0\1\131\5\0\1\131\3\0\1\202\1\130"+
    "\4\0\2\131\1\0\1\131\3\0\7\131\1\u0104\5\131"+
    "\2\0\7\131\1\0\1\131\2\0\1\131\1\0\1\131"+
    "\5\0\1\131\3\0\1\202\1\130\4\0\2\131\1\0"+
    "\1\131\3\0\6\131\1\u0105\6\131\2\0\7\131\1\0"+
    "\1\131\2\0\1\131\1\0\1\131\42\0\1\u0106\33\0"+
    "\1\367\54\0\1\367\3\0\1\u0107\1\366\4\0\2\367"+
    "\1\0\1\367\3\0\15\367\2\0\7\367\1\0\1\367"+
    "\2\0\1\367\1\0\1\367\53\0\1\u0108\43\0\1\u0109"+
    "\77\0\1\u010a\57\0\1\u010b\56\0\1\u010c\66\0\1\u010d"+
    "\64\0\1\u010e\60\0\1\u010f\50\0\1\u0110\33\0\1\131"+
    "\3\0\1\202\1\130\4\0\2\131\1\0\1\131\3\0"+
    "\6\131\1\363\6\131\2\0\7\131\1\0\1\131\2\0"+
    "\1\131\1\0\1\131\5\0\1\131\3\0\1\u0111\1\130"+
    "\4\0\2\131\1\0\1\131\3\0\15\131\2\0\7\131"+
    "\1\0\1\131\2\0\1\131\1\0\1\131\5\0\1\131"+
    "\3\0\1\202\1\130\4\0\2\131\1\0\1\131\3\0"+
    "\14\131\1\u0104\2\0\7\131\1\0\1\131\2\0\1\131"+
    "\1\0\1\131\32\0\1\u0112\72\0\1\u0113\62\0\1\u0114"+
    "\52\0\1\u0115\72\0\1\u0116\55\0\1\u0117\65\0\1\u0118"+
    "\51\0\1\u0119\44\0\1\u0111\106\0\1\u011a\61\0\1\u011b"+
    "\70\0\1\u011c\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11220];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\3\11\5\1\1\11\2\1\2\11\1\1\2\11"+
    "\4\1\2\11\1\1\2\11\1\1\1\11\1\1\4\11"+
    "\3\1\1\11\1\1\2\11\1\1\2\11\5\1\1\11"+
    "\2\1\1\11\1\1\34\0\1\11\3\0\1\11\26\0"+
    "\1\11\3\0\1\11\4\0\1\11\11\0\1\11\12\0"+
    "\1\11\2\0\1\11\1\0\2\11\3\0\1\11\10\0"+
    "\1\11\2\0\1\1\10\0\2\11\3\0\1\11\6\0"+
    "\1\11\4\0\1\11\1\0\1\11\2\0\1\11\1\1"+
    "\2\0\1\11\1\0\1\11\5\0\1\11\13\0\1\1"+
    "\12\0\1\11\16\0\1\11\1\0\1\11\5\0\2\11"+
    "\3\0\3\11\3\0\1\11\1\0\2\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public static String urlAuxliar="";
	public static Boolean fin=false;
	public static String txt_temporal="";
	public static int linea=0;
	public static int columna=0;



    public static int flagInicio = 0;
    public String cadena = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(simbolos.EOF,new String("Fin del archivo"));
    /*({letra}":"("\\"({linea})+)+)*/
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
			Errores errorLexico=new Errores();
			errorLexico.setTipo("Lexico");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion("Caracter Ilegal: "+yytext());
			Interfaz.erroresLexicos.add(errorLexico);
			//Proyecto1_Compiladores.listaLexico.add(errorLexico);
			//Menu.listaLexico=Proyecto1_Compiladores.listaLexico;
            }
          case 64: break;
          case 2: 
            { System.out.println("Salto de linea");
            }
          case 65: break;
          case 3: 
            { yychar=0;
            }
          case 66: break;
          case 4: 
            { cadena = "";
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : Menor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
       
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 67: break;
          case 5: 
            { cadena = "";
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 68: break;
          case 6: 
            { System.out.print(yytext());
            }
          case 69: break;
          case 7: 
            { 
            }
          case 70: break;
          case 8: 
            { yybegin(ENCABEZADO2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 71: break;
          case 9: 
            { cadena = "";
            }
          case 72: break;
          case 10: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : Menor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
       
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 73: break;
          case 11: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);


        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 74: break;
          case 12: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("asignacion");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("= : Asignacion");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                
        Interfaz.tablaSimbolos_.add(simbolo);
             
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.asignacion, yychar, yyline, yytext());
            }
          case 75: break;
          case 13: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("puntoComa");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("; : Punto coma");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
            
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.puntoComa, yychar, yyline, yytext());
            }
          case 76: break;
          case 14: 
            { yybegin(YYINITIAL);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 77: break;
          case 15: 
            { yybegin(TITULO2);                           
        System.out.println("Saltar a estado TITULO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 78: break;
          case 16: 
            { cadena  = cadena + yytext();
            }
          case 79: break;
          case 17: 
            { if(!yytext().equals("<"))
        {
            cadena  = cadena + yytext();
            //System.out.println(cadena);
        }
        else 
        {

            //cadena = cadena + yytext();
            
            yybegin(ENCABEZADO2);
            Interfaz.auxContador++;                                
            //Generamos la entrada en la tabla de simbolos.
            tablaSimbolos simbolo=new tablaSimbolos();
            simbolo.setTipo("cadena");
            simbolo.setLinea(yyline);
            simbolo.setColumna(yychar);
            simbolo.setDescripcion("Cadena : cadena de texto");
            simbolo.setIndex(Interfaz.auxContador);
            simbolo.setValor(cadena);                 
            Interfaz.tablaSimbolos_.add(simbolo);
            yypushback(1);	                
            return new Symbol(simbolos.cadena, yychar, yyline, cadena); 

        }
            }
          case 80: break;
          case 18: 
            { yybegin(ENCABEZADO2);  
        System.out.println("----------------------------------------------Saliendo de titulo3");                         
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : Menor que titulo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 81: break;
          case 19: 
            { yybegin(YYINITIAL);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 82: break;
          case 20: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("asignacion");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("= : Asignacion");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                
        Interfaz.tablaSimbolos_.add(simbolo);
                             
        return new Symbol(simbolos.asignacion, yychar, yyline, yytext());
            }
          case 83: break;
          case 21: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("puntoComa");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("; : Punto coma");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                    
        return new Symbol(simbolos.puntoComa, yychar, yyline, yytext());
            }
          case 84: break;
          case 22: 
            { yybegin(TEXTO2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 85: break;
          case 23: 
            { if(!yytext().equals("<"))
        {
            cadena  = cadena + yytext();
            //System.out.println(cadena);
        }
        else 
        {

            //cadena = cadena + yytext();
            
            yybegin(YYINITIAL);
            Interfaz.auxContador++;                                
            //Generamos la entrada en la tabla de simbolos.
            tablaSimbolos simbolo=new tablaSimbolos();
            simbolo.setTipo("cadena");
            simbolo.setLinea(yyline);
            simbolo.setColumna(yychar);
            simbolo.setDescripcion("Cadena : cadena de texto");
            simbolo.setIndex(Interfaz.auxContador);
            simbolo.setValor(cadena);                 
            Interfaz.tablaSimbolos_.add(simbolo);
            yypushback(1);	                
            return new Symbol(simbolos.cadena, yychar, yyline, cadena); 

        }
            }
          case 86: break;
          case 24: 
            { yybegin(IMAGEN2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 87: break;
          case 25: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : MenorQue fin Imagen");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 88: break;
          case 26: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id Ccss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id : Identificador grupo ccss");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.idCcss, yychar, yyline, yytext());
            }
          case 89: break;
          case 27: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id Ccss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id : Identificador grupo ccss");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                            
        return new Symbol(simbolos.idCcss, yychar, yyline, yytext());
            }
          case 90: break;
          case 28: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("inicioCjs");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("CJS : Inicio etiqueta CJS");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
              
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.inicioCjs, yychar, yyline, yytext());
            }
          case 91: break;
          case 29: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id: Posible nombre de color.");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.id, yychar, yyline, yytext());
            }
          case 92: break;
          case 30: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id: Posible nombre de color.");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);

        return new Symbol(simbolos.id, yychar, yyline, yytext());
            }
          case 93: break;
          case 31: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("metodo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("metodo : Llamada a metodo");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.metodo, yychar, yyline, yytext());
            }
          case 94: break;
          case 32: 
            { yybegin(COMENTARIO);
            }
          case 95: break;
          case 33: 
            { yybegin(YYINITIAL);
            }
          case 96: break;
          case 34: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ruta");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ruta : Declaración ruta archivo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.ruta, yychar, yyline, yytext());
            }
          case 97: break;
          case 35: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("inicioCcss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("CCSS : Inicio etiqueta CCSS");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
              
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.inicioCcss, yychar, yyline, yytext());
            }
          case 98: break;
          case 36: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("rgb");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("rgb: Posible nombre de color.");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.rgb, yychar, yyline, yytext());
            }
          case 99: break;
          case 37: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("alto");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("alto : Altura objeto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.alto, yychar, yyline, yytext());
            }
          case 100: break;
          case 38: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ruta");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ruta : Declaración ruta archivo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        return new Symbol(simbolos.ruta, yychar, yyline, yytext());
            }
          case 101: break;
          case 39: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("inicioChtml");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("CHTML : Inicio Documento");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        return new Symbol(simbolos.inicioChtml, yychar, yyline, yytext());
            }
          case 102: break;
          case 40: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("texto");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("texto: Inicio texto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(TEXTO1);                            
        return new Symbol(simbolos.inicioTexto, yychar, yyline, yytext());
            }
          case 103: break;
          case 41: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("inicioPanel");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("panel: Declaracion panel");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        yybegin(ELEMENTOS);        
        return new Symbol(simbolos.inicioPanel, yychar, yyline, yytext());
            }
          case 104: break;
          case 42: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fondo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fondo : declaracion fondo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
       
        return new Symbol(simbolos.fondo, yychar, yyline, yytext());
            }
          case 105: break;
          case 43: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ancho");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ancho : Anchura objeto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.ancho, yychar, yyline, yytext());
            }
          case 106: break;
          case 44: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("grupo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("grupo : grupo ccss");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.grupo, yychar, yyline, yytext());
            }
          case 107: break;
          case 45: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("click");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("click : Evento Click");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                            
        return new Symbol(simbolos.click, yychar, yyline, yytext());
            }
          case 108: break;
          case 46: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("imagen");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("imagen: Inicio imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(IMAGEN1);                                    
        return new Symbol(simbolos.inicioImagen, yychar, yyline, yytext());
            }
          case 109: break;
          case 47: 
            { yybegin(CUERPO);
        System.out.println("Saltar a estado CUERPO");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("cuerpo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("cuerpo : Inicio cuerpo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.inicioCuerpo, yychar, yyline, yytext());
            }
          case 110: break;
          case 48: 
            { yybegin(TITULO1);
        System.out.println("Saltar a estado CUERPO");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("titulo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("titulo : Inicio titulo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.inicioTitulo, yychar, yyline, yytext());
            }
          case 111: break;
          case 49: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("path");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("path : Direccion a imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                          
        return new Symbol(simbolos.path, yychar, yyline, yytext());
            }
          case 112: break;
          case 50: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCjs");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-cjs : finCJs");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
             
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.finCjs, yychar, yyline, yytext());
            }
          case 113: break;
          case 51: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("pathComillas");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("Path: Ruta a archivo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.pathComillas, yychar, yyline, yytext());
            }
          case 114: break;
          case 52: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCcss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-CCSS : fin etiqueta CCSS");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
             
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.finCcss, yychar, yyline, yytext());
            }
          case 115: break;
          case 53: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("alineado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("alineado : Alineación objeto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.alineado, yychar, yyline, yytext());
            }
          case 116: break;
          case 54: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("path");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("path : Direccion a imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.pathComillas, yychar, yyline, yytext());
            }
          case 117: break;
          case 55: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("finChtml");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("FIN-CHTML : Fin Documento");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        return new Symbol(simbolos.finChtml, yychar, yyline, yytext());
            }
          case 118: break;
          case 56: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-texto");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-texto: Fin texto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                    
        return new Symbol(simbolos.finTexto, yychar, yyline, yytext());
            }
          case 119: break;
          case 57: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finPanel");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-panel: Cierre panel");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                          
        return new Symbol(simbolos.finPanel, yychar, yyline, yytext());
            }
          case 120: break;
          case 58: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("valorAlineado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("valorAlineado : Alineación");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.valorAlineado, yychar, yyline, yytext());
            }
          case 121: break;
          case 59: 
            { yybegin(ENCABEZADO1);
        System.out.println("Saltar a estado ENCABEZADO1");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("inicioEncabezado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("encabezado : Inicio encabezado");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.inicioEncabezado, yychar, yyline, yytext());
            }
          case 122: break;
          case 60: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fin-cuerpo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-cuerpo : Fin cuerpo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.finCuerpo, yychar, yyline, yytext());
            }
          case 123: break;
          case 61: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fin-titulo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-titulo : Fin titulo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.finTitulo, yychar, yyline, yytext());
            }
          case 124: break;
          case 62: 
            { yybegin(YYINITIAL); 
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-imagen");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-imagen: Fin imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                    
        return new Symbol(simbolos.finImagen, yychar, yyline, yytext());
            }
          case 125: break;
          case 63: 
            { yybegin(YYINITIAL);
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("finEncabezado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("FIN-ENCABEZADO : Fin Encabezado");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        return new Symbol(simbolos.finEncabezado, yychar, yyline, yytext());
            }
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
