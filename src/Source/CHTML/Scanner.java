/* The following code was generated by JFlex 1.6.1 */

package Source.CHTML;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Principal.Errores;
import Principal.Interfaz;
import Principal.tablaSimbolos;
/*
Directivas:
public: clase publica
cup: compatibilidad con cup
full: extender el alfabeto con todos los valores de 8 bits
line: agrega la variable int yyline, para indicar la fila del lexema
char: agrega la variable int yychar, indica el indice del primer caracter del lexema
ignorecase: validar, indistitntamente si la letra es mayuscula o minuscula
eofval: especifica un valor de retorno al final del archivo
*/





/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>chtml.l</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int ENCABEZADO1 = 4;
  public static final int ENCABEZADO2 = 6;
  public static final int CUERPO = 8;
  public static final int TITULO1 = 10;
  public static final int TITULO2 = 12;
  public static final int TITULO3 = 14;
  public static final int ELEMENTOS = 16;
  public static final int TEXTO1 = 18;
  public static final int TEXTO2 = 20;
  public static final int IMAGEN1 = 22;
  public static final int IMAGEN2 = 24;
  public static final int BOTON1 = 26;
  public static final int BOTON2 = 28;
  public static final int ENLACE1 = 30;
  public static final int ENLACE2 = 32;
  public static final int T1 = 34;
  public static final int T2 = 36;
  public static final int T3 = 38;
  public static final int T4 = 40;
  public static final int T5 = 42;
  public static final int T6 = 44;
  public static final int T7 = 46;
  public static final int TB = 48;
  public static final int TB2 = 50;
  public static final int TI = 52;
  public static final int TI2 = 54;
  public static final int TB3 = 56;
  public static final int TA1 = 58;
  public static final int TA2 = 60;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 10, 10, 14, 14, 
    10, 10, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     5,  5,  5,  5,  5,  5,  5,  5,  5,  1,  2, 49,  1,  1,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     1,  5,  7, 17,  5,  5,  5,  5, 10, 11, 12,  5,  5, 13,  4, 18, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  6, 43, 33, 42, 34,  5, 
     5, 27, 38, 28, 26, 24, 37, 41, 29, 20, 46, 45, 36, 35, 30, 32, 
    39, 22, 25, 48, 31, 23, 14, 14, 40, 14, 21,  5, 15,  5,  5, 16, 
     5, 27, 38, 28, 26, 24, 37, 41, 29, 20, 46, 45, 36, 35, 30, 32, 
    39, 22, 25, 48, 31, 23, 14, 14, 40, 14, 21,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5, 49,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  9,  5,  5,  5,  5,  5,  5,  5,  9,  5,  5,  5,  9,  5,  5, 
     5,  9,  5,  9,  5,  5,  5,  5,  5,  5,  9,  5,  5,  5,  5,  5, 
     5,  5,  5,  8,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  8,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\34\0\1\1\1\2\1\3\4\1\1\4\1\5\3\1"+
    "\1\6\1\7\1\6\1\10\1\11\4\1\1\12\1\13"+
    "\1\1\1\14\1\15\1\1\1\16\1\1\1\17\1\20"+
    "\1\21\1\22\3\1\1\23\1\1\1\24\1\25\1\1"+
    "\1\26\1\27\7\1\1\30\3\1\1\31\1\1\1\32"+
    "\1\1\1\33\1\34\1\35\1\36\1\1\1\37\1\1"+
    "\1\40\4\1\1\41\1\1\1\42\1\43\1\44\1\1"+
    "\1\45\2\1\1\46\1\47\1\50\2\1\1\51\1\52"+
    "\1\1\1\53\1\54\1\1\1\55\36\0\1\56\3\0"+
    "\1\57\10\0\1\56\12\0\1\60\1\61\10\0\1\62"+
    "\31\0\1\63\3\0\1\64\4\0\1\65\11\0\1\66"+
    "\16\0\1\67\25\0\1\70\3\0\1\71\1\0\1\72"+
    "\1\73\3\0\1\74\10\0\1\75\2\0\1\76\2\0"+
    "\1\75\6\0\1\76\12\0\1\77\14\0\1\100\1\101"+
    "\1\102\5\0\1\103\1\104\6\0\1\105\4\0\1\106"+
    "\1\0\1\107\2\0\1\106\1\0\2\110\1\107\3\0"+
    "\1\111\5\0\1\112\1\0\1\113\2\0\1\114\3\0"+
    "\1\115\1\0\1\116\1\117\10\0\1\120\14\0\1\121"+
    "\10\0\1\122\1\123\1\124\1\0\1\125\3\0\1\126"+
    "\12\0\1\127\32\0\1\130\1\0\1\131\5\0\1\132"+
    "\1\133\1\132\7\0\1\134\5\0\1\135\1\136\1\137"+
    "\1\140\3\0\1\141\1\0\1\142\1\143\1\0\1\144"+
    "\1\0\1\145\1\146\1\147\1\150\2\0\1\151\1\0"+
    "\1\152\1\0\1\153\1\154\3\0\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[505];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u0594\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u0594\0\u06c6\0\u06f9\0\u072c"+
    "\0\u0594\0\u0594\0\u075f\0\u0594\0\u0594\0\u0792\0\u07c5\0\u07f8"+
    "\0\u082b\0\u0594\0\u0594\0\u085e\0\u0594\0\u0594\0\u0891\0\u0594"+
    "\0\u08c4\0\u0594\0\u0594\0\u0594\0\u0594\0\u08f7\0\u092a\0\u095d"+
    "\0\u0594\0\u0990\0\u0594\0\u0594\0\u09c3\0\u0594\0\u0594\0\u09f6"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0594\0\u0b5b"+
    "\0\u0b8e\0\u0bc1\0\u0594\0\u0bf4\0\u0594\0\u0c27\0\u0594\0\u0594"+
    "\0\u0594\0\u0594\0\u0c5a\0\u0594\0\u0c8d\0\u0594\0\u0cc0\0\u0cf3"+
    "\0\u0d26\0\u0d59\0\u0594\0\u0d8c\0\u0594\0\u0594\0\u0594\0\u0dbf"+
    "\0\u0594\0\u0df2\0\u0e25\0\u0594\0\u0594\0\u0594\0\u0e58\0\u0e8b"+
    "\0\u0594\0\u0594\0\u0ebe\0\u0594\0\u0594\0\u0ef1\0\u0594\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec"+
    "\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u0594\0\u151e\0\u1551"+
    "\0\u1584\0\u0594\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u0a5c"+
    "\0\u0a29\0\u16b6\0\u0a5c\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5"+
    "\0\u0bc1\0\u17e8\0\u181b\0\u184e\0\u1881\0\u0594\0\u0594\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u0594"+
    "\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u0e8b\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16"+
    "\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae"+
    "\0\u1ee1\0\u0594\0\u1f14\0\u1f47\0\u1f7a\0\u0594\0\u1fad\0\u1fe0"+
    "\0\u2013\0\u2046\0\u0594\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\u2178\0\u21ab\0\u21de\0\u2211\0\u0594\0\u2244\0\u2277\0\u22aa"+
    "\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442"+
    "\0\u2475\0\u24a8\0\u24db\0\u0594\0\u250e\0\u2541\0\u2574\0\u25a7"+
    "\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c\0\u273f"+
    "\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7"+
    "\0\u290a\0\u0594\0\u293d\0\u2970\0\u29a3\0\u0594\0\u29d6\0\u0594"+
    "\0\u0594\0\u2a09\0\u2a3c\0\u2a6f\0\u0594\0\u2aa2\0\u2ad5\0\u2b08"+
    "\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u0594\0\u2c3a\0\u2c6d"+
    "\0\u0a5c\0\u2ca0\0\u2cd3\0\u0a5c\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f"+
    "\0\u2dd2\0\u2e05\0\u0594\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04"+
    "\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u0594\0\u3036\0\u3069"+
    "\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201"+
    "\0\u3234\0\u3267\0\u0594\0\u329a\0\u0594\0\u32cd\0\u3300\0\u3333"+
    "\0\u3366\0\u3399\0\u0594\0\u0594\0\u33cc\0\u33ff\0\u3432\0\u3465"+
    "\0\u3498\0\u34cb\0\u0594\0\u34fe\0\u3531\0\u3564\0\u3597\0\u0594"+
    "\0\u35ca\0\u0594\0\u35fd\0\u3630\0\u0a5c\0\u3663\0\u0594\0\u0a5c"+
    "\0\u0a5c\0\u3696\0\u36c9\0\u36fc\0\u0594\0\u372f\0\u3762\0\u3795"+
    "\0\u37c8\0\u37fb\0\u0594\0\u382e\0\u0594\0\u3861\0\u3894\0\u0594"+
    "\0\u38c7\0\u38fa\0\u392d\0\u0594\0\u3960\0\u0594\0\u0594\0\u3993"+
    "\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u0594"+
    "\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90"+
    "\0\u3cc3\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28"+
    "\0\u3e5b\0\u3e8e\0\u3ec1\0\u3ef4\0\u3f27\0\u0594\0\u0594\0\u0594"+
    "\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026\0\u0594\0\u4059\0\u408c"+
    "\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be\0\u41f1\0\u4224"+
    "\0\u0594\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356\0\u4389"+
    "\0\u43bc\0\u43ef\0\u4422\0\u4455\0\u4488\0\u44bb\0\u44ee\0\u4521"+
    "\0\u4554\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653\0\u4686\0\u46b9"+
    "\0\u46ec\0\u471f\0\u4752\0\u0594\0\u4785\0\u0594\0\u47b8\0\u47eb"+
    "\0\u481e\0\u4851\0\u4884\0\u0594\0\u0594\0\u0a5c\0\u48b7\0\u48ea"+
    "\0\u491d\0\u4950\0\u4983\0\u49b6\0\u49e9\0\u0594\0\u4a1c\0\u4a4f"+
    "\0\u4a82\0\u4ab5\0\u4ae8\0\u0594\0\u4b1b\0\u0594\0\u0594\0\u4b4e"+
    "\0\u4b81\0\u4bb4\0\u0594\0\u4be7\0\u0594\0\u0594\0\u4c1a\0\u0594"+
    "\0\u4c4d\0\u0594\0\u0594\0\u0594\0\u0594\0\u4c80\0\u4cb3\0\u0594"+
    "\0\u4ce6\0\u0594\0\u4d19\0\u0594\0\u0594\0\u4d4c\0\u4d7f\0\u4db2"+
    "\0\u0594";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[505];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\1\36\1\37\20\35\2\40\3\35\1\41\3\35"+
    "\1\42\2\35\1\43\1\35\1\44\1\45\2\35\1\46"+
    "\1\47\1\50\11\35\2\0\1\51\1\52\1\37\11\51"+
    "\1\35\1\53\4\51\1\35\40\51\1\35\1\52\1\37"+
    "\37\35\1\54\16\35\2\0\1\35\1\55\1\37\4\35"+
    "\1\56\21\35\1\57\2\35\1\60\2\35\1\61\1\35"+
    "\1\62\1\63\2\35\1\64\4\35\1\65\1\66\5\35"+
    "\2\0\1\35\1\52\1\37\4\35\1\67\32\35\1\70"+
    "\2\35\1\71\4\35\1\65\1\66\5\35\2\0\1\35"+
    "\1\52\1\37\37\35\1\72\16\35\2\0\1\35\1\73"+
    "\1\37\20\74\1\35\30\74\1\35\2\74\1\35\2\74"+
    "\1\0\1\35\1\52\1\37\36\35\1\75\17\35\2\0"+
    "\1\35\1\52\1\37\4\35\1\76\13\35\2\77\6\35"+
    "\1\100\6\35\1\101\6\35\1\102\1\103\1\104\5\35"+
    "\2\0\1\35\1\52\1\37\4\35\1\76\13\35\2\105"+
    "\6\35\1\100\6\35\1\106\6\35\1\102\1\103\1\104"+
    "\5\35\2\0\1\35\1\73\1\37\20\107\1\35\30\107"+
    "\1\35\2\107\1\35\2\107\1\0\1\35\1\52\1\37"+
    "\4\35\1\110\1\111\5\35\1\112\4\35\1\77\1\113"+
    "\4\112\1\114\1\112\1\115\1\116\4\112\1\35\1\117"+
    "\6\112\1\120\1\103\1\104\1\35\2\112\1\35\1\112"+
    "\2\0\1\35\1\52\1\37\5\35\1\121\5\35\1\122"+
    "\5\35\15\122\1\123\1\35\2\122\1\124\4\122\3\35"+
    "\2\122\1\35\1\122\2\0\1\35\1\52\1\37\4\35"+
    "\1\110\1\111\5\35\1\112\4\35\1\77\1\113\4\112"+
    "\1\114\1\112\1\115\1\116\4\112\1\35\1\125\6\112"+
    "\1\120\1\103\1\104\1\35\2\112\1\35\1\112\2\0"+
    "\1\35\1\52\1\37\4\35\1\110\13\35\2\77\4\35"+
    "\1\126\1\35\1\100\6\35\1\127\6\35\1\102\1\103"+
    "\1\104\5\35\2\0\1\35\1\52\1\37\4\35\1\76"+
    "\13\35\2\77\6\35\1\100\6\35\1\130\6\35\1\102"+
    "\1\103\1\104\5\35\2\0\1\35\1\52\1\37\36\35"+
    "\1\131\1\132\2\35\1\133\13\35\2\0\1\35\1\52"+
    "\1\37\4\35\1\76\13\35\2\77\6\35\1\100\6\35"+
    "\1\134\6\35\1\102\1\103\1\104\5\35\2\0\1\35"+
    "\1\52\1\37\31\35\1\135\4\35\1\131\1\136\2\35"+
    "\1\137\13\35\2\0\1\35\1\52\1\37\4\35\1\140"+
    "\13\35\2\141\6\35\1\142\6\35\1\143\6\35\1\144"+
    "\1\145\1\146\5\35\2\0\1\35\1\73\1\37\20\147"+
    "\1\35\30\147\1\35\2\147\1\35\2\147\1\0\1\35"+
    "\1\52\1\37\20\35\2\150\14\35\1\151\3\35\1\152"+
    "\1\153\12\35\2\0\1\35\1\52\1\37\4\35\1\110"+
    "\1\111\5\35\1\112\4\35\1\77\1\113\4\112\1\114"+
    "\1\112\1\115\1\116\4\112\1\35\1\154\6\112\1\120"+
    "\1\103\1\104\1\35\2\112\1\35\1\112\2\0\1\35"+
    "\1\73\1\37\20\155\1\35\30\155\1\35\2\155\1\35"+
    "\2\155\1\0\1\35\1\52\1\37\4\35\1\110\1\111"+
    "\5\35\1\112\4\35\1\77\1\113\4\112\1\114\1\112"+
    "\1\115\1\116\4\112\1\35\1\156\6\112\1\120\1\103"+
    "\1\104\1\35\2\112\1\35\1\112\2\0\1\35\1\52"+
    "\1\37\5\35\1\157\5\35\1\160\5\35\15\160\1\161"+
    "\1\162\2\160\1\163\4\160\3\35\2\160\1\35\1\160"+
    "\2\0\1\35\1\52\1\37\36\35\1\164\1\165\2\35"+
    "\1\166\13\35\2\0\1\35\1\52\1\37\4\35\1\76"+
    "\13\35\2\77\6\35\1\100\6\35\1\167\6\35\1\102"+
    "\1\103\1\104\5\35\130\0\1\170\55\0\1\171\53\0"+
    "\1\172\5\0\1\173\55\0\1\174\2\0\1\175\51\0"+
    "\1\176\63\0\2\177\76\0\1\200\55\0\1\201\51\0"+
    "\1\202\50\0\1\203\5\0\1\204\5\0\15\204\2\0"+
    "\7\204\3\0\2\204\1\0\1\204\31\0\1\205\67\0"+
    "\1\206\21\0\1\207\27\0\2\210\61\0\2\211\41\0"+
    "\1\212\4\0\1\213\5\0\1\214\2\0\1\215\2\0"+
    "\15\214\2\0\7\214\3\0\2\214\1\0\1\214\42\0"+
    "\1\216\25\0\1\217\4\0\1\220\5\0\1\221\4\0"+
    "\1\222\1\223\5\221\1\224\1\221\1\225\4\221\2\0"+
    "\7\221\3\0\2\221\1\0\1\221\34\0\1\226\66\0"+
    "\1\227\5\0\1\230\47\0\1\231\63\0\1\232\33\0"+
    "\1\217\4\0\1\233\5\0\1\234\4\0\1\222\1\235"+
    "\5\234\1\236\1\234\1\237\4\234\2\0\7\234\3\0"+
    "\2\234\1\0\1\234\13\0\1\240\54\0\1\240\4\0"+
    "\1\241\1\0\1\242\2\0\2\240\1\0\1\240\3\0"+
    "\15\240\2\0\7\240\3\0\2\240\1\0\1\240\5\0"+
    "\1\240\4\0\1\241\1\0\1\242\2\0\2\240\1\0"+
    "\1\240\3\0\6\240\1\243\6\240\2\0\7\240\3\0"+
    "\2\240\1\0\1\240\5\0\1\240\4\0\1\241\1\0"+
    "\1\242\2\0\2\240\1\0\1\240\3\0\3\240\1\244"+
    "\11\240\2\0\7\240\3\0\2\240\1\0\1\240\5\0"+
    "\1\240\4\0\1\241\1\0\1\242\2\0\2\240\1\0"+
    "\1\240\3\0\12\240\1\245\2\240\2\0\1\240\1\246"+
    "\5\240\3\0\2\240\1\0\1\240\5\0\1\240\4\0"+
    "\1\241\1\0\1\242\2\0\2\240\1\0\1\240\3\0"+
    "\15\240\2\0\1\240\1\247\5\240\3\0\2\240\1\0"+
    "\1\240\5\0\1\240\4\0\1\241\1\0\1\242\2\0"+
    "\2\240\1\0\1\240\3\0\5\240\1\250\7\240\2\0"+
    "\7\240\3\0\2\240\1\0\1\240\13\0\1\251\57\0"+
    "\1\252\62\0\1\252\14\0\2\253\65\0\1\254\56\0"+
    "\2\255\75\0\1\256\6\0\1\257\37\0\2\260\41\0"+
    "\1\261\4\0\1\262\5\0\1\263\4\0\1\264\1\265"+
    "\5\263\1\266\1\263\1\267\4\263\2\0\7\263\3\0"+
    "\2\263\1\0\1\263\34\0\1\270\66\0\1\271\5\0"+
    "\1\272\47\0\1\273\74\0\1\274\42\0\2\275\76\0"+
    "\1\276\33\0\1\277\57\0\1\300\62\0\1\300\14\0"+
    "\2\301\61\0\2\302\71\0\1\303\63\0\1\304\7\0"+
    "\1\305\46\0\1\306\71\0\1\307\73\0\1\310\60\0"+
    "\1\311\36\0\1\312\76\0\1\313\63\0\1\314\61\0"+
    "\1\315\46\0\1\316\51\0\1\204\57\0\1\317\113\0"+
    "\1\320\102\0\2\321\61\0\2\322\41\0\1\323\61\0"+
    "\1\324\27\0\1\212\1\325\2\0\1\326\64\0\1\214"+
    "\54\0\1\214\3\0\1\326\1\213\4\0\2\214\1\0"+
    "\1\214\3\0\15\214\2\0\7\214\3\0\2\214\1\0"+
    "\1\214\5\0\1\215\4\0\1\327\5\0\1\330\5\0"+
    "\15\330\2\0\7\330\3\0\2\330\1\0\1\330\40\0"+
    "\1\331\27\0\1\217\1\332\2\0\1\333\64\0\1\221"+
    "\54\0\1\221\3\0\1\333\1\220\4\0\2\221\1\0"+
    "\1\221\3\0\15\221\2\0\7\221\3\0\2\221\1\0"+
    "\1\221\27\0\1\334\40\0\1\221\3\0\1\333\1\220"+
    "\4\0\2\221\1\0\1\221\3\0\1\221\1\335\13\221"+
    "\2\0\7\221\3\0\2\221\1\0\1\221\5\0\1\221"+
    "\3\0\1\333\1\220\4\0\2\221\1\0\1\221\3\0"+
    "\4\221\1\336\10\221\2\0\7\221\3\0\2\221\1\0"+
    "\1\221\5\0\1\221\3\0\1\333\1\220\4\0\2\221"+
    "\1\0\1\221\3\0\4\221\1\337\10\221\2\0\7\221"+
    "\3\0\2\221\1\0\1\221\36\0\1\340\51\0\2\341"+
    "\12\0\1\342\52\0\1\343\44\0\1\234\54\0\1\221"+
    "\2\0\1\344\1\333\1\220\4\0\2\221\1\0\1\221"+
    "\3\0\15\221\2\0\7\221\3\0\2\221\1\0\1\221"+
    "\5\0\1\221\2\0\1\344\1\333\1\220\4\0\2\221"+
    "\1\0\1\221\3\0\1\221\1\335\13\221\2\0\7\221"+
    "\3\0\2\221\1\0\1\221\5\0\1\221\2\0\1\344"+
    "\1\333\1\220\4\0\2\221\1\0\1\221\3\0\4\221"+
    "\1\336\10\221\2\0\7\221\3\0\2\221\1\0\1\221"+
    "\5\0\1\221\2\0\1\344\1\333\1\220\4\0\2\221"+
    "\1\0\1\221\3\0\4\221\1\337\10\221\2\0\7\221"+
    "\3\0\2\221\1\0\1\221\15\0\1\345\52\0\1\240"+
    "\4\0\1\241\1\0\1\242\2\0\2\240\1\0\1\240"+
    "\3\0\13\240\1\346\1\240\2\0\7\240\3\0\2\240"+
    "\1\0\1\240\5\0\1\240\4\0\1\241\1\0\1\242"+
    "\2\0\2\240\1\0\1\240\3\0\10\240\1\347\4\240"+
    "\2\0\7\240\3\0\2\240\1\0\1\240\5\0\1\240"+
    "\4\0\1\241\1\0\1\242\2\0\2\240\1\0\1\240"+
    "\2\0\1\341\1\350\12\240\1\351\1\240\2\0\7\240"+
    "\3\0\2\240\1\0\1\240\5\0\1\240\4\0\1\241"+
    "\1\0\1\242\2\0\2\240\1\0\1\240\2\0\1\352"+
    "\1\353\14\240\2\0\7\240\3\0\2\240\1\0\1\240"+
    "\5\0\1\240\4\0\1\241\1\0\1\242\2\0\2\240"+
    "\1\0\1\240\3\0\3\240\1\354\11\240\2\0\7\240"+
    "\3\0\2\240\1\0\1\240\21\0\1\355\101\0\1\356"+
    "\63\0\1\357\61\0\1\360\5\0\1\361\54\0\1\362"+
    "\27\0\1\261\1\363\2\0\1\364\64\0\1\263\54\0"+
    "\1\263\3\0\1\364\1\262\4\0\2\263\1\0\1\263"+
    "\3\0\15\263\2\0\7\263\3\0\2\263\1\0\1\263"+
    "\27\0\1\365\40\0\1\263\3\0\1\364\1\262\4\0"+
    "\2\263\1\0\1\263\3\0\1\263\1\366\13\263\2\0"+
    "\7\263\3\0\2\263\1\0\1\263\5\0\1\263\3\0"+
    "\1\364\1\262\4\0\2\263\1\0\1\263\3\0\4\263"+
    "\1\367\10\263\2\0\7\263\3\0\2\263\1\0\1\263"+
    "\5\0\1\263\3\0\1\364\1\262\4\0\2\263\1\0"+
    "\1\263\3\0\4\263\1\370\10\263\2\0\7\263\3\0"+
    "\2\263\1\0\1\263\36\0\1\371\51\0\2\372\12\0"+
    "\1\373\52\0\1\374\66\0\1\375\65\0\1\376\63\0"+
    "\1\377\42\0\1\u0100\101\0\1\u0101\62\0\1\u0102\75\0"+
    "\1\u0103\44\0\1\u0104\62\0\1\u0105\60\0\1\u0106\74\0"+
    "\1\u0107\56\0\1\u0108\67\0\1\u0109\33\0\1\u010a\62\0"+
    "\1\u010b\105\0\1\u010c\52\0\1\u010d\74\0\1\u010e\37\0"+
    "\1\u010f\76\0\1\u0110\106\0\2\u0111\31\0\1\u0112\50\0"+
    "\1\u0113\50\0\1\u0114\70\0\1\330\54\0\1\330\3\0"+
    "\1\u0115\1\327\4\0\2\330\1\0\1\330\3\0\15\330"+
    "\2\0\7\330\3\0\2\330\1\0\1\330\34\0\1\u0116"+
    "\33\0\1\u0117\105\0\1\u0118\37\0\1\221\3\0\1\333"+
    "\1\220\4\0\2\221\1\0\1\221\3\0\2\221\1\u0119"+
    "\12\221\2\0\7\221\3\0\2\221\1\0\1\221\5\0"+
    "\1\221\3\0\1\333\1\220\4\0\2\221\1\0\1\221"+
    "\3\0\5\221\1\u011a\7\221\2\0\7\221\3\0\2\221"+
    "\1\0\1\221\5\0\1\221\3\0\1\333\1\220\4\0"+
    "\2\221\1\0\1\221\3\0\12\221\1\u011b\2\221\2\0"+
    "\7\221\3\0\2\221\1\0\1\221\37\0\1\u011c\63\0"+
    "\1\u011d\64\0\1\u011e\71\0\1\u011f\32\0\1\u0120\46\0"+
    "\1\240\4\0\1\241\1\0\1\242\2\0\2\240\1\0"+
    "\1\240\3\0\7\240\1\u0121\5\240\2\0\7\240\3\0"+
    "\2\240\1\0\1\240\5\0\1\240\4\0\1\241\1\0"+
    "\1\242\2\0\2\240\1\0\1\240\3\0\11\240\1\u0122"+
    "\3\240\2\0\7\240\3\0\2\240\1\0\1\240\5\0"+
    "\1\240\4\0\1\241\1\0\1\242\2\0\2\240\1\0"+
    "\1\240\3\0\12\240\1\u0123\2\240\2\0\7\240\3\0"+
    "\2\240\1\0\1\240\5\0\1\240\4\0\1\241\1\0"+
    "\1\242\2\0\2\240\1\0\1\240\3\0\14\240\1\u0124"+
    "\2\0\7\240\3\0\2\240\1\0\1\240\36\0\1\u0125"+
    "\31\0\1\240\4\0\1\241\1\0\1\242\2\0\2\240"+
    "\1\0\1\240\3\0\10\240\1\u0126\4\240\2\0\7\240"+
    "\3\0\2\240\1\0\1\240\5\0\1\240\4\0\1\241"+
    "\1\0\1\242\2\0\2\240\1\0\1\240\3\0\15\240"+
    "\2\0\4\240\1\u0127\2\240\3\0\2\240\1\0\1\240"+
    "\12\0\1\u0128\5\0\1\u0129\5\0\15\u0129\2\0\7\u0129"+
    "\3\0\2\u0129\1\0\1\u0129\17\0\1\u012a\100\0\1\u012b"+
    "\44\0\1\u012c\65\0\1\u012d\57\0\1\u012e\50\0\1\u012f"+
    "\105\0\1\u0130\37\0\1\263\3\0\1\364\1\262\4\0"+
    "\2\263\1\0\1\263\3\0\2\263\1\u0131\12\263\2\0"+
    "\7\263\3\0\2\263\1\0\1\263\5\0\1\263\3\0"+
    "\1\364\1\262\4\0\2\263\1\0\1\263\3\0\5\263"+
    "\1\u0132\7\263\2\0\7\263\3\0\2\263\1\0\1\263"+
    "\5\0\1\263\3\0\1\364\1\262\4\0\2\263\1\0"+
    "\1\263\3\0\12\263\1\u0133\2\263\2\0\7\263\3\0"+
    "\2\263\1\0\1\263\37\0\1\u0134\63\0\1\u0135\64\0"+
    "\1\u0136\71\0\1\u0137\64\0\1\u0138\26\0\1\u0139\105\0"+
    "\1\u013a\32\0\1\u013b\5\0\1\u013c\5\0\15\u013c\2\0"+
    "\7\u013c\3\0\2\u013c\1\0\1\u013c\17\0\1\u013d\62\0"+
    "\1\u013e\75\0\1\u013f\100\0\1\u0140\50\0\1\u0141\75\0"+
    "\1\u0142\57\0\1\u0143\56\0\1\u0144\55\0\1\u0145\57\0"+
    "\1\u0146\3\0\1\u0147\2\0\1\u0148\6\0\1\u0149\1\u014a"+
    "\51\0\1\u014b\70\0\1\u014c\26\0\1\u014d\5\0\1\u014e"+
    "\5\0\15\u014e\2\0\7\u014e\3\0\2\u014e\1\0\1\u014e"+
    "\46\0\1\u014f\46\0\1\u0150\3\0\1\u0151\2\0\1\u0152"+
    "\26\0\1\u0114\3\0\1\326\113\0\1\u0153\25\0\1\u0117"+
    "\3\0\1\333\102\0\1\u0154\36\0\1\221\3\0\1\333"+
    "\1\220\4\0\2\221\1\0\1\221\3\0\3\221\1\u0155"+
    "\11\221\2\0\7\221\3\0\2\221\1\0\1\221\5\0"+
    "\1\221\3\0\1\333\1\220\4\0\2\221\1\0\1\221"+
    "\3\0\4\221\1\u0156\10\221\2\0\7\221\3\0\2\221"+
    "\1\0\1\221\5\0\1\221\3\0\1\333\1\220\4\0"+
    "\2\221\1\0\1\221\3\0\13\221\1\u0157\1\221\2\0"+
    "\7\221\3\0\2\221\1\0\1\221\42\0\1\u0158\52\0"+
    "\1\u0159\72\0\1\u015a\32\0\1\u015b\5\0\1\u015c\5\0"+
    "\15\u015c\2\0\7\u015c\3\0\2\u015c\1\0\1\u015c\5\0"+
    "\1\240\4\0\1\241\1\0\1\242\2\0\2\240\1\0"+
    "\1\240\3\0\14\240\1\u015d\2\0\7\240\3\0\2\240"+
    "\1\0\1\240\5\0\1\240\4\0\1\241\1\0\1\242"+
    "\2\0\2\240\1\0\1\240\3\0\4\240\1\u015e\10\240"+
    "\2\0\7\240\3\0\2\240\1\0\1\240\56\0\2\u015f"+
    "\10\0\1\240\4\0\1\241\1\0\1\242\2\0\2\240"+
    "\1\0\1\240\3\0\15\240\2\0\7\240\2\0\1\u015f"+
    "\1\u0160\1\240\1\0\1\240\5\0\1\240\4\0\1\241"+
    "\1\0\1\242\2\0\2\240\1\0\1\240\3\0\14\240"+
    "\1\u0161\2\0\7\240\3\0\2\240\1\0\1\240\13\0"+
    "\1\u0129\54\0\1\u0129\1\u0162\3\0\1\u0128\4\0\2\u0129"+
    "\1\355\1\u0129\3\0\15\u0129\2\0\7\u0129\3\0\2\u0129"+
    "\1\0\1\u0129\25\0\2\u0163\75\0\1\u0164\62\0\1\u0165"+
    "\70\0\1\u0166\20\0\1\u012f\3\0\1\364\102\0\1\u0167"+
    "\36\0\1\263\3\0\1\364\1\262\4\0\2\263\1\0"+
    "\1\263\3\0\3\263\1\u0168\11\263\2\0\7\263\3\0"+
    "\2\263\1\0\1\263\5\0\1\263\3\0\1\364\1\262"+
    "\4\0\2\263\1\0\1\263\3\0\4\263\1\u0169\10\263"+
    "\2\0\7\263\3\0\2\263\1\0\1\263\5\0\1\263"+
    "\3\0\1\364\1\262\4\0\2\263\1\0\1\263\3\0"+
    "\13\263\1\u016a\1\263\2\0\7\263\3\0\2\263\1\0"+
    "\1\263\42\0\1\u016b\52\0\1\u016c\72\0\1\u016d\52\0"+
    "\1\u016e\66\0\1\u016f\64\0\1\u0170\35\0\1\u013c\54\0"+
    "\1\u013c\1\u0171\3\0\1\u013b\4\0\2\u013c\1\u0100\1\u013c"+
    "\3\0\15\u013c\2\0\7\u013c\3\0\2\u013c\1\0\1\u013c"+
    "\25\0\2\u0172\104\0\1\u0173\52\0\1\u0174\54\0\1\u0175"+
    "\62\0\1\u0176\72\0\1\u0177\42\0\1\u0178\100\0\1\u0179"+
    "\53\0\1\u017a\5\0\1\u017b\55\0\1\u017c\72\0\1\u017d"+
    "\55\0\1\u017e\40\0\1\u014e\54\0\1\u014e\1\u017f\3\0"+
    "\1\u014d\4\0\2\u014e\1\u010f\1\u014e\3\0\15\u014e\2\0"+
    "\7\u014e\3\0\2\u014e\1\0\1\u014e\42\0\1\u0180\60\0"+
    "\1\u0181\60\0\1\u0182\21\0\1\u0183\27\0\2\u0184\61\0"+
    "\2\u0185\41\0\1\221\3\0\1\333\1\220\4\0\2\221"+
    "\1\0\1\221\2\0\1\u0185\1\u0186\14\221\2\0\7\221"+
    "\3\0\2\221\1\0\1\221\5\0\1\221\3\0\1\333"+
    "\1\220\4\0\2\221\1\0\1\221\3\0\10\221\1\u0187"+
    "\4\221\2\0\7\221\3\0\2\221\1\0\1\221\5\0"+
    "\1\221\3\0\1\333\1\220\4\0\2\221\1\0\1\221"+
    "\3\0\5\221\1\u0188\7\221\2\0\7\221\3\0\2\221"+
    "\1\0\1\221\35\0\1\u0189\40\0\1\u015c\54\0\1\u015c"+
    "\1\u018a\3\0\1\u015b\4\0\2\u015c\1\u0120\1\u015c\3\0"+
    "\15\u015c\2\0\7\u015c\3\0\2\u015c\1\0\1\u015c\5\0"+
    "\1\240\4\0\1\241\1\0\1\242\2\0\2\240\1\0"+
    "\1\240\3\0\7\240\1\u018b\5\240\2\0\7\240\3\0"+
    "\2\240\1\0\1\240\12\0\1\u018c\5\0\1\u018d\5\0"+
    "\15\u018d\2\0\7\u018d\3\0\2\u018d\1\0\1\u018d\45\0"+
    "\1\u018e\52\0\1\u018f\52\0\2\u0190\61\0\2\u0191\41\0"+
    "\1\263\3\0\1\364\1\262\4\0\2\263\1\0\1\263"+
    "\2\0\1\u0191\1\u0192\14\263\2\0\7\263\3\0\2\263"+
    "\1\0\1\263\5\0\1\263\3\0\1\364\1\262\4\0"+
    "\2\263\1\0\1\263\3\0\10\263\1\u0193\4\263\2\0"+
    "\7\263\3\0\2\263\1\0\1\263\5\0\1\263\3\0"+
    "\1\364\1\262\4\0\2\263\1\0\1\263\3\0\5\263"+
    "\1\u0194\7\263\2\0\7\263\3\0\2\263\1\0\1\263"+
    "\35\0\1\u0195\65\0\1\u0196\63\0\1\u0197\6\0\1\u0198"+
    "\24\0\1\u0199\5\0\1\u019a\5\0\15\u019a\2\0\7\u019a"+
    "\3\0\2\u019a\1\0\1\u019a\45\0\1\u019b\57\0\1\u019c"+
    "\47\0\1\u019d\70\0\1\u019e\73\0\1\u019f\46\0\1\u01a0"+
    "\71\0\1\u01a1\73\0\1\u01a2\51\0\1\u01a3\61\0\1\u01a4"+
    "\34\0\1\u01a5\5\0\1\u01a6\5\0\15\u01a6\2\0\7\u01a6"+
    "\3\0\2\u01a6\1\0\1\u01a6\36\0\1\u01a7\105\0\2\u01a8"+
    "\61\0\2\u01a9\41\0\1\u01aa\53\0\1\u01ab\35\0\1\221"+
    "\3\0\1\333\1\220\4\0\2\221\1\0\1\221\3\0"+
    "\4\221\1\u01ac\10\221\2\0\7\221\3\0\2\221\1\0"+
    "\1\221\5\0\1\221\3\0\1\333\1\220\4\0\2\221"+
    "\1\0\1\221\3\0\11\221\1\u01ad\3\221\2\0\7\221"+
    "\3\0\2\221\1\0\1\221\5\0\1\221\3\0\1\333"+
    "\1\220\4\0\2\221\1\0\1\221\3\0\7\221\1\u01ae"+
    "\5\221\2\0\7\221\3\0\2\221\1\0\1\221\34\0"+
    "\1\u01af\40\0\1\u01b0\5\0\1\u01b1\5\0\15\u01b1\2\0"+
    "\7\u01b1\3\0\2\u01b1\1\0\1\u01b1\5\0\1\240\4\0"+
    "\1\241\1\0\1\242\2\0\2\240\1\0\1\240\3\0"+
    "\6\240\1\u01b2\6\240\2\0\7\240\3\0\2\240\1\0"+
    "\1\240\13\0\1\u018d\54\0\1\u018d\4\0\1\u018c\4\0"+
    "\2\u018d\1\0\1\u018d\3\0\15\u018d\2\0\7\u018d\3\0"+
    "\2\u018d\1\0\1\u018d\35\0\1\u01b3\75\0\1\u01b4\60\0"+
    "\1\u01b5\46\0\1\u01b6\35\0\1\263\3\0\1\364\1\262"+
    "\4\0\2\263\1\0\1\263\3\0\4\263\1\u01b7\10\263"+
    "\2\0\7\263\3\0\2\263\1\0\1\263\5\0\1\263"+
    "\3\0\1\364\1\262\4\0\2\263\1\0\1\263\3\0"+
    "\11\263\1\u01b8\3\263\2\0\7\263\3\0\2\263\1\0"+
    "\1\263\5\0\1\263\3\0\1\364\1\262\4\0\2\263"+
    "\1\0\1\263\3\0\7\263\1\u01b9\5\263\2\0\7\263"+
    "\3\0\2\263\1\0\1\263\34\0\1\u01ba\41\0\1\u019a"+
    "\54\0\1\u019a\4\0\1\u0199\4\0\2\u019a\1\0\1\u019a"+
    "\3\0\15\u019a\2\0\7\u019a\3\0\2\u019a\1\0\1\u019a"+
    "\35\0\1\u01bb\66\0\1\u01bc\56\0\1\u01bd\62\0\1\u01be"+
    "\60\0\1\u01bf\74\0\1\u01c0\56\0\1\u01c1\63\0\1\u01c2"+
    "\52\0\1\u01c3\43\0\1\u01a6\54\0\1\u01a6\3\0\1\u01c4"+
    "\1\u01a5\4\0\2\u01a6\1\0\1\u01a6\3\0\15\u01a6\2\0"+
    "\7\u01a6\3\0\2\u01a6\1\0\1\u01a6\35\0\1\u01c5\106\0"+
    "\2\u01c6\31\0\1\u01c7\64\0\1\u01c8\34\0\1\221\3\0"+
    "\1\333\1\220\4\0\2\221\1\0\1\221\3\0\5\221"+
    "\1\u01c9\7\221\2\0\7\221\3\0\2\221\1\0\1\221"+
    "\5\0\1\221\3\0\1\333\1\220\4\0\2\221\1\0"+
    "\1\221\3\0\7\221\1\u01ca\5\221\2\0\7\221\3\0"+
    "\2\221\1\0\1\221\5\0\1\221\3\0\1\333\1\220"+
    "\4\0\2\221\1\0\1\221\3\0\6\221\1\u01cb\6\221"+
    "\2\0\7\221\3\0\2\221\1\0\1\221\42\0\1\u01cc"+
    "\33\0\1\u01b1\54\0\1\u01b1\3\0\1\u01cd\1\u01b0\4\0"+
    "\2\u01b1\1\0\1\u01b1\3\0\15\u01b1\2\0\7\u01b1\3\0"+
    "\2\u01b1\1\0\1\u01b1\5\0\1\240\4\0\1\241\1\0"+
    "\1\242\2\0\2\240\1\0\1\240\3\0\14\240\1\u01ce"+
    "\2\0\7\240\3\0\2\240\1\0\1\240\53\0\1\u01cf"+
    "\55\0\1\u01d0\36\0\1\u01d1\73\0\1\u01d2\34\0\1\263"+
    "\3\0\1\364\1\262\4\0\2\263\1\0\1\263\3\0"+
    "\5\263\1\u01d3\7\263\2\0\7\263\3\0\2\263\1\0"+
    "\1\263\5\0\1\263\3\0\1\364\1\262\4\0\2\263"+
    "\1\0\1\263\3\0\7\263\1\u01d4\5\263\2\0\7\263"+
    "\3\0\2\263\1\0\1\263\5\0\1\263\3\0\1\364"+
    "\1\262\4\0\2\263\1\0\1\263\3\0\6\263\1\u01d5"+
    "\6\263\2\0\7\263\3\0\2\263\1\0\1\263\42\0"+
    "\1\u01d6\73\0\1\u01d7\51\0\1\u01d8\54\0\1\u01d9\64\0"+
    "\1\u01da\75\0\1\u01db\57\0\1\u01dc\56\0\1\u01dd\60\0"+
    "\1\u01de\70\0\1\u01df\64\0\1\u01e0\60\0\1\u01e1\50\0"+
    "\1\u01e2\33\0\1\221\3\0\1\333\1\220\4\0\2\221"+
    "\1\0\1\221\3\0\6\221\1\u01ad\6\221\2\0\7\221"+
    "\3\0\2\221\1\0\1\221\5\0\1\221\3\0\1\u01e3"+
    "\1\220\4\0\2\221\1\0\1\221\3\0\15\221\2\0"+
    "\7\221\3\0\2\221\1\0\1\221\5\0\1\221\3\0"+
    "\1\333\1\220\4\0\2\221\1\0\1\221\3\0\14\221"+
    "\1\u01ca\2\0\7\221\3\0\2\221\1\0\1\221\32\0"+
    "\1\u01e4\65\0\1\u01e5\66\0\1\u01e6\55\0\1\u01e7\33\0"+
    "\1\263\3\0\1\364\1\262\4\0\2\263\1\0\1\263"+
    "\3\0\6\263\1\u01b8\6\263\2\0\7\263\3\0\2\263"+
    "\1\0\1\263\5\0\1\263\3\0\1\u01e8\1\262\4\0"+
    "\2\263\1\0\1\263\3\0\15\263\2\0\7\263\3\0"+
    "\2\263\1\0\1\263\5\0\1\263\3\0\1\364\1\262"+
    "\4\0\2\263\1\0\1\263\3\0\14\263\1\u01d4\2\0"+
    "\7\263\3\0\2\263\1\0\1\263\32\0\1\u01e9\70\0"+
    "\1\u01ea\64\0\1\u01eb\52\0\1\u01ec\72\0\1\u01ed\42\0"+
    "\1\u01ee\72\0\1\u01ef\72\0\1\u01f0\55\0\1\u01f1\65\0"+
    "\1\u01f2\57\0\1\u01f3\65\0\1\u01f4\57\0\1\u01f5\54\0"+
    "\1\u01f6\44\0\1\u01e3\62\0\1\u01e8\106\0\1\u01f7\61\0"+
    "\1\u01f8\70\0\1\u01f9\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19941];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\34\0\3\11\5\1\1\11\3\1\2\11\1\1\2\11"+
    "\4\1\2\11\1\1\2\11\1\1\1\11\1\1\4\11"+
    "\3\1\1\11\1\1\2\11\1\1\2\11\7\1\1\11"+
    "\3\1\1\11\1\1\1\11\1\1\4\11\1\1\1\11"+
    "\1\1\1\11\4\1\1\11\1\1\3\11\1\1\1\11"+
    "\2\1\3\11\2\1\2\11\1\1\2\11\1\1\1\11"+
    "\36\0\1\11\3\0\1\11\10\0\1\1\12\0\2\11"+
    "\10\0\1\11\31\0\1\11\3\0\1\11\4\0\1\11"+
    "\11\0\1\11\16\0\1\11\25\0\1\11\3\0\1\11"+
    "\1\0\2\11\3\0\1\11\10\0\1\11\2\0\1\1"+
    "\2\0\1\1\6\0\1\11\12\0\1\11\14\0\1\11"+
    "\1\1\1\11\5\0\2\11\6\0\1\11\4\0\1\11"+
    "\1\0\1\11\2\0\1\1\1\0\1\11\2\1\3\0"+
    "\1\11\5\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\2\11\10\0\1\11\14\0\1\1\10\0"+
    "\3\11\1\0\1\1\3\0\1\11\12\0\1\11\32\0"+
    "\1\11\1\0\1\11\5\0\2\11\1\1\7\0\1\11"+
    "\5\0\1\11\1\1\2\11\3\0\1\11\1\0\2\11"+
    "\1\0\1\11\1\0\4\11\2\0\1\11\1\0\1\11"+
    "\1\0\2\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[505];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public static String urlAuxliar="";
	public static Boolean fin=false;
	public static String txt_temporal="";
	public static int linea=0;
	public static int columna=0;



    public static int flagInicio = 0;
    public String cadena = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(simbolos.EOF,new String("Fin del archivo"));
    /*({letra}":"("\\"({linea})+)+)*/
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
			Errores errorLexico=new Errores();
			errorLexico.setTipo("Lexico");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion("Caracter Ilegal: "+yytext());
			Interfaz.erroresLexicos.add(errorLexico);
			//Proyecto1_Compiladores.listaLexico.add(errorLexico);
			//Menu.listaLexico=Proyecto1_Compiladores.listaLexico;
            }
          case 110: break;
          case 2: 
            { System.out.println("Salto de linea");
            }
          case 111: break;
          case 3: 
            { yychar=0;
            }
          case 112: break;
          case 4: 
            { cadena = "";
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : Menor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        System.out.println("*****************************************************************");
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 113: break;
          case 5: 
            { cadena = "";
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 114: break;
          case 6: 
            { System.out.print(yytext());
            }
          case 115: break;
          case 7: 
            { 
            }
          case 116: break;
          case 8: 
            { yybegin(ENCABEZADO2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 117: break;
          case 9: 
            { cadena = "";
            }
          case 118: break;
          case 10: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : Menor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
       
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 119: break;
          case 11: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);


        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 120: break;
          case 12: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("asignacion");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("= : Asignacion");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                
        Interfaz.tablaSimbolos_.add(simbolo);
             
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.asignacion, yychar, yyline, yytext());
            }
          case 121: break;
          case 13: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("puntoComa");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("; : Punto coma");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
            
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.puntoComa, yychar, yyline, yytext());
            }
          case 122: break;
          case 14: 
            { yybegin(YYINITIAL);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 123: break;
          case 15: 
            { yybegin(TITULO2);                           
        System.out.println("Saltar a estado TITULO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 124: break;
          case 16: 
            { cadena  = cadena + yytext();
            }
          case 125: break;
          case 17: 
            { if(!yytext().equals("<"))
        {
            cadena  = cadena + yytext();
            //System.out.println(cadena);
        }
        else 
        {

            //cadena = cadena + yytext();
            
            yybegin(ENCABEZADO2);
            Interfaz.auxContador++;                                
            //Generamos la entrada en la tabla de simbolos.
            tablaSimbolos simbolo=new tablaSimbolos();
            simbolo.setTipo("cadena");
            simbolo.setLinea(yyline);
            simbolo.setColumna(yychar);
            simbolo.setDescripcion("Cadena : cadena de texto");
            simbolo.setIndex(Interfaz.auxContador);
            simbolo.setValor(cadena);                 
            Interfaz.tablaSimbolos_.add(simbolo);
            yypushback(1);	                
            return new Symbol(simbolos.cadena, yychar, yyline, cadena); 

        }
            }
          case 126: break;
          case 18: 
            { yybegin(ENCABEZADO2);  
        System.out.println("----------------------------------------------Saliendo de titulo3");                         
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : Menor que titulo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 127: break;
          case 19: 
            { yybegin(YYINITIAL);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 128: break;
          case 20: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("asignacion");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("= : Asignacion");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                
        Interfaz.tablaSimbolos_.add(simbolo);
                             
        return new Symbol(simbolos.asignacion, yychar, yyline, yytext());
            }
          case 129: break;
          case 21: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("puntoComa");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("; : Punto coma");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                    
        return new Symbol(simbolos.puntoComa, yychar, yyline, yytext());
            }
          case 130: break;
          case 22: 
            { yybegin(TEXTO2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 131: break;
          case 23: 
            { if(!yytext().equals("<"))
        {
            cadena  = cadena + yytext();
            //System.out.println(cadena);
        }
        else 
        {

            //cadena = cadena + yytext();
            
            yybegin(YYINITIAL);
            Interfaz.auxContador++;                                
            //Generamos la entrada en la tabla de simbolos.
            tablaSimbolos simbolo=new tablaSimbolos();
            simbolo.setTipo("cadena");
            simbolo.setLinea(yyline);
            simbolo.setColumna(yychar);
            simbolo.setDescripcion("Cadena : cadena de texto");
            simbolo.setIndex(Interfaz.auxContador);
            simbolo.setValor(cadena);                 
            Interfaz.tablaSimbolos_.add(simbolo);
            yypushback(1);	                
            return new Symbol(simbolos.cadena, yychar, yyline, cadena); 

        }
            }
          case 132: break;
          case 24: 
            { yybegin(IMAGEN2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 133: break;
          case 25: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : MenorQue fin Imagen");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 134: break;
          case 26: 
            { yybegin(BOTON2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 135: break;
          case 27: 
            { yybegin(ENLACE2);                           
        System.out.println("Saltar a estado ENLACE2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 136: break;
          case 28: 
            { yybegin(T2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 137: break;
          case 29: 
            { cadena = "";
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : Menor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 138: break;
          case 30: 
            { cadena = "";
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        System.out.println("*****************************************************************");
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 139: break;
          case 31: 
            { yybegin(T4);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 140: break;
          case 32: 
            { cadena = "";
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que T4");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	        
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 141: break;
          case 33: 
            { yybegin(T6);                           
        System.out.println("Saltar a T6");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que T5");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 142: break;
          case 34: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("asignacion");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("= : Asignacion T5");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                
        Interfaz.tablaSimbolos_.add(simbolo);
                             
        return new Symbol(simbolos.asignacion, yychar, yyline, yytext());
            }
          case 143: break;
          case 35: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("puntoComa");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("; : Punto coma T5");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                    
        return new Symbol(simbolos.puntoComa, yychar, yyline, yytext());
            }
          case 144: break;
          case 36: 
            { if(!yytext().equals("<"))
        {
            cadena  = cadena + yytext();
            //System.out.println(cadena);
        }
        else 
        {

            //cadena = cadena + yytext();
            
            yybegin(T7);
            Interfaz.auxContador++;                                
            //Generamos la entrada en la tabla de simbolos.
            tablaSimbolos simbolo=new tablaSimbolos();
            simbolo.setTipo("cadena");
            simbolo.setLinea(yyline);
            simbolo.setColumna(yychar);
            simbolo.setDescripcion("Cadena : cadena de texto");
            simbolo.setIndex(Interfaz.auxContador);
            simbolo.setValor(cadena);                 
            Interfaz.tablaSimbolos_.add(simbolo);
            yypushback(1);	                
            return new Symbol(simbolos.cadena, yychar, yyline, cadena); 

        }
            }
          case 145: break;
          case 37: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : MenorQue T7");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 146: break;
          case 38: 
            { yybegin(TB2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 147: break;
          case 39: 
            { if(!yytext().equals("<"))
        {
            cadena  = cadena + yytext();
            //System.out.println(cadena);
        }
        else 
        {

            //cadena = cadena + yytext();
            
            yybegin(TB3);
            Interfaz.auxContador++;                                
            //Generamos la entrada en la tabla de simbolos.
            tablaSimbolos simbolo=new tablaSimbolos();
            simbolo.setTipo("cadena");
            simbolo.setLinea(yyline);
            simbolo.setColumna(yychar);
            simbolo.setDescripcion("Cadena : cadena de texto");
            simbolo.setIndex(Interfaz.auxContador);
            simbolo.setValor(cadena);                 
            Interfaz.tablaSimbolos_.add(simbolo);
            yypushback(1);	                
            return new Symbol(simbolos.cadena, yychar, yyline, cadena); 

        }
            }
          case 148: break;
          case 40: 
            { yybegin(TI2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 149: break;
          case 41: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : MenorQue inicio TI2");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 150: break;
          case 42: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : mayorQue fin Imagen TI2");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        yybegin(T6);                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 151: break;
          case 43: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("menorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("< : MenorQue inicio TB3");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.menorQue, yychar, yyline, yytext());
            }
          case 152: break;
          case 44: 
            { yybegin(T6);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que TB3");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 153: break;
          case 45: 
            { yybegin(TA2);                           
        System.out.println("Saltar a estado ENCABEZADO2");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("mayorQue");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("> : Mayor que");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	                
        return new Symbol(simbolos.mayorQue, yychar, yyline, yytext());
            }
          case 154: break;
          case 46: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id Ccss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id : Identificador grupo ccss");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.idCcss, yychar, yyline, yytext());
            }
          case 155: break;
          case 47: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id Ccss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id : Identificador grupo ccss");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                            
        return new Symbol(simbolos.idCcss, yychar, yyline, yytext());
            }
          case 156: break;
          case 48: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ct");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ct: Inicio Celda");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(T5);    
        System.out.println("SALTAR A T5");                                
        return new Symbol(simbolos.inicioCelda, yychar, yyline, yytext());
            }
          case 157: break;
          case 49: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("cb");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("cb: Inicio Celda cabecera");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(T5);   
        System.out.println("SALTAR A T5");
        return new Symbol(simbolos.inicioCeldaCabecera, yychar, yyline, yytext());
            }
          case 158: break;
          case 50: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id Ccss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id : Identificador grupo ccss T5");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                            
        return new Symbol(simbolos.idCcss, yychar, yyline, yytext());
            }
          case 159: break;
          case 51: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("inicioCjs");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("CJS : Inicio etiqueta CJS");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
              
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.inicioCjs, yychar, yyline, yytext());
            }
          case 160: break;
          case 52: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id: Posible nombre de color.");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.id, yychar, yyline, yytext());
            }
          case 161: break;
          case 53: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id: Posible nombre de color.");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);

        return new Symbol(simbolos.id, yychar, yyline, yytext());
            }
          case 162: break;
          case 54: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("metodo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("metodo : Llamada a metodo");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.metodo, yychar, yyline, yytext());
            }
          case 163: break;
          case 55: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("id");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("id: Posible nombre de color. T5");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);

        return new Symbol(simbolos.id, yychar, yyline, yytext());
            }
          case 164: break;
          case 56: 
            { yybegin(COMENTARIO);
            }
          case 165: break;
          case 57: 
            { yybegin(YYINITIAL);
            }
          case 166: break;
          case 58: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ruta");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ruta : Declaración ruta archivo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.ruta, yychar, yyline, yytext());
            }
          case 167: break;
          case 59: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("inicioCcss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("CCSS : Inicio etiqueta CCSS");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
              
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.inicioCcss, yychar, yyline, yytext());
            }
          case 168: break;
          case 60: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("rgb");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("rgb: Posible nombre de color.");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.rgb, yychar, yyline, yytext());
            }
          case 169: break;
          case 61: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("alto");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("alto : Altura objeto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.alto, yychar, yyline, yytext());
            }
          case 170: break;
          case 62: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ruta");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ruta : Declaración ruta archivo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        return new Symbol(simbolos.ruta, yychar, yyline, yytext());
            }
          case 171: break;
          case 63: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("alto");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("alto : Altura objeto T5");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.alto, yychar, yyline, yytext());
            }
          case 172: break;
          case 64: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("inicioChtml");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("CHTML : Inicio Documento");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        return new Symbol(simbolos.inicioChtml, yychar, yyline, yytext());
            }
          case 173: break;
          case 65: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("texto");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("texto: Inicio texto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(TEXTO1);                            
        return new Symbol(simbolos.inicioTexto, yychar, yyline, yytext());
            }
          case 174: break;
          case 66: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("tabla");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("tabla: Inicio tabla");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(T1);                                    
        return new Symbol(simbolos.inicioTabla, yychar, yyline, yytext());
            }
          case 175: break;
          case 67: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("boton");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("boton: Inicio boton");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(BOTON1);                                    
        return new Symbol(simbolos.inicioBoton, yychar, yyline, yytext());
            }
          case 176: break;
          case 68: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("inicioPanel");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("panel: Declaracion panel");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        yybegin(ELEMENTOS);        
        return new Symbol(simbolos.inicioPanel, yychar, yyline, yytext());
            }
          case 177: break;
          case 69: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fondo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fondo : declaracion fondo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
       
        return new Symbol(simbolos.fondo, yychar, yyline, yytext());
            }
          case 178: break;
          case 70: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ancho");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ancho : Anchura objeto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.ancho, yychar, yyline, yytext());
            }
          case 179: break;
          case 71: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("grupo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("grupo : grupo ccss");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.grupo, yychar, yyline, yytext());
            }
          case 180: break;
          case 72: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("click");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("click : Evento Click");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                            
        return new Symbol(simbolos.click, yychar, yyline, yytext());
            }
          case 181: break;
          case 73: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fil_t");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fil_t: Inicio fila");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo); 
        yybegin(T3);                                
        return new Symbol(simbolos.inicioFila, yychar, yyline, yytext());
            }
          case 182: break;
          case 74: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("ancho");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("ancho : Anchura objeto T5");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.ancho, yychar, yyline, yytext());
            }
          case 183: break;
          case 75: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("grupo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("grupo : grupo ccss T5");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.grupo, yychar, yyline, yytext());
            }
          case 184: break;
          case 76: 
            { cadena="";
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("boton");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("boton : Inicio boton");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);    
        yybegin(TB);                        
        return new Symbol(simbolos.inicioBoton, yychar, yyline, yytext());
            }
          case 185: break;
          case 77: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("imagen");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("imagen: Inicio imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(IMAGEN1);                                    
        return new Symbol(simbolos.inicioImagen, yychar, yyline, yytext());
            }
          case 186: break;
          case 78: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("enlace");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("enlace: Inicio enlace");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(ENLACE1);                                    
        return new Symbol(simbolos.inicioEnlace, yychar, yyline, yytext());
            }
          case 187: break;
          case 79: 
            { yybegin(CUERPO);
        System.out.println("Saltar a estado CUERPO");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("cuerpo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("cuerpo : Inicio cuerpo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.inicioCuerpo, yychar, yyline, yytext());
            }
          case 188: break;
          case 80: 
            { yybegin(TITULO1);
        System.out.println("Saltar a estado CUERPO");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("titulo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("titulo : Inicio titulo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.inicioTitulo, yychar, yyline, yytext());
            }
          case 189: break;
          case 81: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("path");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("path : Direccion a imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                          
        return new Symbol(simbolos.path, yychar, yyline, yytext());
            }
          case 190: break;
          case 82: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("imagen");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("imagen : Inicio imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);    
        yybegin(TI);
        cadena="";                        
        return new Symbol(simbolos.inicioImagen, yychar, yyline, yytext());
            }
          case 191: break;
          case 83: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCeldaCabecera");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("finCeldaCabecera : Fin cabecera");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);    
        yybegin(T4);  
        System.out.println("SALTAR A T4");                               
        return new Symbol(simbolos.finCelda, yychar, yyline, yytext());
            }
          case 192: break;
          case 84: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCelda");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("finCelda : Fin Celda");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(T4);       
        System.out.println("SALTAR A T4");                           
        return new Symbol(simbolos.finCeldaCabecera, yychar, yyline, yytext());
            }
          case 193: break;
          case 85: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("path");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("path : Direccion a imagen TI2");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                          
        return new Symbol(simbolos.path, yychar, yyline, yytext());
            }
          case 194: break;
          case 86: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("inicioCajaArea");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("inicioCajaArea: Inicio caja area de texto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
        yybegin(TA1);                                    
        return new Symbol(simbolos.inicioCajaArea, yychar, yyline, yytext());
            }
          case 195: break;
          case 87: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCjs");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-cjs : finCJs");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
             
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.finCjs, yychar, yyline, yytext());
            }
          case 196: break;
          case 88: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("pathComillas");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("Path: Ruta a archivo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
               
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.pathComillas, yychar, yyline, yytext());
            }
          case 197: break;
          case 89: 
            { Interfaz.auxContador++;
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCcss");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-CCSS : fin etiqueta CCSS");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
             
        
        //Nos movemos al estado auxiliar para declaracion cjs
        return new Symbol(simbolos.finCcss, yychar, yyline, yytext());
            }
          case 198: break;
          case 90: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("alineado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("alineado : Alineación objeto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.alineado, yychar, yyline, yytext());
            }
          case 199: break;
          case 91: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("path");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("path : Direccion a imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.pathComillas, yychar, yyline, yytext());
            }
          case 200: break;
          case 92: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("alineado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("alineado : Alineación objeto T5");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.alineado, yychar, yyline, yytext());
            }
          case 201: break;
          case 93: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("finChtml");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("FIN-CHTML : Fin Documento");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        return new Symbol(simbolos.finChtml, yychar, yyline, yytext());
            }
          case 202: break;
          case 94: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-texto");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-texto: Fin texto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                    
        return new Symbol(simbolos.finTexto, yychar, yyline, yytext());
            }
          case 203: break;
          case 95: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-boton");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-boton: Fin boton");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                 
        return new Symbol(simbolos.finBoton, yychar, yyline, yytext());
            }
          case 204: break;
          case 96: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finPanel");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-panel: Cierre panel");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                          
        return new Symbol(simbolos.finPanel, yychar, yyline, yytext());
            }
          case 205: break;
          case 97: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("valorAlineado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("valorAlineado : Alineación");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.valorAlineado, yychar, yyline, yytext());
            }
          case 206: break;
          case 98: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-tabla");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-tabla: Fin tabla");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);  
        yybegin(YYINITIAL);
        return new Symbol(simbolos.finTabla, yychar, yyline, yytext());
            }
          case 207: break;
          case 99: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fin-fil_t");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-fil_t : Fin Fila");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);   
        yybegin(T2);     	        
        return new Symbol(simbolos.finFila, yychar, yyline, yytext());
            }
          case 208: break;
          case 100: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("valorAlineado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("valorAlineado : Alineación T5");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);
                            
        return new Symbol(simbolos.valorAlineado, yychar, yyline, yytext());
            }
          case 209: break;
          case 101: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-boton");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-boton: Fin boton TB3");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);            
        return new Symbol(simbolos.finBoton, yychar, yyline, yytext());
            }
          case 210: break;
          case 102: 
            { yybegin(ENCABEZADO1);
        System.out.println("Saltar a estado ENCABEZADO1");
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("inicioEncabezado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("encabezado : Inicio encabezado");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.inicioEncabezado, yychar, yyline, yytext());
            }
          case 211: break;
          case 103: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-enlace");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-enlace: Fin enlace");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                 
        return new Symbol(simbolos.finEnlace, yychar, yyline, yytext());
            }
          case 212: break;
          case 104: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fin-cuerpo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-cuerpo : Fin cuerpo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.finCuerpo, yychar, yyline, yytext());
            }
          case 213: break;
          case 105: 
            { Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("fin-titulo");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-titulo : Fin titulo");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);        	        
        return new Symbol(simbolos.finTitulo, yychar, yyline, yytext());
            }
          case 214: break;
          case 106: 
            { yybegin(YYINITIAL); 
        //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-imagen");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-imagen: Fin imagen");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                    
        return new Symbol(simbolos.finImagen, yychar, yyline, yytext());
            }
          case 215: break;
          case 107: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("fin-imagen");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("fin-imagen: Fin imagen TI2");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                    
        return new Symbol(simbolos.finImagen, yychar, yyline, yytext());
            }
          case 216: break;
          case 108: 
            { //Generamos la entrada en la tabla de simbolos
        tablaSimbolos simbolo = new tablaSimbolos();
        simbolo.setTipo("finCajaArea");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("finCajaArea: Fin caja area de texto");
        simbolo.setIndex(Interfaz.auxContador++);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);                                           
        return new Symbol(simbolos.finCajaArea, yychar, yyline, yytext());
            }
          case 217: break;
          case 109: 
            { yybegin(YYINITIAL);
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo("finEncabezado");
        simbolo.setLinea(yyline);
        simbolo.setColumna(yychar);
        simbolo.setDescripcion("FIN-ENCABEZADO : Fin Encabezado");
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(yytext());                 
        Interfaz.tablaSimbolos_.add(simbolo);	
        
        return new Symbol(simbolos.finEncabezado, yychar, yyline, yytext());
            }
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
