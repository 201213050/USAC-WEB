
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 20 12:30:36 CST 2018
//----------------------------------------------------

package Source.CHTML;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.PrintWriter;
import Principal.Interfaz.*;
import Principal.Errores;
import Principal.Interfaz;
import Principal.tablaSimbolos;
import Source.CHTML.nodoChtml;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 20 12:30:36 CST 2018
  */
public class sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\006\000\002\015" +
    "\005\000\002\016\005\000\002\003\005\000\002\017\005" +
    "\000\002\020\005\000\002\014\004\000\002\010\004\000" +
    "\002\010\002\000\002\013\003\000\002\013\003\000\002" +
    "\012\014\000\002\011\014\000\002\007\011\000\002\005" +
    "\012\000\002\005\011\000\002\005\011\000\002\005\010" +
    "\000\002\006\006\000\002\006\006\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\021\012\000\002\021\011\000\002\021\011" +
    "\000\002\021\010\000\002\023\003\000\002\024\004\000" +
    "\002\024\003\000\002\022\006\000\002\022\006\000\002" +
    "\022\006\000\002\022\006\000\002\022\006\000\002\033" +
    "\012\000\002\033\011\000\002\035\011\000\002\035\010" +
    "\000\002\035\012\000\002\035\011\000\002\042\012\000" +
    "\002\030\003\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\036\003\000\002\037\004\000\002\037\004" +
    "\000\002\037\003\000\002\037\003\000\002\040\006\000" +
    "\002\041\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\004\006\001\002\000\004\004\014\001" +
    "\002\000\004\002\011\001\002\000\004\006\007\001\002" +
    "\000\004\005\010\001\002\000\004\004\uffff\001\002\000" +
    "\004\002\001\001\002\000\004\004\ufff8\001\002\000\004" +
    "\004\017\001\002\000\004\010\015\001\002\000\004\005" +
    "\016\001\002\000\004\004\ufffc\001\002\000\004\022\025" +
    "\001\002\000\004\004\021\001\002\000\004\007\023\001" +
    "\002\000\004\002\000\001\002\000\004\005\024\001\002" +
    "\000\004\002\ufffe\001\002\000\006\005\030\024\027\001" +
    "\002\000\004\005\217\001\002\000\004\013\212\001\002" +
    "\000\004\004\036\001\002\000\004\004\uffe7\001\002\000" +
    "\004\004\207\001\002\000\004\004\uffe5\001\002\000\004" +
    "\004\uffe8\001\002\000\004\004\uffe6\001\002\000\014\023" +
    "\037\032\043\042\041\045\040\051\042\001\002\000\004" +
    "\005\206\001\002\000\010\005\161\012\121\047\126\001" +
    "\002\000\016\005\146\033\050\034\053\035\054\036\046" +
    "\037\052\001\002\000\020\012\121\033\050\034\053\035" +
    "\054\036\046\037\052\047\126\001\002\000\016\005\047" +
    "\033\050\034\053\035\054\036\046\037\052\001\002\000" +
    "\004\005\110\001\002\000\016\005\uffe0\033\050\034\053" +
    "\035\054\036\046\037\052\001\002\000\004\013\104\001" +
    "\002\000\004\004\072\001\002\000\004\013\066\001\002" +
    "\000\016\005\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\001\002\000\004\013\063\001\002\000\004\013\060" +
    "\001\002\000\004\013\055\001\002\000\004\026\056\001" +
    "\002\000\004\015\057\001\002\000\022\005\uffdb\012\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\047\uffdb\001" +
    "\002\000\004\026\061\001\002\000\004\015\062\001\002" +
    "\000\022\005\uffdc\012\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\047\uffdc\001\002\000\004\040\064\001\002" +
    "\000\004\015\065\001\002\000\022\005\uffd9\012\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\047\uffd9\001\002" +
    "\000\004\026\067\001\002\000\004\015\070\001\002\000" +
    "\022\005\uffdd\012\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\047\uffdd\001\002\000\004\004\101\001\002\000" +
    "\014\032\043\041\073\042\041\045\040\051\042\001\002" +
    "\000\004\005\074\001\002\000\004\004\uffe1\001\002\000" +
    "\004\004\uffeb\001\002\000\004\004\uffec\001\002\000\004" +
    "\004\uffe9\001\002\000\004\004\uffea\001\002\000\014\032" +
    "\043\041\102\042\041\045\040\051\042\001\002\000\004" +
    "\005\103\001\002\000\004\004\uffe2\001\002\000\004\026" +
    "\105\001\002\000\004\015\106\001\002\000\022\005\uffda" +
    "\012\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\047" +
    "\uffda\001\002\000\016\005\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\001\002\000\004\004\112\001\002\000" +
    "\004\004\115\001\002\000\014\032\043\041\113\042\041" +
    "\045\040\051\042\001\002\000\004\005\114\001\002\000" +
    "\004\004\uffe3\001\002\000\014\032\043\041\116\042\041" +
    "\045\040\051\042\001\002\000\004\005\117\001\002\000" +
    "\004\004\uffe4\001\002\000\022\005\uffcc\012\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\047\uffcc\001\002\000" +
    "\004\013\142\001\002\000\004\005\135\001\002\000\022" +
    "\005\uffcb\012\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\047\uffcb\001\002\000\022\005\uffcd\012\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\047\uffcd\001\002\000" +
    "\022\005\uffd1\012\121\033\050\034\053\035\054\036\046" +
    "\037\052\047\126\001\002\000\004\013\127\001\002\000" +
    "\004\046\130\001\002\000\004\015\131\001\002\000\022" +
    "\005\uffc5\012\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\047\uffc5\001\002\000\022\005\uffcf\012\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\047\uffcf\001\002\000" +
    "\022\005\uffce\012\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\047\uffce\001\002\000\022\005\uffd0\012\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\047\uffd0\001\002" +
    "\000\004\031\136\001\002\000\004\004\137\001\002\000" +
    "\004\052\140\001\002\000\004\005\141\001\002\000\004" +
    "\004\uffd2\001\002\000\004\014\143\001\002\000\004\015" +
    "\144\001\002\000\022\005\uffc4\012\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\047\uffc4\001\002\000\004\005" +
    "\153\001\002\000\004\031\147\001\002\000\004\004\150" +
    "\001\002\000\004\043\151\001\002\000\004\005\152\001" +
    "\002\000\004\004\uffd7\001\002\000\004\031\154\001\002" +
    "\000\004\004\155\001\002\000\004\043\156\001\002\000" +
    "\004\005\157\001\002\000\004\004\uffd8\001\002\000\010" +
    "\005\uffc6\012\uffc6\047\uffc6\001\002\000\006\004\177\050" +
    "\200\001\002\000\010\005\uffc7\012\uffc7\047\uffc7\001\002" +
    "\000\010\005\uffca\012\121\047\126\001\002\000\004\005" +
    "\165\001\002\000\006\004\166\050\167\001\002\000\004" +
    "\044\173\001\002\000\004\004\170\001\002\000\004\044" +
    "\171\001\002\000\004\005\172\001\002\000\004\004\uffd4" +
    "\001\002\000\004\005\174\001\002\000\004\004\uffd3\001" +
    "\002\000\010\005\uffc8\012\uffc8\047\uffc8\001\002\000\010" +
    "\005\uffc9\012\uffc9\047\uffc9\001\002\000\004\044\204\001" +
    "\002\000\004\004\201\001\002\000\004\044\202\001\002" +
    "\000\004\005\203\001\002\000\004\004\uffd6\001\002\000" +
    "\004\005\205\001\002\000\004\004\uffd5\001\002\000\004" +
    "\004\uffef\001\002\000\014\023\210\032\043\042\041\045" +
    "\040\051\042\001\002\000\004\005\211\001\002\000\004" +
    "\004\ufff0\001\002\000\006\025\213\026\214\001\002\000" +
    "\004\015\216\001\002\000\004\015\215\001\002\000\004" +
    "\005\uffed\001\002\000\004\005\uffee\001\002\000\004\004" +
    "\221\001\002\000\004\004\224\001\002\000\014\023\222" +
    "\032\043\042\041\045\040\051\042\001\002\000\004\005" +
    "\223\001\002\000\004\004\ufff1\001\002\000\014\023\225" +
    "\032\043\042\041\045\040\051\042\001\002\000\004\005" +
    "\226\001\002\000\004\004\ufff2\001\002\000\004\004\237" +
    "\001\002\000\004\004\232\001\002\000\004\004\ufffd\001" +
    "\002\000\004\021\233\001\002\000\004\005\234\001\002" +
    "\000\004\004\ufffb\001\002\000\004\004\ufffa\001\002\000" +
    "\004\004\ufff6\001\002\000\010\011\244\017\242\027\243" +
    "\001\002\000\004\004\ufff9\001\002\000\004\004\ufff7\001" +
    "\002\000\004\012\262\001\002\000\004\005\255\001\002" +
    "\000\004\012\245\001\002\000\004\013\246\001\002\000" +
    "\004\014\247\001\002\000\004\015\250\001\002\000\004" +
    "\005\251\001\002\000\004\004\252\001\002\000\004\016" +
    "\253\001\002\000\004\005\254\001\002\000\004\004\ufff5" +
    "\001\002\000\004\031\256\001\002\000\004\004\257\001" +
    "\002\000\004\030\260\001\002\000\004\005\261\001\002" +
    "\000\004\004\ufff3\001\002\000\004\013\263\001\002\000" +
    "\004\014\264\001\002\000\004\015\265\001\002\000\004" +
    "\005\266\001\002\000\004\004\267\001\002\000\004\020" +
    "\270\001\002\000\004\005\271\001\002\000\004\004\ufff4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\006\002\004\015\003\001\001\000\006\003" +
    "\012\017\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\226\014\227\001\001\000\004\005\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\033\025\031\033\030\035\034\042\032\001" +
    "\001\000\002\001\001\000\012\021\075\033\074\035\077" +
    "\042\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\036\163\037\162\040\161\041\157\001\001\000\010\022" +
    "\050\023\144\024\044\001\001\000\014\022\122\030\121" +
    "\031\124\040\123\041\117\001\001\000\010\022\050\023" +
    "\043\024\044\001\001\000\002\001\001\000\004\022\106" +
    "\001\001\000\002\001\001\000\014\021\033\025\070\033" +
    "\030\035\034\042\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\021" +
    "\075\033\074\035\077\042\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\033\025\110\033\030\035\034\042\032\001" +
    "\001\000\012\021\075\033\074\035\077\042\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\132\040\133\041\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\175\041\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\033\025\217\033\030\035\034\042\032\001" +
    "\001\000\012\021\075\033\074\035\077\042\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\234\011\235\012\240\013\237\001\001\000\004\020" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public static String ConvertirObjectToString(Object Obj)
	 {
		String Str="";
		if(Obj!=null)
		{
			Str = Obj.toString();
		}
		return Str;
	}


	public static void erroresSintacticos(Symbol s)
	{
		System.out.println("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"");
		Errores errores_sintacticos=new Errores();
		errores_sintacticos.setTipo("Sintactico");
		errores_sintacticos.setLinea(s.right+1);
		errores_sintacticos.setColumna(s.left);
		errores_sintacticos.setDescripcion(ConvertirObjectToString(s.value));
		//sintactico.listaSintactico.add(errores_sintacticos);
		Interfaz.erroresSintacticos.add(errores_sintacticos);

	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RUTA ::= ruta asignacion pathComillas puntoComa 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
										nodoChtml nuevo = new nodoChtml("RUTA",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("ruta",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));											
										nuevo.getHijos().add(new nodoChtml("path",Interfaz.contadorChtml++, new nodoChtml(path,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RUTA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CLICK ::= click asignacion metodo puntoComa 
            {
              nodoChtml RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String met = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
										nodoChtml nuevo = new nodoChtml("CLICK",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("click",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));											
										nuevo.getHijos().add(new nodoChtml("metodo",Interfaz.contadorChtml++, new nodoChtml(met,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CLICK",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EI1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("EI1",Interfaz.contadorChtml++);												
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EI1 ::= CLICK 
            {
              nodoChtml RESULT =null;
		int clickleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int clickright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml click = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("EI1",Interfaz.contadorChtml++);												
			if(click!=null){nuevo.getHijos().add(click);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EI1 ::= EI1 RUTA 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("EI1",Interfaz.contadorChtml++);												
			if(e!=null){nuevo.getHijos().add(e);}
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EI1 ::= EI1 CLICK 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("EI1",Interfaz.contadorChtml++);												
			if(e!=null){nuevo.getHijos().add(e);}
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EI ::= EI1 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("EI",Interfaz.contadorChtml++);												
			if(e!=null){nuevo.getHijos().add(e);}			
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATRIBUTOS1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				nodoChtml nuevo = new nodoChtml("ATRIBUTOS",Interfaz.contadorChtml++);												
				if(e!=null){nuevo.getHijos().add(e);}			
				RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIBUTOS1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				nodoChtml nuevo = new nodoChtml("ATRIBUTOS",Interfaz.contadorChtml++);												
				if(e!=null){nuevo.getHijos().add(e);}			
				RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIBUTOS1 ::= CLICK 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				nodoChtml nuevo = new nodoChtml("ATRIBUTOS",Interfaz.contadorChtml++);												
				if(e!=null){nuevo.getHijos().add(e);}			
				RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIBUTOS1 ::= ATRIBUTOS1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								nodoChtml nuevo = new nodoChtml("ATRIBUTOS1",Interfaz.contadorChtml++);												
								if(a!=null){nuevo.getHijos().add(a);}			
								if(c!=null){nuevo.getHijos().add(c);}			
								RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ATRIBUTOS1 ::= ATRIBUTOS1 RUTA 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								nodoChtml nuevo = new nodoChtml("ATRIBUTOS1",Interfaz.contadorChtml++);												
								if(a!=null){nuevo.getHijos().add(a);}			
								if(c!=null){nuevo.getHijos().add(c);}			
								RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ATRIBUTOS1 ::= ATRIBUTOS1 CLICK 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								nodoChtml nuevo = new nodoChtml("ATRIBUTOS1",Interfaz.contadorChtml++);												
								if(a!=null){nuevo.getHijos().add(a);}			
								if(c!=null){nuevo.getHijos().add(c);}			
								RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ATRIBUTOS ::= ATRIBUTOS1 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("ATRIBUTOS",Interfaz.contadorChtml++);												
			if(e!=null){nuevo.getHijos().add(e);}			
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BOTON ::= menorQue inicioBoton ATRIBUTOS mayorQue cadena menorQue finBoton mayorQue 
            {
              nodoChtml RESULT =null;
		int atribleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml atrib = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("BOTON",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioBoton",Interfaz.contadorChtml++));
										if(atrib!=null){nuevo.getHijos().add(atrib);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(cad,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finBoton",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IMAGEN ::= menorQue inicioImagen EI mayorQue menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioImagen",Interfaz.contadorChtml++));
										if(e!=null){nuevo.getHijos().add(e);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										//nuevo.getHijos().add(new nodoChtml("path",Interfaz.contadorChtml++, new nodoChtml(ruta,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finImagen",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IMAGEN ::= menorQue inicioImagen EI mayorQue path menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioImagen",Interfaz.contadorChtml++));
										if(e!=null){nuevo.getHijos().add(e);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("path",Interfaz.contadorChtml++, new nodoChtml(ruta,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finImagen",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IMAGEN ::= menorQue inicioImagen mayorQue menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioImagen",Interfaz.contadorChtml++));
//										if(elementos!=null){nuevo.getHijos().add(elementos);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										//nuevo.getHijos().add(new nodoChtml("path",Interfaz.contadorChtml++, new nodoChtml(ruta,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finImagen",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IMAGEN ::= menorQue inicioImagen mayorQue path menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioImagen",Interfaz.contadorChtml++));
//										if(elementos!=null){nuevo.getHijos().add(elementos);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("path",Interfaz.contadorChtml++, new nodoChtml(ruta,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finImagen",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TEXTO ::= menorQue inicioTexto mayorQue cadena menorQue finTexto mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("TEXTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioTexto",Interfaz.contadorChtml++));										
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(cad,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finTexto",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEXTO ::= menorQue inicioTexto ELEMENTOS mayorQue cadena menorQue finTexto mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("TEXTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioTexto",Interfaz.contadorChtml++));
										if(elementos!=null){nuevo.getHijos().add(elementos);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(cad,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finTexto",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTO ::= alineado asignacion valorAlineado puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("alineado",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("valorAlineado",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTO ::= ancho asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("ancho",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELEMENTO ::= alto asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("alto",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELEMENTO ::= grupo asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
											nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
											nuevo.getHijos().add(new nodoChtml("grupo",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
											nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
											RESULT=nuevo;
											
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELEMENTO ::= idCcss asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
											nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
											nuevo.getHijos().add(new nodoChtml("idCcss",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
											nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
											RESULT=nuevo;
											
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELEMENTOS1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);
							if(r!=null){nuevo.getHijos().add(r);}							
							RESULT= nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS1",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELEMENTOS1 ::= ELEMENTOS1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("ELEMENTOS1",Interfaz.contadorChtml++);
							if(iz!=null){nuevo.getHijos().add(iz);}
							if(der!=null){nuevo.getHijos().add(der);}
							RESULT= nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS1",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELEMENTOS ::= ELEMENTOS1 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("ELEMENTOS",Interfaz.contadorChtml++);
						if(r!=null){nuevo.getHijos().add(r);}							
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PANEL ::= menorQue inicioPanel mayorQue menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("PANEL",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioPanel",Interfaz.contadorChtml++));
												//if(elementos!=null){nuevo.getHijos().add(elementos);}	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																									
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finPanel",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PANEL ::= menorQue inicioPanel mayorQue CONTENIDOCUERPO menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioPanel",Interfaz.contadorChtml++));
												//if(elementos!=null){nuevo.getHijos().add(elementos);}	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));												
												if(contenido!=null){nuevo.getHijos().add(contenido);}	
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finPanel",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PANEL ::= menorQue inicioPanel ELEMENTOS mayorQue menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioPanel",Interfaz.contadorChtml++));
												if(elementos!=null){nuevo.getHijos().add(elementos);}	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																									
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finPanel",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PANEL ::= menorQue inicioPanel ELEMENTOS mayorQue CONTENIDOCUERPO menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioPanel",Interfaz.contadorChtml++));
												if(elementos!=null){nuevo.getHijos().add(elementos);}	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));												
												if(contenido!=null){nuevo.getHijos().add(contenido);}	
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finPanel",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDOCUERPO ::= BOTON 
            {
              nodoChtml RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDOCUERPO ::= IMAGEN 
            {
              nodoChtml RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(texto!=null){nuevo.getHijos().add(texto);}																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDOCUERPO ::= TEXTO 
            {
              nodoChtml RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(texto!=null){nuevo.getHijos().add(texto);}																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDOCUERPO ::= PANEL 
            {
              nodoChtml RESULT =null;
		int panelleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int panelright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml panel = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);																			
							if(panel!=null){nuevo.getHijos().add(panel);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDOCUERPO ::= CONTENIDOCUERPO BOTON 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(b!=null){nuevo.getHijos().add(b);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDOCUERPO ::= CONTENIDOCUERPO IMAGEN 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(texto!=null){nuevo.getHijos().add(texto);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDOCUERPO ::= CONTENIDOCUERPO TEXTO 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(texto!=null){nuevo.getHijos().add(texto);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDOCUERPO ::= CONTENIDOCUERPO PANEL 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int panelleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int panelright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml panel = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(panel!=null){nuevo.getHijos().add(panel);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTILOCUERPO ::= fondo asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
												nodoChtml nuevo = new nodoChtml("ESTILOCUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("fondo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id, 
																			Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTILOCUERPO ::= fondo asignacion rgb puntoComa 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("ESTILOCUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("fondo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("rgb",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= menorQue inicioCuerpo mayorQue menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));												
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= menorQue inicioCuerpo mayorQue CONTENIDOCUERPO menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));												
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												if(contenido!=null){nuevo.getHijos().add(contenido);}
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= menorQue inicioCuerpo ESTILOCUERPO mayorQue menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int estiloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int estiloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml estilo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));
												if(estilo!=null){nuevo.getHijos().add(estilo);}
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= menorQue inicioCuerpo ESTILOCUERPO mayorQue CONTENIDOCUERPO menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int estiloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int estiloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml estilo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));
												if(estilo!=null){nuevo.getHijos().add(estilo);}
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												if(contenido!=null){nuevo.getHijos().add(contenido);}
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TITULO ::= menorQue inicioTitulo mayorQue cadena menorQue finTitulo mayorQue 
            {
              nodoChtml RESULT =null;
		int valCadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int valCadenaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String valCadena = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("TITULO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioTitulo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(valCadena,Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finTitulo",Interfaz.contadorChtml++));	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TITULO",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFCCSS ::= menorQue inicioCcss ruta asignacion pathComillas puntoComa mayorQue menorQue finCcss mayorQue 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		 
												nodoChtml nuevo = new nodoChtml("DEFCJS",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCcss",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("ruta",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("pathComillas",Interfaz.contadorChtml++, new nodoChtml(path,
																			Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finCcss",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCCSS",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFCJS ::= menorQue inicioCjs ruta asignacion pathComillas puntoComa mayorQue menorQue finCjs mayorQue 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		 
												nodoChtml nuevo = new nodoChtml("DEFCJS",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCjs",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("ruta",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("pathComillas",Interfaz.contadorChtml++, new nodoChtml(path,
																			Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finCjs",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCJS",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFARCHIVO ::= DEFCCSS 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("DEFARCHIVO",Interfaz.contadorChtml++);							
							if(r!=null){nuevo.getHijos().add(r);}							
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFARCHIVO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFARCHIVO ::= DEFCJS 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("DEFARCHIVO",Interfaz.contadorChtml++);							
							if(r!=null){nuevo.getHijos().add(r);}							
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFARCHIVO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTAARCHIVOS ::= 
            {
              nodoChtml RESULT =null;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARCHIVOS",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAARCHIVOS ::= LISTAARCHIVOS DEFARCHIVO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
												nodoChtml nuevo = new nodoChtml("LISTAARCHIVOS",Interfaz.contadorChtml++);												
												if(iz!=null){nuevo.getHijos().add(iz);}
												if(der!=null){nuevo.getHijos().add(der);}							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARCHIVOS",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDOENCABEZADO ::= LISTAARCHIVOS TITULO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										nodoChtml nuevo = new nodoChtml("CONTENIDOENCABEZADO",Interfaz.contadorChtml++);												
										if(iz!=null){nuevo.getHijos().add(iz);}								
										if(der!=null){nuevo.getHijos().add(der);}																								
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOENCABEZADO",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FINENCABEZADO ::= menorQue finEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("FINENCABEZADO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finEncabezado",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINENCABEZADO",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIOENCABEZADO ::= menorQue inicioEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("INICIOENCABEZADO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioEncabezado",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOENCABEZADO",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= INICIOENCABEZADO CONTENIDOENCABEZADO FINENCABEZADO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("ENCABEZADO",Interfaz.contadorChtml++);												
												if(iz!=null){nuevo.getHijos().add(iz);}
												if(cen!=null){nuevo.getHijos().add(cen);}
												if(der!=null){nuevo.getHijos().add(der);}
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FINCHTML ::= menorQue finChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("FINCHTML",Interfaz.contadorChtml++);
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finChtml",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINCHTML",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIOCHTML ::= menorQue inicioChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("INICIOCHTML",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioChtml",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOCHTML",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CHTML ::= INICIOCHTML ENCABEZADO CUERPO FINCHTML 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml cen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										Interfaz.raizChtml.setValue("DOCUMENTO");
										Interfaz.raizChtml.setTipo("DOCUMENTO");
										Interfaz.raizChtml.setLinea(Interfaz.contadorChtml++);
										if(iz!=null){Interfaz.raizChtml.getHijos().add(iz);}
										if(cen!=null){Interfaz.raizChtml.getHijos().add(cen);}
										if(cuerpo!=null){Interfaz.raizChtml.getHijos().add(cuerpo);}
										if(der!=null){Interfaz.raizChtml.getHijos().add(der);}
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CHTML",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CHTML EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml start_val = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

