
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 19 17:01:41 CST 2018
//----------------------------------------------------

package Source.CHTML;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.PrintWriter;
import Principal.Interfaz.*;
import Principal.Errores;
import Principal.Interfaz;
import Principal.tablaSimbolos;
import Source.CHTML.nodoChtml;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 19 17:01:41 CST 2018
  */
public class sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\006\000\002\015" +
    "\005\000\002\016\005\000\002\003\005\000\002\017\005" +
    "\000\002\020\005\000\002\014\004\000\002\010\004\000" +
    "\002\010\002\000\002\013\003\000\002\013\003\000\002" +
    "\012\014\000\002\011\014\000\002\007\011\000\002\005" +
    "\012\000\002\005\011\000\002\005\011\000\002\005\010" +
    "\000\002\006\006\000\002\006\006\000\002\025\004\000" +
    "\002\025\004\000\002\025\003\000\002\025\003\000\002" +
    "\021\012\000\002\021\011\000\002\023\003\000\002\023" +
    "\002\000\002\024\004\000\002\024\003\000\002\022\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\022\006\000\002\031\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\004\006\001\002\000\004\004\014\001" +
    "\002\000\004\002\011\001\002\000\004\006\007\001\002" +
    "\000\004\005\010\001\002\000\004\004\uffff\001\002\000" +
    "\004\002\001\001\002\000\004\004\ufff8\001\002\000\004" +
    "\004\017\001\002\000\004\010\015\001\002\000\004\005" +
    "\016\001\002\000\004\004\ufffc\001\002\000\004\022\025" +
    "\001\002\000\004\004\021\001\002\000\004\007\023\001" +
    "\002\000\004\002\000\001\002\000\004\005\024\001\002" +
    "\000\004\002\ufffe\001\002\000\006\005\030\024\027\001" +
    "\002\000\004\005\121\001\002\000\004\013\114\001\002" +
    "\000\004\004\034\001\002\000\004\004\uffe9\001\002\000" +
    "\004\004\111\001\002\000\004\004\uffea\001\002\000\010" +
    "\023\035\032\037\042\036\001\002\000\004\005\110\001" +
    "\002\000\016\005\uffe5\033\043\034\046\035\042\036\045" +
    "\037\041\001\002\000\016\005\uffe5\033\043\034\046\035" +
    "\042\036\045\037\041\001\002\000\016\005\uffe6\033\043" +
    "\034\046\035\042\036\045\037\041\001\002\000\004\013" +
    "\076\001\002\000\004\013\073\001\002\000\004\013\070" +
    "\001\002\000\004\005\056\001\002\000\004\013\053\001" +
    "\002\000\004\013\050\001\002\000\016\005\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\001\002\000\004\026" +
    "\051\001\002\000\004\015\052\001\002\000\016\005\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\001\002\000" +
    "\004\026\054\001\002\000\004\015\055\001\002\000\016" +
    "\005\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\001" +
    "\002\000\004\004\060\001\002\000\004\004\065\001\002" +
    "\000\010\032\037\041\061\042\036\001\002\000\004\005" +
    "\062\001\002\000\004\004\uffe7\001\002\000\004\004\uffeb" +
    "\001\002\000\004\004\uffec\001\002\000\010\032\037\041" +
    "\066\042\036\001\002\000\004\005\067\001\002\000\004" +
    "\004\uffe8\001\002\000\004\026\071\001\002\000\004\015" +
    "\072\001\002\000\016\005\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\001\002\000\004\026\074\001\002\000" +
    "\004\015\075\001\002\000\016\005\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\001\002\000\004\040\077\001" +
    "\002\000\004\015\100\001\002\000\016\005\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\001\002\000\016\005" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\001\002" +
    "\000\004\005\103\001\002\000\004\031\104\001\002\000" +
    "\004\004\105\001\002\000\004\043\106\001\002\000\004" +
    "\005\107\001\002\000\004\004\uffdd\001\002\000\004\004" +
    "\uffef\001\002\000\010\023\112\032\037\042\036\001\002" +
    "\000\004\005\113\001\002\000\004\004\ufff0\001\002\000" +
    "\006\025\115\026\116\001\002\000\004\015\120\001\002" +
    "\000\004\015\117\001\002\000\004\005\uffed\001\002\000" +
    "\004\005\uffee\001\002\000\004\004\123\001\002\000\004" +
    "\004\126\001\002\000\010\023\124\032\037\042\036\001" +
    "\002\000\004\005\125\001\002\000\004\004\ufff1\001\002" +
    "\000\010\023\127\032\037\042\036\001\002\000\004\005" +
    "\130\001\002\000\004\004\ufff2\001\002\000\004\004\141" +
    "\001\002\000\004\004\134\001\002\000\004\004\ufffd\001" +
    "\002\000\004\021\135\001\002\000\004\005\136\001\002" +
    "\000\004\004\ufffb\001\002\000\004\004\ufffa\001\002\000" +
    "\004\004\ufff6\001\002\000\010\011\146\017\144\027\145" +
    "\001\002\000\004\004\ufff9\001\002\000\004\004\ufff7\001" +
    "\002\000\004\012\164\001\002\000\004\005\157\001\002" +
    "\000\004\012\147\001\002\000\004\013\150\001\002\000" +
    "\004\014\151\001\002\000\004\015\152\001\002\000\004" +
    "\005\153\001\002\000\004\004\154\001\002\000\004\016" +
    "\155\001\002\000\004\005\156\001\002\000\004\004\ufff5" +
    "\001\002\000\004\031\160\001\002\000\004\004\161\001" +
    "\002\000\004\030\162\001\002\000\004\005\163\001\002" +
    "\000\004\004\ufff3\001\002\000\004\013\165\001\002\000" +
    "\004\014\166\001\002\000\004\015\167\001\002\000\004" +
    "\005\170\001\002\000\004\004\171\001\002\000\004\020" +
    "\172\001\002\000\004\005\173\001\002\000\004\004\ufff4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\006\002\004\015\003\001\001\000\006\003" +
    "\012\017\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\130\014\131\001\001\000\004\005\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\032\025\031\031\030\001\001\000\002\001" +
    "\001\000\006\021\063\031\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\046\023" +
    "\101\024\037\001\001\000\010\022\046\023\043\024\037" +
    "\001\001\000\004\022\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\032\025" +
    "\056\031\030\001\001\000\006\021\063\031\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\032\025\121\031\030\001\001\000" +
    "\006\021\063\031\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\136\011\137\012\142" +
    "\013\141\001\001\000\004\020\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public static String ConvertirObjectToString(Object Obj)
	 {
		String Str="";
		if(Obj!=null)
		{
			Str = Obj.toString();
		}
		return Str;
	}


	public static void erroresSintacticos(Symbol s)
	{
		System.out.println("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"");
		Errores errores_sintacticos=new Errores();
		errores_sintacticos.setTipo("Sintactico");
		errores_sintacticos.setLinea(s.right+1);
		errores_sintacticos.setColumna(s.left);
		errores_sintacticos.setDescripcion(ConvertirObjectToString(s.value));
		//sintactico.listaSintactico.add(errores_sintacticos);
		Interfaz.erroresSintacticos.add(errores_sintacticos);

	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TEXTO ::= menorQue inicioTexto ELEMENTOS mayorQue cadena menorQue finTexto mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("TEXTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioTexto",Interfaz.contadorChtml++));
										if(elementos!=null){nuevo.getHijos().add(elementos);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(cad,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finTexto",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELEMENTO ::= alineado asignacion valorAlineado puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("alineado",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("valorAlineado",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELEMENTO ::= ancho asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("ancho",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELEMENTO ::= alto asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("alto",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELEMENTO ::= grupo asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
											nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
											nuevo.getHijos().add(new nodoChtml("grupo",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
											nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
											RESULT=nuevo;
											
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELEMENTO ::= idCcss asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
											nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
											nuevo.getHijos().add(new nodoChtml("idCcss",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
											nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
											RESULT=nuevo;
											
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELEMENTOS1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);
							if(r!=null){nuevo.getHijos().add(r);}							
							RESULT= nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS1",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELEMENTOS1 ::= ELEMENTOS1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("ELEMENTOS1",Interfaz.contadorChtml++);
							if(iz!=null){nuevo.getHijos().add(iz);}
							if(der!=null){nuevo.getHijos().add(der);}
							RESULT= nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS1",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELEMENTOS ::= 
            {
              nodoChtml RESULT =null;
		
						nodoChtml nuevo = new nodoChtml("ELEMENTOS",Interfaz.contadorChtml++);												
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELEMENTOS ::= ELEMENTOS1 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("ELEMENTOS",Interfaz.contadorChtml++);
						if(r!=null){nuevo.getHijos().add(r);}							
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PANEL ::= menorQue inicioPanel ELEMENTOS mayorQue menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioPanel",Interfaz.contadorChtml++));
												if(elementos!=null){nuevo.getHijos().add(elementos);}	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																									
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finPanel",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PANEL ::= menorQue inicioPanel ELEMENTOS mayorQue CONTENIDOCUERPO menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioPanel",Interfaz.contadorChtml++));
												if(elementos!=null){nuevo.getHijos().add(elementos);}	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));												
												if(contenido!=null){nuevo.getHijos().add(contenido);}	
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finPanel",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDOCUERPO ::= TEXTO 
            {
              nodoChtml RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(texto!=null){nuevo.getHijos().add(texto);}																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDOCUERPO ::= PANEL 
            {
              nodoChtml RESULT =null;
		int panelleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int panelright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml panel = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);																			
							if(panel!=null){nuevo.getHijos().add(panel);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDOCUERPO ::= CONTENIDOCUERPO TEXTO 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(texto!=null){nuevo.getHijos().add(texto);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDOCUERPO ::= CONTENIDOCUERPO PANEL 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int panelleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int panelright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml panel = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(panel!=null){nuevo.getHijos().add(panel);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTILOCUERPO ::= fondo asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
												nodoChtml nuevo = new nodoChtml("ESTILOCUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("fondo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id, 
																			Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTILOCUERPO ::= fondo asignacion rgb puntoComa 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("ESTILOCUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("fondo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("rgb",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= menorQue inicioCuerpo mayorQue menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));												
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= menorQue inicioCuerpo mayorQue CONTENIDOCUERPO menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));												
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												if(contenido!=null){nuevo.getHijos().add(contenido);}
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= menorQue inicioCuerpo ESTILOCUERPO mayorQue menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int estiloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int estiloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml estilo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));
												if(estilo!=null){nuevo.getHijos().add(estilo);}
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= menorQue inicioCuerpo ESTILOCUERPO mayorQue CONTENIDOCUERPO menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int estiloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int estiloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml estilo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));
												if(estilo!=null){nuevo.getHijos().add(estilo);}
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												if(contenido!=null){nuevo.getHijos().add(contenido);}
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TITULO ::= menorQue inicioTitulo mayorQue cadena menorQue finTitulo mayorQue 
            {
              nodoChtml RESULT =null;
		int valCadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int valCadenaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String valCadena = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("TITULO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioTitulo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(valCadena,Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finTitulo",Interfaz.contadorChtml++));	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TITULO",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFCCSS ::= menorQue inicioCcss ruta asignacion pathComillas puntoComa mayorQue menorQue finCcss mayorQue 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		 
												nodoChtml nuevo = new nodoChtml("DEFCJS",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCcss",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("ruta",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("pathComillas",Interfaz.contadorChtml++, new nodoChtml(path,
																			Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finCcss",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCCSS",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFCJS ::= menorQue inicioCjs ruta asignacion pathComillas puntoComa mayorQue menorQue finCjs mayorQue 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		 
												nodoChtml nuevo = new nodoChtml("DEFCJS",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCjs",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("ruta",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("pathComillas",Interfaz.contadorChtml++, new nodoChtml(path,
																			Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finCjs",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCJS",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFARCHIVO ::= DEFCCSS 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("DEFARCHIVO",Interfaz.contadorChtml++);							
							if(r!=null){nuevo.getHijos().add(r);}							
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFARCHIVO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFARCHIVO ::= DEFCJS 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("DEFARCHIVO",Interfaz.contadorChtml++);							
							if(r!=null){nuevo.getHijos().add(r);}							
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFARCHIVO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTAARCHIVOS ::= 
            {
              nodoChtml RESULT =null;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARCHIVOS",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAARCHIVOS ::= LISTAARCHIVOS DEFARCHIVO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
												nodoChtml nuevo = new nodoChtml("LISTAARCHIVOS",Interfaz.contadorChtml++);												
												if(iz!=null){nuevo.getHijos().add(iz);}
												if(der!=null){nuevo.getHijos().add(der);}							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARCHIVOS",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDOENCABEZADO ::= LISTAARCHIVOS TITULO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										nodoChtml nuevo = new nodoChtml("CONTENIDOENCABEZADO",Interfaz.contadorChtml++);												
										if(iz!=null){nuevo.getHijos().add(iz);}								
										if(der!=null){nuevo.getHijos().add(der);}																								
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOENCABEZADO",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FINENCABEZADO ::= menorQue finEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("FINENCABEZADO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finEncabezado",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINENCABEZADO",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIOENCABEZADO ::= menorQue inicioEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("INICIOENCABEZADO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioEncabezado",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOENCABEZADO",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= INICIOENCABEZADO CONTENIDOENCABEZADO FINENCABEZADO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("ENCABEZADO",Interfaz.contadorChtml++);												
												if(iz!=null){nuevo.getHijos().add(iz);}
												if(cen!=null){nuevo.getHijos().add(cen);}
												if(der!=null){nuevo.getHijos().add(der);}
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FINCHTML ::= menorQue finChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("FINCHTML",Interfaz.contadorChtml++);
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finChtml",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINCHTML",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIOCHTML ::= menorQue inicioChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("INICIOCHTML",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioChtml",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOCHTML",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CHTML ::= INICIOCHTML ENCABEZADO CUERPO FINCHTML 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml cen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										Interfaz.raizChtml.setValue("DOCUMENTO");
										Interfaz.raizChtml.setTipo("DOCUMENTO");
										Interfaz.raizChtml.setLinea(Interfaz.contadorChtml++);
										if(iz!=null){Interfaz.raizChtml.getHijos().add(iz);}
										if(cen!=null){Interfaz.raizChtml.getHijos().add(cen);}
										if(cuerpo!=null){Interfaz.raizChtml.getHijos().add(cuerpo);}
										if(der!=null){Interfaz.raizChtml.getHijos().add(der);}
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CHTML",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CHTML EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml start_val = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

