
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 18 21:14:14 CST 2018
//----------------------------------------------------

package Source.CHTML;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.PrintWriter;
import Principal.Interfaz.*;
import Principal.Errores;
import Principal.Interfaz;
import Principal.tablaSimbolos;
import Source.CHTML.nodoChtml;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 18 21:14:14 CST 2018
  */
public class sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\004\000\002\002\005\000\002\013" +
    "\005\000\002\014\005\000\002\003\005\000\002\015\005" +
    "\000\002\016\005\000\002\010\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\004\004\006\001\002\000\004\004\014\001" +
    "\002\000\004\002\011\001\002\000\004\006\007\001\002" +
    "\000\004\005\010\001\002\000\004\004\uffff\001\002\000" +
    "\004\002\001\001\002\000\004\004\ufffa\001\002\000\004" +
    "\004\017\001\002\000\004\010\015\001\002\000\004\005" +
    "\016\001\002\000\004\004\ufffc\001\002\000\004\007\021" +
    "\001\002\000\004\002\000\001\002\000\004\005\022\001" +
    "\002\000\004\002\ufffe\001\002\000\004\004\025\001\002" +
    "\000\004\004\ufffd\001\002\000\004\021\026\001\002\000" +
    "\004\005\027\001\002\000\004\004\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\006\002\004\013\003\001\001\000\006\003" +
    "\012\015\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\022\001\001\000\004\014\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public static String ConvertirObjectToString(Object Obj)
	 {
		String Str="";
		if(Obj!=null)
		{
			Str = Obj.toString();
		}
		return Str;
	}


	public static void erroresSintacticos(Symbol s)
	{
		System.out.println("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"");
		Errores errores_sintacticos=new Errores();
		errores_sintacticos.setTipo("Sintactico");
		errores_sintacticos.setLinea(s.right+1);
		errores_sintacticos.setColumna(s.left);
		errores_sintacticos.setDescripcion(ConvertirObjectToString(s.value));
		//sintactico.listaSintactico.add(errores_sintacticos);
		Interfaz.erroresSintacticos.add(errores_sintacticos);

	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDOENCABEZADO ::= 
            {
              nodoChtml RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOENCABEZADO",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FINENCABEZADO ::= menorQue finEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("FINENCABEZADO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finEncabezado",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINENCABEZADO",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIOENCABEZADO ::= menorQue inicioEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("INICIOENCABEZADO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioEncabezado",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOENCABEZADO",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= INICIOENCABEZADO CONTENIDOENCABEZADO FINENCABEZADO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("ENCABEZADO",Interfaz.contadorChtml++);												
												if(iz!=null){nuevo.getHijos().add(iz);}
												if(cen!=null){Interfaz.raizChtml.getHijos().add(cen);}
												if(der!=null){nuevo.getHijos().add(der);}
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FINCHTML ::= menorQue finChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("FINCHTML",Interfaz.contadorChtml++);
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finChtml",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINCHTML",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIOCHTML ::= menorQue inicioChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("INICIOCHTML",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioChtml",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOCHTML",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CHTML ::= INICIOCHTML ENCABEZADO FINCHTML 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										Interfaz.raizChtml.setValue("DOCUMENTO");
										Interfaz.raizChtml.setLinea(Interfaz.contadorChtml++);
										if(iz!=null){Interfaz.raizChtml.getHijos().add(iz);}
										if(cen!=null){Interfaz.raizChtml.getHijos().add(cen);}
										if(der!=null){Interfaz.raizChtml.getHijos().add(der);}
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CHTML",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CHTML EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml start_val = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

