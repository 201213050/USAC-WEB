
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 26 15:00:33 CST 2018
//----------------------------------------------------

package Source.CHTML;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.PrintWriter;
import Principal.Interfaz.*;
import Principal.Errores;
import Principal.Interfaz;
import Principal.tablaSimbolos;
import Source.CHTML.nodoChtml;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 26 15:00:33 CST 2018
  */
public class sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\006\000\002\015" +
    "\005\000\002\016\005\000\002\003\005\000\002\017\005" +
    "\000\002\020\005\000\002\014\004\000\002\010\004\000" +
    "\002\010\002\000\002\013\003\000\002\013\003\000\002" +
    "\012\014\000\002\011\014\000\002\007\011\000\002\005" +
    "\012\000\002\005\011\000\002\005\011\000\002\005\010" +
    "\000\002\006\006\000\002\006\006\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\021\012\000\002\021\011" +
    "\000\002\021\011\000\002\021\010\000\002\023\003\000" +
    "\002\024\004\000\002\024\003\000\002\022\006\000\002" +
    "\022\006\000\002\022\006\000\002\022\006\000\002\022" +
    "\006\000\002\033\012\000\002\033\011\000\002\035\011" +
    "\000\002\035\010\000\002\035\012\000\002\035\011\000" +
    "\002\043\012\000\002\043\011\000\002\044\003\000\002" +
    "\045\004\000\002\045\004\000\002\045\003\000\002\045" +
    "\003\000\002\042\012\000\002\042\011\000\002\030\003" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\036\003\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\040\006\000\002\041\006\000\002\046\012\000" +
    "\002\046\011\000\002\047\004\000\002\047\003\000\002" +
    "\050\011\000\002\050\012\000\002\051\004\000\002\051" +
    "\004\000\002\051\003\000\002\051\003\000\002\052\011" +
    "\000\002\052\012\000\002\053\011\000\002\053\012\000" +
    "\002\054\004\000\002\054\004\000\002\054\004\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\055" +
    "\003\000\002\056\012\000\002\056\011\000\002\057\012" +
    "\000\002\057\011\000\002\060\012\000\002\060\011\000" +
    "\002\061\012\000\002\061\011\000\002\065\003\000\002" +
    "\070\004\000\002\070\004\000\002\070\003\000\002\070" +
    "\003\000\002\062\004\000\002\062\003\000\002\063\012" +
    "\000\002\063\011\000\002\066\004\000\002\066\004\000" +
    "\002\066\003\000\002\066\003\000\002\067\006\000\002" +
    "\072\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\004\004\006\001\002\000\004\004\014\001" +
    "\002\000\004\002\011\001\002\000\004\006\007\001\002" +
    "\000\004\005\010\001\002\000\004\004\uffff\001\002\000" +
    "\004\002\001\001\002\000\004\004\ufff8\001\002\000\004" +
    "\004\017\001\002\000\004\010\015\001\002\000\004\005" +
    "\016\001\002\000\004\004\ufffc\001\002\000\004\022\025" +
    "\001\002\000\004\004\021\001\002\000\004\007\023\001" +
    "\002\000\004\002\000\001\002\000\004\005\024\001\002" +
    "\000\004\002\ufffe\001\002\000\006\005\030\024\027\001" +
    "\002\000\004\005\u0143\001\002\000\004\013\u013e\001\002" +
    "\000\004\004\032\001\002\000\004\004\uffde\001\002\000" +
    "\032\023\u013c\032\062\042\067\045\070\051\066\053\064" +
    "\055\063\065\072\070\073\072\071\073\065\100\075\001" +
    "\002\000\004\004\uffe0\001\002\000\004\004\uffdd\001\002" +
    "\000\004\004\uffd9\001\002\000\004\004\uffda\001\002\000" +
    "\004\004\uffd7\001\002\000\004\004\uffe1\001\002\000\004" +
    "\004\046\001\002\000\004\004\uffdc\001\002\000\004\004" +
    "\uffdb\001\002\000\004\004\uffdf\001\002\000\004\004\uffd8" +
    "\001\002\000\032\023\074\032\062\042\067\045\070\051" +
    "\066\053\064\055\063\065\072\070\073\072\071\073\065" +
    "\100\075\001\002\000\004\004\uffe9\001\002\000\004\004" +
    "\uffeb\001\002\000\004\004\uffe8\001\002\000\004\004\uffe4" +
    "\001\002\000\004\004\uffe5\001\002\000\004\004\uffe2\001" +
    "\002\000\004\004\uffec\001\002\000\004\004\uffe6\001\002" +
    "\000\004\004\uffe7\001\002\000\004\004\uffea\001\002\000" +
    "\004\004\uffe3\001\002\000\016\005\u012c\033\104\034\107" +
    "\035\110\036\103\037\106\001\002\000\016\005\355\033" +
    "\104\034\107\035\110\036\103\037\106\001\002\000\020" +
    "\005\336\012\171\033\104\034\107\035\110\036\103\037" +
    "\106\001\002\000\020\005\266\033\104\034\107\035\110" +
    "\036\103\037\106\047\177\001\002\000\022\005\245\012" +
    "\171\033\104\034\107\035\110\036\103\037\106\047\177" +
    "\001\002\000\016\005\231\033\104\034\107\035\110\036" +
    "\103\037\106\001\002\000\022\005\172\012\171\033\104" +
    "\034\107\035\110\036\103\037\106\047\177\001\002\000" +
    "\016\005\156\033\104\034\107\035\110\036\103\037\106" +
    "\001\002\000\016\005\143\033\104\034\107\035\110\036" +
    "\103\037\106\001\002\000\016\005\102\033\104\034\107" +
    "\035\110\036\103\037\106\001\002\000\004\005\077\001" +
    "\002\000\004\005\076\001\002\000\004\004\uff80\001\002" +
    "\000\004\004\ufff0\001\002\000\004\005\135\001\002\000" +
    "\016\005\uffd2\033\104\034\107\035\110\036\103\037\106" +
    "\001\002\000\004\031\130\001\002\000\004\013\125\001" +
    "\002\000\004\013\122\001\002\000\016\005\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\001\002\000\004\013" +
    "\117\001\002\000\004\013\114\001\002\000\004\013\111" +
    "\001\002\000\004\026\112\001\002\000\004\015\113\001" +
    "\002\000\024\005\uffcd\012\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\047\uffcd\077\uffcd\001\002\000\004\026" +
    "\115\001\002\000\004\015\116\001\002\000\024\005\uffce" +
    "\012\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\047" +
    "\uffce\077\uffce\001\002\000\004\040\120\001\002\000\004" +
    "\015\121\001\002\000\024\005\uffcb\012\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\047\uffcb\077\uffcb\001\002" +
    "\000\004\026\123\001\002\000\004\015\124\001\002\000" +
    "\024\005\uffcf\012\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\047\uffcf\077\uffcf\001\002\000\004\026\126\001" +
    "\002\000\004\015\127\001\002\000\024\005\uffcc\012\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\047\uffcc\077" +
    "\uffcc\001\002\000\004\004\131\001\002\000\004\071\132" +
    "\001\002\000\004\005\133\001\002\000\004\004\uff91\001" +
    "\002\000\016\005\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\001\002\000\004\031\136\001\002\000\004\004" +
    "\137\001\002\000\004\071\140\001\002\000\004\005\141" +
    "\001\002\000\004\004\uff92\001\002\000\004\005\150\001" +
    "\002\000\004\031\144\001\002\000\004\004\145\001\002" +
    "\000\004\066\146\001\002\000\004\005\147\001\002\000" +
    "\004\004\uff95\001\002\000\004\031\151\001\002\000\004" +
    "\004\152\001\002\000\004\066\153\001\002\000\004\005" +
    "\154\001\002\000\004\004\uff96\001\002\000\004\005\163" +
    "\001\002\000\004\031\157\001\002\000\004\004\160\001" +
    "\002\000\004\067\161\001\002\000\004\005\162\001\002" +
    "\000\004\004\uff93\001\002\000\004\031\164\001\002\000" +
    "\004\004\165\001\002\000\004\067\166\001\002\000\004" +
    "\005\167\001\002\000\004\004\uff94\001\002\000\022\005" +
    "\uffaf\012\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\047\uffaf\001\002\000\004\013\225\001\002\000\006\004" +
    "\216\050\217\001\002\000\022\005\uffb4\012\171\033\104" +
    "\034\107\035\110\036\103\037\106\047\177\001\002\000" +
    "\022\005\uffae\012\uffae\033\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\047\uffae\001\002\000\022\005\uffb0\012\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\047\uffb0\001\002" +
    "\000\004\005\203\001\002\000\004\013\200\001\002\000" +
    "\004\046\201\001\002\000\004\015\202\001\002\000\022" +
    "\005\uffad\012\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\047\uffad\001\002\000\006\004\204\050\205\001\002" +
    "\000\004\044\211\001\002\000\004\004\206\001\002\000" +
    "\004\044\207\001\002\000\004\005\210\001\002\000\006" +
    "\004\uffc6\031\uffc6\001\002\000\004\005\212\001\002\000" +
    "\006\004\uffc5\031\uffc5\001\002\000\022\005\uffb2\012\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\047\uffb2\001" +
    "\002\000\022\005\uffb1\012\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\047\uffb1\001\002\000\022\005\uffb3\012" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\047\uffb3" +
    "\001\002\000\004\044\223\001\002\000\004\004\220\001" +
    "\002\000\004\044\221\001\002\000\004\005\222\001\002" +
    "\000\006\004\uffc8\031\uffc8\001\002\000\004\005\224\001" +
    "\002\000\006\004\uffc7\031\uffc7\001\002\000\004\014\226" +
    "\001\002\000\004\015\227\001\002\000\022\005\uffac\012" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\047\uffac" +
    "\001\002\000\004\005\236\001\002\000\004\031\232\001" +
    "\002\000\004\004\233\001\002\000\004\043\234\001\002" +
    "\000\004\005\235\001\002\000\004\004\uffc9\001\002\000" +
    "\004\031\237\001\002\000\004\004\240\001\002\000\004" +
    "\043\241\001\002\000\004\005\242\001\002\000\004\004" +
    "\uffca\001\002\000\022\005\uffb6\012\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\047\uffb6\001\002\000\004\005" +
    "\260\001\002\000\004\031\254\001\002\000\022\005\uffb5" +
    "\012\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\047" +
    "\uffb5\001\002\000\022\005\uffb7\012\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\047\uffb7\001\002\000\022\005" +
    "\uffbb\012\171\033\104\034\107\035\110\036\103\037\106" +
    "\047\177\001\002\000\022\005\uffb9\012\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\047\uffb9\001\002\000\022" +
    "\005\uffb8\012\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\047\uffb8\001\002\000\022\005\uffba\012\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\047\uffba\001\002\000" +
    "\004\004\255\001\002\000\004\052\256\001\002\000\004" +
    "\005\257\001\002\000\006\004\uffbc\031\uffbc\001\002\000" +
    "\004\031\261\001\002\000\004\004\262\001\002\000\004" +
    "\052\263\001\002\000\004\005\264\001\002\000\006\004" +
    "\uffbd\031\uffbd\001\002\000\020\005\uff8e\033\104\034\107" +
    "\035\110\036\103\037\106\047\177\001\002\000\004\004" +
    "\274\001\002\000\020\005\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\047\uff8a\001\002\000\020\005\uff8b\033" +
    "\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\047\uff8b\001\002" +
    "\000\004\005\272\001\002\000\004\004\274\001\002\000" +
    "\004\004\uff88\001\002\000\004\075\300\001\002\000\004" +
    "\004\277\001\002\000\004\004\uff89\001\002\000\006\074" +
    "\301\075\300\001\002\000\020\005\306\033\104\034\107" +
    "\035\110\036\103\037\106\077\305\001\002\000\004\005" +
    "\302\001\002\000\004\004\uff90\001\002\000\020\005\uff83" +
    "\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\077\uff83\001" +
    "\002\000\020\005\320\033\104\034\107\035\110\036\103" +
    "\037\106\077\305\001\002\000\004\013\314\001\002\000" +
    "\004\031\310\001\002\000\020\005\uff82\033\uff82\034\uff82" +
    "\035\uff82\036\uff82\037\uff82\077\uff82\001\002\000\004\004" +
    "\311\001\002\000\004\076\312\001\002\000\004\005\313" +
    "\001\002\000\004\004\uff86\001\002\000\004\026\315\001" +
    "\002\000\004\015\316\001\002\000\020\005\uff81\033\uff81" +
    "\034\uff81\035\uff81\036\uff81\037\uff81\077\uff81\001\002\000" +
    "\020\005\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85" +
    "\077\uff85\001\002\000\004\031\322\001\002\000\020\005" +
    "\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84\077\uff84" +
    "\001\002\000\004\004\323\001\002\000\004\076\324\001" +
    "\002\000\004\005\325\001\002\000\004\004\uff87\001\002" +
    "\000\004\004\327\001\002\000\006\074\330\075\300\001" +
    "\002\000\004\005\331\001\002\000\004\004\uff8f\001\002" +
    "\000\020\005\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\047\uff8d\001\002\000\020\005\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\047\uff8c\001\002\000\020\005" +
    "\uffbe\012\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\001\002\000\004\005\347\001\002\000\004\031\343\001" +
    "\002\000\020\005\uffbf\012\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\001\002\000\020\005\uffc2\012\171\033" +
    "\104\034\107\035\110\036\103\037\106\001\002\000\020" +
    "\005\uffc0\012\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\001\002\000\020\005\uffc1\012\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\001\002\000\004\004\344\001" +
    "\002\000\004\054\345\001\002\000\004\005\346\001\002" +
    "\000\004\004\uffc3\001\002\000\004\031\350\001\002\000" +
    "\004\004\351\001\002\000\004\054\352\001\002\000\004" +
    "\005\353\001\002\000\004\004\uffc4\001\002\000\004\005" +
    "\u0126\001\002\000\004\004\360\001\002\000\004\004\uffa8" +
    "\001\002\000\004\004\u0123\001\002\000\004\063\361\001" +
    "\002\000\016\005\363\033\104\034\107\035\110\036\103" +
    "\037\106\001\002\000\004\005\u011d\001\002\000\004\004" +
    "\364\001\002\000\006\057\373\061\375\001\002\000\004" +
    "\004\370\001\002\000\004\004\uffa3\001\002\000\004\004" +
    "\uffa2\001\002\000\010\057\373\061\375\064\374\001\002" +
    "\000\004\004\uffa5\001\002\000\004\004\uffa4\001\002\000" +
    "\016\005\u0113\033\104\034\107\035\110\036\103\037\106" +
    "\001\002\000\004\005\u0111\001\002\000\016\005\377\033" +
    "\104\034\107\035\110\036\103\037\106\001\002\000\004" +
    "\005\u010c\001\002\000\006\004\u0103\031\u0101\001\002\000" +
    "\006\004\uff99\031\uff99\001\002\000\006\004\uff97\031\uff97" +
    "\001\002\000\006\004\uff9a\031\uff9a\001\002\000\006\045" +
    "\070\051\066\001\002\000\006\004\u0108\031\u0101\001\002" +
    "\000\006\004\uff98\031\uff98\001\002\000\006\004\uff9b\031" +
    "\uff9b\001\002\000\006\004\uff9d\031\uff9d\001\002\000\010" +
    "\045\070\051\066\062\u010a\001\002\000\006\004\uff9c\031" +
    "\uff9c\001\002\000\004\005\u010b\001\002\000\004\004\uff9f" +
    "\001\002\000\006\004\u0103\031\u0101\001\002\000\006\004" +
    "\u010e\031\u0101\001\002\000\010\045\070\051\066\062\u010f" +
    "\001\002\000\004\005\u0110\001\002\000\004\004\uff9e\001" +
    "\002\000\004\004\uffa7\001\002\000\004\005\u0118\001\002" +
    "\000\006\004\u0103\031\u0101\001\002\000\006\004\u0115\031" +
    "\u0101\001\002\000\010\045\070\051\066\060\u0116\001\002" +
    "\000\004\005\u0117\001\002\000\004\004\uffa1\001\002\000" +
    "\006\004\u0103\031\u0101\001\002\000\006\004\u011a\031\u0101" +
    "\001\002\000\010\045\070\051\066\060\u011b\001\002\000" +
    "\004\005\u011c\001\002\000\004\004\uffa0\001\002\000\004" +
    "\004\364\001\002\000\004\004\u011f\001\002\000\010\057" +
    "\373\061\375\064\u0120\001\002\000\004\005\u0121\001\002" +
    "\000\004\004\uffa6\001\002\000\004\004\uffa9\001\002\000" +
    "\006\056\u0124\063\361\001\002\000\004\005\u0125\001\002" +
    "\000\004\004\uffaa\001\002\000\004\004\360\001\002\000" +
    "\004\004\u0128\001\002\000\006\056\u0129\063\361\001\002" +
    "\000\004\005\u012a\001\002\000\004\004\uffab\001\002\000" +
    "\004\005\u0134\001\002\000\004\004\u012d\001\002\000\032" +
    "\032\062\041\u0132\042\067\045\070\051\066\053\064\055" +
    "\063\065\072\070\073\072\071\073\065\100\075\001\002" +
    "\000\004\004\u012f\001\002\000\032\032\062\041\u0130\042" +
    "\067\045\070\051\066\053\064\055\063\065\072\070\073" +
    "\072\071\073\065\100\075\001\002\000\004\005\u0131\001" +
    "\002\000\004\004\uffd4\001\002\000\004\005\u0133\001\002" +
    "\000\004\004\uffd3\001\002\000\004\004\u0135\001\002\000" +
    "\032\032\062\041\u013a\042\067\045\070\051\066\053\064" +
    "\055\063\065\072\070\073\072\071\073\065\100\075\001" +
    "\002\000\004\004\u0137\001\002\000\032\032\062\041\u0138" +
    "\042\067\045\070\051\066\053\064\055\063\065\072\070" +
    "\073\072\071\073\065\100\075\001\002\000\004\005\u0139" +
    "\001\002\000\004\004\uffd6\001\002\000\004\005\u013b\001" +
    "\002\000\004\004\uffd5\001\002\000\004\005\u013d\001\002" +
    "\000\004\004\uffef\001\002\000\006\025\u013f\026\u0140\001" +
    "\002\000\004\015\u0142\001\002\000\004\015\u0141\001\002" +
    "\000\004\005\uffed\001\002\000\004\005\uffee\001\002\000" +
    "\004\004\u0144\001\002\000\032\023\u0149\032\062\042\067" +
    "\045\070\051\066\053\064\055\063\065\072\070\073\072" +
    "\071\073\065\100\075\001\002\000\004\004\u0146\001\002" +
    "\000\032\023\u0147\032\062\042\067\045\070\051\066\053" +
    "\064\055\063\065\072\070\073\072\071\073\065\100\075" +
    "\001\002\000\004\005\u0148\001\002\000\004\004\ufff2\001" +
    "\002\000\004\005\u014a\001\002\000\004\004\ufff1\001\002" +
    "\000\004\004\u0153\001\002\000\004\004\u014e\001\002\000" +
    "\004\004\ufffd\001\002\000\004\021\u014f\001\002\000\004" +
    "\005\u0150\001\002\000\004\004\ufffb\001\002\000\004\004" +
    "\ufffa\001\002\000\004\004\ufff6\001\002\000\010\011\u0158" +
    "\017\u0156\027\u0157\001\002\000\004\004\ufff9\001\002\000" +
    "\004\004\ufff7\001\002\000\004\012\u0166\001\002\000\004" +
    "\005\u0161\001\002\000\004\012\u0159\001\002\000\004\013" +
    "\u015a\001\002\000\004\014\u015b\001\002\000\004\015\u015c" +
    "\001\002\000\004\005\u015d\001\002\000\004\004\u015e\001" +
    "\002\000\004\016\u015f\001\002\000\004\005\u0160\001\002" +
    "\000\004\004\ufff5\001\002\000\004\031\u0162\001\002\000" +
    "\004\004\u0163\001\002\000\004\030\u0164\001\002\000\004" +
    "\005\u0165\001\002\000\004\004\ufff3\001\002\000\004\013" +
    "\u0167\001\002\000\004\014\u0168\001\002\000\004\015\u0169" +
    "\001\002\000\004\005\u016a\001\002\000\004\004\u016b\001" +
    "\002\000\004\020\u016c\001\002\000\004\005\u016d\001\002" +
    "\000\004\004\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\006\002\004\015\003\001\001\000\006\003" +
    "\012\017\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\u014a\014\u014b\001\001\000\004\005\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\021\037\025\040\033\032\035\043\042\030\043" +
    "\033\046\041\056\042\057\035\060\034\061\044\072\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\021\054\033" +
    "\047\035\057\042\046\043\050\046\056\056\055\057\052" +
    "\060\051\061\060\072\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\104\023\u012a" +
    "\024\100\001\001\000\010\022\104\023\353\024\100\001" +
    "\001\000\012\022\336\041\333\044\334\045\337\001\001" +
    "\000\012\022\266\040\267\065\270\070\264\001\001\000" +
    "\014\022\245\030\243\031\247\040\246\041\242\001\001" +
    "\000\010\022\104\023\227\024\100\001\001\000\014\022" +
    "\173\036\175\037\172\040\174\041\167\001\001\000\010" +
    "\022\104\023\154\024\100\001\001\000\010\022\104\023" +
    "\141\024\100\001\001\000\010\022\104\023\077\024\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\213" +
    "\040\214\041\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\251\040\252\041\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\332\040\331\001" +
    "\001\000\006\062\325\063\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\062\274\063" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\306\066\303\067\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\320\067" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\341" +
    "\041\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\356\050\355\001\001\000\002\001\001\000" +
    "\004\050\u0121\001\001\000\002\001\001\000\010\022\104" +
    "\023\361\024\100\001\001\000\002\001\001\000\010\051" +
    "\364\052\365\053\366\001\001\000\002\001\001\000\006" +
    "\052\370\053\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\104\023\u0111\024\100\001\001\000\002\001" +
    "\001\000\010\022\104\023\375\024\100\001\001\000\002" +
    "\001\001\000\012\035\u0101\042\377\054\u0103\055\u0104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\u0106\042\u0105\055\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\u0101\042\377\054\u010c\055\u0104" +
    "\001\001\000\010\035\u0106\042\u0105\055\u0108\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\035\u0101\042\377\054" +
    "\u0113\055\u0104\001\001\000\010\035\u0106\042\u0105\055\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\u0101\042\377\054\u0118\055\u0104\001\001" +
    "\000\010\035\u0106\042\u0105\055\u0108\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\051\u011d" +
    "\052\365\053\366\001\001\000\006\052\370\053\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\u0126\050\355\001\001\000\004" +
    "\050\u0121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\021\037\025\u012d" +
    "\033\032\035\043\042\030\043\033\046\041\056\042\057" +
    "\035\060\034\061\044\072\036\001\001\000\002\001\001" +
    "\000\030\021\054\033\047\035\057\042\046\043\050\046" +
    "\056\056\055\057\052\060\051\061\060\072\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\021\037\025\u0135" +
    "\033\032\035\043\042\030\043\033\046\041\056\042\057" +
    "\035\060\034\061\044\072\036\001\001\000\002\001\001" +
    "\000\030\021\054\033\047\035\057\042\046\043\050\046" +
    "\056\056\055\057\052\060\051\061\060\072\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\021\037" +
    "\025\u0144\033\032\035\043\042\030\043\033\046\041\056" +
    "\042\057\035\060\034\061\044\072\036\001\001\000\002" +
    "\001\001\000\030\021\054\033\047\035\057\042\046\043" +
    "\050\046\056\056\055\057\052\060\051\061\060\072\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\u0150" +
    "\011\u0151\012\u0154\013\u0153\001\001\000\004\020\u014c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public static String ConvertirObjectToString(Object Obj)
	 {
		String Str="";
		if(Obj!=null)
		{
			Str = Obj.toString();
		}
		return Str;
	}


	public static void erroresSintacticos(Symbol s)
	{
		System.out.println("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"");
		Errores errores_sintacticos=new Errores();
		errores_sintacticos.setTipo("Sintactico");
		errores_sintacticos.setLinea(s.right+1);
		errores_sintacticos.setColumna(s.left);
		errores_sintacticos.setDescripcion(ConvertirObjectToString(s.value));
		//sintactico.listaSintactico.add(errores_sintacticos);
		Interfaz.erroresSintacticos.add(errores_sintacticos);

	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SALTO ::= menorQue salto mayorQue 
            {
              nodoChtml RESULT =null;
		
								nodoChtml nuevo = new nodoChtml("SALTO");
								RESULT= nuevo;
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SALTO",56, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VALOR ::= valor asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO");												
										nuevo.add(new nodoChtml("VALOR"));
										nuevo.add(new nodoChtml(id));																																												
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",53, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ELEMENTOSOPCION ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("OPCION");
						nuevo.add(e);
						RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOSOPCION",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ELEMENTOSOPCION ::= VALOR 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("OPCION");
						nuevo.add(e);
						RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOSOPCION",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ELEMENTOSOPCION ::= ELEMENTOSOPCION ELEMENTO 
            {
              nodoChtml RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml atributos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
				
								atributos.add(c);			
								RESULT=atributos;
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOSOPCION",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ELEMENTOSOPCION ::= ELEMENTOSOPCION VALOR 
            {
              nodoChtml RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml atributos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
					
								atributos.add(c);			
								RESULT=atributos;
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOSOPCION",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPCION ::= menorQue inicioOpcion mayorQue cadena menorQue finOpcion mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
									nodoChtml nuevo = new nodoChtml("ELEMENTO");
									nuevo.add(new nodoChtml("CADENA"));
									nuevo.add(new nodoChtml(cad));								
									RESULT= nuevo;																		
									
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCION",49, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPCION ::= menorQue inicioOpcion ELEMENTOSOPCION mayorQue cadena menorQue finOpcion mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
									nodoChtml nuevo = new nodoChtml("ELEMENTO");
									nuevo.add(new nodoChtml("CADENA"));
									nuevo.add(new nodoChtml(cad));
									elementos.add(nuevo);
									RESULT= elementos;									
									
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCION",49, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LISTAOPCIONES ::= OPCION 
            {
              nodoChtml RESULT =null;
		int opcionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int opcionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml opcion = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								nodoChtml nuevo = new nodoChtml("CAJAOPCIONES");
								nuevo.add(opcion);
								RESULT = nuevo;
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAOPCIONES",48, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LISTAOPCIONES ::= LISTAOPCIONES OPCION 
            {
              nodoChtml RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml lista = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int opcionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int opcionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml opcion = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
									lista.add(opcion);
									RESULT= lista;									
									
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAOPCIONES",48, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ELEMENTOSCAJA1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("CAJAOPCIONES");
						nuevo.add(e);
						RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOSCAJA1",54, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ELEMENTOSCAJA1 ::= CLICK 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("CAJAOPCIONES");
						nuevo.add(e);
						RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOSCAJA1",54, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ELEMENTOSCAJA1 ::= ELEMENTOSCAJA1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml atributos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
				
								atributos.add(c);			
								RESULT=atributos;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOSCAJA1",54, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ELEMENTOSCAJA1 ::= ELEMENTOSCAJA1 CLICK 
            {
              nodoChtml RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml atributos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
					
								atributos.add(c);			
								RESULT=atributos;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOSCAJA1",54, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ELEMENTOSCAJA ::= ELEMENTOSCAJA1 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOSCAJA",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CAJAOPCIONES ::= menorQue inicioCajaOpciones mayorQue LISTAOPCIONES menorQue finCajaOpciones mayorQue 
            {
              nodoChtml RESULT =null;
		int listaOpcionesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int listaOpcionesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml listaOpciones = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
								RESULT = listaOpciones;														
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CAJAOPCIONES",47, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CAJAOPCIONES ::= menorQue inicioCajaOpciones ELEMENTOSCAJA mayorQue LISTAOPCIONES menorQue finCajaOpciones mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int listaOpcionesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int listaOpcionesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml listaOpciones = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
								elementos.setValue("CAJAOPCIONES");
								elementos.addLista(listaOpciones);
								RESULT = elementos;																					
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CAJAOPCIONES",47, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SPINNER ::= menorQue inicioSpinner mayorQue cadena menorQue finSpinner mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
						nodoChtml nuevo = new nodoChtml("SPINNER");
						nodoChtml aux = new nodoChtml("ELEMENTO");						
						aux.add(new nodoChtml("ENTERO"));
						aux.add(new nodoChtml(cad));
						nuevo.add(aux);
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SPINNER",46, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SPINNER ::= menorQue inicioSpinner ELEMENTOS mayorQue cadena menorQue finSpinner mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
						nodoChtml nuevo = new nodoChtml("ELEMENTO");
						nuevo.add(new nodoChtml("ENTERO"));
						nuevo.add(new nodoChtml(cad));
						elementos.add(nuevo);
						elementos.setValue("SPINNER");
						RESULT= elementos;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SPINNER",46, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CAJATEXTO ::= menorQue inicioCaja mayorQue cadena menorQue finCaja mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
						nodoChtml nuevo = new nodoChtml("CAJATEXTO");
						nodoChtml aux = new nodoChtml("ELEMENTO");						
						aux.add(new nodoChtml("CADENA"));
						aux.add(new nodoChtml(cad));
						nuevo.add(aux);
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",45, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CAJATEXTO ::= menorQue inicioCaja ELEMENTOS mayorQue cadena menorQue finCaja mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
						nodoChtml nuevo = new nodoChtml("ELEMENTO");
						nuevo.add(new nodoChtml("CADENA"));
						nuevo.add(new nodoChtml(cad));
						elementos.add(nuevo);
						elementos.setValue("CAJATEXTO");
						RESULT= elementos;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",45, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TEXTOA ::= menorQue inicioCajaArea mayorQue cadena menorQue finCajaArea mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
						nodoChtml nuevo = new nodoChtml("TEXTOA");
						nodoChtml aux = new nodoChtml("ELEMENTO");						
						aux.add(new nodoChtml("CADENA"));
						aux.add(new nodoChtml(cad));
						nuevo.add(aux);
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTOA",44, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TEXTOA ::= menorQue inicioCajaArea ELEMENTOS mayorQue cadena menorQue finCajaArea mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
						nodoChtml nuevo = new nodoChtml("ELEMENTO");
						nuevo.add(new nodoChtml("CADENA"));
						nuevo.add(new nodoChtml(cad));
						elementos.add(nuevo);
						elementos.setValue("TEXTOA");
						RESULT= elementos;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTOA",44, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CADENA ::= cadena 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("ELEMENTO");
						nuevo.add(new nodoChtml("CADENA"));
						nuevo.add(new nodoChtml(cad));
						RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CADENA",43, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONTENIDOCELDA ::= CADENA 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml cad = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("LISTA");						
						nuevo.add(cad);
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONTENIDOCELDA ::= BOTON 
            {
              nodoChtml RESULT =null;
		int botonleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml boton = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("LISTA");
						nuevo.add(boton);
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONTENIDOCELDA ::= IMAGEN 
            {
              nodoChtml RESULT =null;
		int imagenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int imagenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml imagen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("LISTA");
						nuevo.add(imagen);
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONTENIDOCELDA ::= CONTENIDOCELDA BOTON 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								l.add(b);						
								RESULT= l;
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONTENIDOCELDA ::= CONTENIDOCELDA CADENA 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								l.add(b);						
								RESULT= l;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONTENIDOCELDA ::= CONTENIDOCELDA IMAGEN 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								l.add(b);						
								RESULT= l;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CELDAC ::= menorQue inicioCeldaCabecera ELEMENTOS mayorQue CONTENIDOCELDA menorQue finCeldaCabecera mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
				
										elementos.setValue("CELDAC");																																																	
										elementos.addLista(contenido);																																						
										RESULT=elementos;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDAC",41, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CELDAC ::= menorQue inicioCeldaCabecera mayorQue CONTENIDOCELDA menorQue finCeldaCabecera mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
																																	
										contenido.setValue("CELDAC");																												
										RESULT=contenido;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDAC",41, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CELDA ::= menorQue inicioCelda ELEMENTOS mayorQue CONTENIDOCELDA menorQue finCelda mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
				
										elementos.setValue("CELDA");																																																	
										elementos.addLista(contenido);																																						
										RESULT=elementos;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDA",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CELDA ::= menorQue inicioCelda mayorQue CONTENIDOCELDA menorQue finCelda mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
																																	 
										contenido.setValue("CELDA");																												
										RESULT=contenido;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDA",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTACELDA ::= CELDAC 
            {
              nodoChtml RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
			
					nodoChtml nuevo = new nodoChtml("FILA");
					nuevo.add(c);									
					RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTACELDA ::= CELDA 
            {
              nodoChtml RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
			
					nodoChtml nuevo = new nodoChtml("FILA");
					nuevo.add(c);									
					RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTACELDA ::= LISTACELDA CELDAC 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
											
					l.add(c);					
					RESULT= l;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LISTACELDA ::= LISTACELDA CELDA 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
							
					l.add(c);										
					RESULT= l;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FILA ::= menorQue inicioFila ELEMENTOS mayorQue LISTACELDA menorQue finFila mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int celdasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int celdasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml celdas = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										//nodoChtml nuevo = new nodoChtml("FILA");	
										elementos.setValue("FILA");
										elementos.addLista(celdas);																												
										RESULT=elementos;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FILA",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FILA ::= menorQue inicioFila mayorQue LISTACELDA menorQue finFila mayorQue 
            {
              nodoChtml RESULT =null;
		int celdasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int celdasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml celdas = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
				
										nodoChtml nuevo = new nodoChtml("FILA");
										nuevo.add(celdas);
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FILA",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTAFILA ::= FILA 
            {
              nodoChtml RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml f = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=f;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAFILA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTAFILA ::= LISTAFILA FILA 
            {
              nodoChtml RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml lista = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int filaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int filaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml fila = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
																						
								lista.addLista(fila);	
								RESULT=lista;
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAFILA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TABLA ::= menorQue inicioTabla mayorQue LISTAFILA menorQue finTabla mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										contenido.setValue("TABLA");																															
										RESULT=contenido;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TABLA ::= menorQue inicioTabla ELEMENTOS mayorQue LISTAFILA menorQue finTabla mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										e.setValue("TABLA");											
										e.addLista(contenido);
										RESULT=e;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RUTA ::= ruta asignacion pathComillas puntoComa 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
																										
										nodoChtml nuevo = new nodoChtml("ELEMENTO");
										nuevo.add(new nodoChtml("RUTA"));
										nuevo.add(new nodoChtml(path));
										RESULT=nuevo;																																													
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RUTA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CLICK ::= click asignacion metodo puntoComa 
            {
              nodoChtml RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String met = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
										nodoChtml nuevo = new nodoChtml("ELEMENTO");
										nuevo.add(new nodoChtml("CLICK"));																							
										nuevo.add(new nodoChtml(met));																																																							
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CLICK",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EI1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int elementoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int elementoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml elemento = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("ELEMENTOS");												
			nuevo.add(elemento);
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EI1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("ELEMENTOS");												
			nuevo.add(r);
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EI1 ::= CLICK 
            {
              nodoChtml RESULT =null;
		int clickleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int clickright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml click = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("ELEMENTOS");												
			nuevo.add(click);
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EI1 ::= EI1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			e.add(r);
			RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EI1 ::= EI1 RUTA 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			e.add(r);
			RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EI1 ::= EI1 CLICK 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
																
			e.add(r);
			RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EI ::= EI1 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ATRIBUTOS1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("BOTON");
						nuevo.add(e);
						RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ATRIBUTOS1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("BOTON");
						nuevo.add(e);
						RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ATRIBUTOS1 ::= CLICK 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("BOTON");
						nuevo.add(e);
						RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ATRIBUTOS1 ::= ATRIBUTOS1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml atributos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
				
								atributos.add(c);			
								RESULT=atributos;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATRIBUTOS1 ::= ATRIBUTOS1 RUTA 
            {
              nodoChtml RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml atributos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
																	
								atributos.add(c);			
								RESULT=atributos;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ATRIBUTOS1 ::= ATRIBUTOS1 CLICK 
            {
              nodoChtml RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml atributos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
					
								atributos.add(c);			
								RESULT=atributos;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ATRIBUTOS ::= ATRIBUTOS1 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BOTON ::= menorQue inicioBoton mayorQue cadena menorQue finBoton mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("BOTON");												
										nuevo.add(new nodoChtml(cad));
										nodoChtml aux = new nodoChtml("ELEMENTO");																					
										aux.add(new nodoChtml("CADENA"));
										aux.add(new nodoChtml(cad));	
										nuevo.add(aux);																																																						
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BOTON ::= menorQue inicioBoton ATRIBUTOS mayorQue cadena menorQue finBoton mayorQue 
            {
              nodoChtml RESULT =null;
		int atribleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml atrib = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										atrib.setValue("BOTON"); 
										nodoChtml nuevo = new nodoChtml("ELEMENTO");																					
										nuevo.add(new nodoChtml("CADENA"));
										nuevo.add(new nodoChtml(cad));
										atrib.add(nuevo);										
										RESULT=atrib;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AE1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				nodoChtml nuevo = new nodoChtml("ELEMENTOS");
				nuevo.add(r);
				RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AE1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
					nodoChtml nuevo = new nodoChtml("ELEMENTOS");
					nuevo.add(r);
					RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AE1 ::= AE1 RUTA 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						a.add(r);			
						RESULT=a;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AE1 ::= AE1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						a.add(r);
						RESULT=a;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AE ::= AE1 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=r;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ENLACE ::= menorQue inicioEnlace mayorQue cadena menorQue finEnlace mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 																																																																																																											
										nodoChtml nuevo = new nodoChtml("ENLACE");
										nodoChtml aux = new nodoChtml("ELEMENTO");																															
										aux.add(new nodoChtml("CADENA"));										
										aux.add(new nodoChtml(cad));																																
										nuevo.add(nuevo);																																																							
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENLACE",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ENLACE ::= menorQue inicioEnlace AE mayorQue cadena menorQue finEnlace mayorQue 
            {
              nodoChtml RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml ae = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 	
										ae.setValue("ENLACE");
										nodoChtml nuevo = new nodoChtml("ELEMENTO");																															
										nuevo.add(new nodoChtml("CADENA"));										
										nuevo.add(new nodoChtml(cad));
										ae.add(nuevo);
										//nuevo.add(new nodoChtml("cadena", new nodoChtml(cad)));																																																							
										RESULT=ae;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENLACE",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IMAGEN ::= menorQue inicioImagen EI mayorQue menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
										e.setValue("IMAGEN");																						
										RESULT=e;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IMAGEN ::= menorQue inicioImagen EI mayorQue path menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										e.setValue("IMAGEN");
										nodoChtml aux = new nodoChtml("ELEMENTO");												
										aux.add(new nodoChtml("RUTA"));
										aux.add(new nodoChtml(ruta));
										e.add(aux);																																																																	
										RESULT=e;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IMAGEN ::= menorQue inicioImagen mayorQue menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN");												
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IMAGEN ::= menorQue inicioImagen mayorQue path menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN");
										nodoChtml aux = new nodoChtml("ELEMENTO");												
										aux.add(new nodoChtml("RUTA"));
										aux.add(new nodoChtml(ruta));
										nuevo.add(aux);																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TEXTO ::= menorQue inicioTexto mayorQue cadena menorQue finTexto mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("TEXTO");	
										nodoChtml aux = new nodoChtml("ELEMENTO");
										aux.add(new nodoChtml("CADENA"));
										aux.add(new nodoChtml(cad));
										nuevo.add(aux);										
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TEXTO ::= menorQue inicioTexto ELEMENTOS mayorQue cadena menorQue finTexto mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 	
										elementos.setValue("TEXTO");	
										nodoChtml nuevo = new nodoChtml("ELEMENTO");																														
										nuevo.add(new nodoChtml("CADENA"));
										nuevo.add(new nodoChtml(cad));
										elementos.add(nuevo);	
										RESULT=elementos;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO ::= alineado asignacion valorAlineado puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO");												
										nuevo.add(new nodoChtml("ALINEADO"));
										nuevo.add(new nodoChtml(id));																																												
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTO ::= ancho asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO");												
										nuevo.add(new nodoChtml("ANCHO"));
										nuevo.add(new nodoChtml(id));																																												
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTO ::= alto asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO");												
										nuevo.add( new nodoChtml("ALTO"));
										nuevo.add(new nodoChtml(id));																																												
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTO ::= grupo asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
											nodoChtml nuevo = new nodoChtml("ELEMENTO");												
											nuevo.add(new nodoChtml("GRUPO"));
											nuevo.add(new nodoChtml(id));
											RESULT=nuevo;
											
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTO ::= idCcss asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
											nodoChtml nuevo = new nodoChtml("ELEMENTO");
											nuevo.add(new nodoChtml("ID"));
											nuevo.add(new nodoChtml(id));
											RESULT=nuevo;
											
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTOS1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("ELEMENTO");
							nuevo.add(r);							
							RESULT= nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS1",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTOS1 ::= ELEMENTOS1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
							
							iz.add(der);
							RESULT= iz;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS1",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTOS ::= ELEMENTOS1 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
							
						RESULT= r;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PANEL ::= menorQue inicioPanel mayorQue menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("PANEL");																																																									
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PANEL ::= menorQue inicioPanel mayorQue CONTENIDOCUERPO menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL");																							
												nuevo.add(contenido);																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PANEL ::= menorQue inicioPanel ELEMENTOS mayorQue menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL");												
												nuevo.add(elementos);																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PANEL ::= menorQue inicioPanel ELEMENTOS mayorQue CONTENIDOCUERPO menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL");												
												nuevo.add(elementos);																								
												nuevo.add(contenido);																																														
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTENIDOCUERPO ::= SALTO 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(t);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONTENIDOCUERPO ::= CAJAOPCIONES 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(t);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONTENIDOCUERPO ::= SPINNER 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(t);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTENIDOCUERPO ::= CAJATEXTO 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(t);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTENIDOCUERPO ::= TEXTOA 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(t);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDOCUERPO ::= TABLA 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(t);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDOCUERPO ::= ENLACE 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
			
							nodoChtml nuevo = new nodoChtml("CONTENIDO");						 																																																															
							nuevo.add(t);
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOCUERPO ::= BOTON 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(t);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOCUERPO ::= IMAGEN 
            {
              nodoChtml RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(texto);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOCUERPO ::= TEXTO 
            {
              nodoChtml RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(texto);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOCUERPO ::= PANEL 
            {
              nodoChtml RESULT =null;
		int panelleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int panelright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml panel = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");																			
							nuevo.add(panel);																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOCUERPO ::= CONTENIDOCUERPO SALTO 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							cuerpo.add(b);																																												
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOCUERPO ::= CONTENIDOCUERPO CAJAOPCIONES 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							cuerpo.add(b);																																												
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDOCUERPO ::= CONTENIDOCUERPO SPINNER 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							cuerpo.add(b);																																												
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDOCUERPO ::= CONTENIDOCUERPO CAJATEXTO 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							cuerpo.add(b);																																												
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDOCUERPO ::= CONTENIDOCUERPO TEXTOA 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							cuerpo.add(b);																																												
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDOCUERPO ::= CONTENIDOCUERPO TABLA 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 	
							cuerpo.add(b);																																												
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDOCUERPO ::= CONTENIDOCUERPO ENLACE 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 											
							cuerpo.add(b);																																																				
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDOCUERPO ::= CONTENIDOCUERPO BOTON 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 	
							cuerpo.add(b);																																												
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDOCUERPO ::= CONTENIDOCUERPO IMAGEN 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int imagenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int imagenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml imagen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							cuerpo.add(imagen);																																													
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDOCUERPO ::= CONTENIDOCUERPO TEXTO 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 											
							cuerpo.add(texto);																																																		
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDOCUERPO ::= CONTENIDOCUERPO PANEL 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int panelleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int panelright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml panel = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							cuerpo.add(panel);																																													
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTILOCUERPO ::= fondo asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
												nodoChtml nuevo = new nodoChtml(color);																																		
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTILOCUERPO ::= fondo asignacion rgb puntoComa 
            {
              nodoChtml RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
												nodoChtml nuevo = new nodoChtml(color);																																		
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= menorQue inicioCuerpo mayorQue menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO");												
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= menorQue inicioCuerpo mayorQue CONTENIDOCUERPO menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO");
												nuevo.add(contenido);
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= menorQue inicioCuerpo ESTILOCUERPO mayorQue menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int estiloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int estiloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml estilo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO");
												nuevo.add(estilo);	
												RESULT=nuevo;											
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= menorQue inicioCuerpo ESTILOCUERPO mayorQue CONTENIDOCUERPO menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int estiloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int estiloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml estilo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO");												
												nuevo.add(estilo);
												nuevo.add(contenido);
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TITULO ::= menorQue inicioTitulo mayorQue cadena menorQue finTitulo mayorQue 
            {
              nodoChtml RESULT =null;
		int valCadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int valCadenaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String valCadena = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("TITULO");												
												nuevo.add(new nodoChtml(valCadena));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TITULO",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFCCSS ::= menorQue inicioCcss ruta asignacion pathComillas puntoComa mayorQue menorQue finCcss mayorQue 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		 
												nodoChtml nuevo = new nodoChtml(path);																																		
												nuevo.setTipo("path");
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCCSS",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFCJS ::= menorQue inicioCjs ruta asignacion pathComillas puntoComa mayorQue menorQue finCjs mayorQue 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		 
												nodoChtml nuevo = new nodoChtml(path);																																		
												nuevo.setTipo("path");
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCJS",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFARCHIVO ::= DEFCCSS 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
						
				RESULT=r;
				
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFARCHIVO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFARCHIVO ::= DEFCJS 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
								
				RESULT=r;
				
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFARCHIVO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTAARCHIVOS ::= 
            {
              nodoChtml RESULT =null;
		RESULT= new nodoChtml("LISTAARCHIVOS");
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARCHIVOS",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAARCHIVOS ::= LISTAARCHIVOS DEFARCHIVO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
												iz.add(der);
												RESULT=iz;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARCHIVOS",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDOENCABEZADO ::= LISTAARCHIVOS TITULO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										nodoChtml nuevo = new nodoChtml("ENCABEZADO");																							
										nuevo.add(iz);							
										nuevo.add(der);																								
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOENCABEZADO",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FINENCABEZADO ::= menorQue finEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("FINENCABEZADO");												
												nuevo.add(new nodoChtml("menorQue"));
												nuevo.add(new nodoChtml("finEncabezado"));
												nuevo.add(new nodoChtml("mayorQue"));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINENCABEZADO",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIOENCABEZADO ::= menorQue inicioEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("INICIOENCABEZADO");												
												nuevo.add(new nodoChtml("menorQue"));
												nuevo.add(new nodoChtml("inicioEncabezado"));
												nuevo.add(new nodoChtml("mayorQue"));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOENCABEZADO",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= INICIOENCABEZADO CONTENIDOENCABEZADO FINENCABEZADO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												RESULT=cen;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FINCHTML ::= menorQue finChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("FINCHTML");
												nuevo.add(new nodoChtml("menorQue"));
												nuevo.add(new nodoChtml("finChtml"));
												nuevo.add(new nodoChtml("mayorQue"));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINCHTML",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIOCHTML ::= menorQue inicioChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("INICIOCHTML");												
												nuevo.add(new nodoChtml("menorQue"));
												nuevo.add(new nodoChtml("inicioChtml"));
												nuevo.add(new nodoChtml("mayorQue"));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOCHTML",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CHTML ::= INICIOCHTML ENCABEZADO CUERPO FINCHTML 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int encabezadoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int encabezadoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml encabezado = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										Interfaz.raizChtml.setValue("DOCUMENTO");
										Interfaz.raizChtml.setTipo("DOCUMENTO");
										Interfaz.raizChtml.setLinea(Interfaz.contadorChtml++);
										//if(iz!=null){Interfaz.raizChtml.add(iz);}
										Interfaz.raizChtml.add(encabezado);
										Interfaz.raizChtml.add(cuerpo);
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CHTML",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CHTML EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml start_val = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

