
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 21 12:59:54 CST 2018
//----------------------------------------------------

package Source.CHTML;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.PrintWriter;
import Principal.Interfaz.*;
import Principal.Errores;
import Principal.Interfaz;
import Principal.tablaSimbolos;
import Source.CHTML.nodoChtml;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 21 12:59:54 CST 2018
  */
public class sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\006\000\002\015" +
    "\005\000\002\016\005\000\002\003\005\000\002\017\005" +
    "\000\002\020\005\000\002\014\004\000\002\010\004\000" +
    "\002\010\002\000\002\013\003\000\002\013\003\000\002" +
    "\012\014\000\002\011\014\000\002\007\011\000\002\005" +
    "\012\000\002\005\011\000\002\005\011\000\002\005\010" +
    "\000\002\006\006\000\002\006\006\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\021\012\000\002\021\011\000" +
    "\002\021\011\000\002\021\010\000\002\023\003\000\002" +
    "\024\004\000\002\024\003\000\002\022\006\000\002\022" +
    "\006\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\033\012\000\002\033\011\000\002\035\011\000" +
    "\002\035\010\000\002\035\012\000\002\035\011\000\002" +
    "\043\012\000\002\043\011\000\002\042\012\000\002\042" +
    "\011\000\002\044\003\000\002\045\004\000\002\045\004" +
    "\000\002\045\003\000\002\045\003\000\002\030\003\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\036" +
    "\003\000\002\037\004\000\002\037\004\000\002\037\003" +
    "\000\002\037\003\000\002\040\006\000\002\041\006\000" +
    "\002\046\012\000\002\046\011\000\002\047\004\000\002" +
    "\047\003\000\002\050\011\000\002\050\012\000\002\051" +
    "\004\000\002\051\004\000\002\051\003\000\002\051\003" +
    "\000\002\052\011\000\002\052\012\000\002\053\011\000" +
    "\002\053\012\000\002\054\004\000\002\054\004\000\002" +
    "\054\004\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\004\004\006\001\002\000\004\004\014\001" +
    "\002\000\004\002\011\001\002\000\004\006\007\001\002" +
    "\000\004\005\010\001\002\000\004\004\uffff\001\002\000" +
    "\004\002\001\001\002\000\004\004\ufff8\001\002\000\004" +
    "\004\017\001\002\000\004\010\015\001\002\000\004\005" +
    "\016\001\002\000\004\004\ufffc\001\002\000\004\022\025" +
    "\001\002\000\004\004\021\001\002\000\004\007\023\001" +
    "\002\000\004\002\000\001\002\000\004\005\024\001\002" +
    "\000\004\002\ufffe\001\002\000\006\005\030\024\027\001" +
    "\002\000\004\005\351\001\002\000\004\013\344\001\002" +
    "\000\004\004\036\001\002\000\004\004\uffe5\001\002\000" +
    "\004\004\341\001\002\000\004\004\uffe6\001\002\000\004" +
    "\004\uffe3\001\002\000\004\004\uffe4\001\002\000\020\023" +
    "\042\032\047\042\045\045\043\051\046\053\041\055\044" +
    "\001\002\000\004\004\uffe2\001\002\000\004\004\uffe1\001" +
    "\002\000\020\005\322\012\127\033\054\034\057\035\060" +
    "\036\052\037\056\001\002\000\004\005\320\001\002\000" +
    "\010\005\273\012\127\047\135\001\002\000\016\005\174" +
    "\033\054\034\057\035\060\036\052\037\056\001\002\000" +
    "\016\005\161\033\054\034\057\035\060\036\052\037\056" +
    "\001\002\000\022\005\131\012\127\033\054\034\057\035" +
    "\060\036\052\037\056\047\135\001\002\000\016\005\053" +
    "\033\054\034\057\035\060\036\052\037\056\001\002\000" +
    "\004\005\116\001\002\000\016\005\uffdc\033\054\034\057" +
    "\035\060\036\052\037\056\001\002\000\004\013\112\001" +
    "\002\000\004\004\076\001\002\000\004\013\072\001\002" +
    "\000\016\005\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\001\002\000\004\013\067\001\002\000\004\013\064" +
    "\001\002\000\004\013\061\001\002\000\004\026\062\001" +
    "\002\000\004\015\063\001\002\000\022\005\uffd7\012\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\047\uffd7\001" +
    "\002\000\004\026\065\001\002\000\004\015\066\001\002" +
    "\000\022\005\uffd8\012\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\047\uffd8\001\002\000\004\040\070\001\002" +
    "\000\004\015\071\001\002\000\022\005\uffd5\012\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\047\uffd5\001\002" +
    "\000\004\026\073\001\002\000\004\015\074\001\002\000" +
    "\022\005\uffd9\012\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\047\uffd9\001\002\000\004\004\105\001\002\000" +
    "\020\032\047\041\077\042\045\045\043\051\046\053\041" +
    "\055\044\001\002\000\004\005\100\001\002\000\004\004" +
    "\uffdd\001\002\000\004\004\uffeb\001\002\000\004\004\uffe9" +
    "\001\002\000\004\004\uffec\001\002\000\004\004\uffea\001" +
    "\002\000\020\032\047\041\110\042\045\045\043\051\046" +
    "\053\041\055\044\001\002\000\004\004\uffe8\001\002\000" +
    "\004\004\uffe7\001\002\000\004\005\111\001\002\000\004" +
    "\004\uffde\001\002\000\004\026\113\001\002\000\004\015" +
    "\114\001\002\000\022\005\uffd6\012\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\047\uffd6\001\002\000\016\005" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\001\002" +
    "\000\004\004\120\001\002\000\004\004\123\001\002\000" +
    "\020\032\047\041\121\042\045\045\043\051\046\053\041" +
    "\055\044\001\002\000\004\005\122\001\002\000\004\004" +
    "\uffdf\001\002\000\020\032\047\041\124\042\045\045\043" +
    "\051\046\053\041\055\044\001\002\000\004\005\125\001" +
    "\002\000\004\004\uffe0\001\002\000\022\005\uffc0\012\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\047\uffc0\001" +
    "\002\000\004\013\155\001\002\000\004\005\150\001\002" +
    "\000\004\031\144\001\002\000\022\005\uffbf\012\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\047\uffbf\001\002" +
    "\000\022\005\uffc1\012\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\047\uffc1\001\002\000\022\005\uffc5\012\127" +
    "\033\054\034\057\035\060\036\052\037\056\047\135\001" +
    "\002\000\004\013\136\001\002\000\004\046\137\001\002" +
    "\000\004\015\140\001\002\000\022\005\uffb9\012\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\047\uffb9\001\002" +
    "\000\022\005\uffc3\012\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\047\uffc3\001\002\000\022\005\uffc2\012\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\047\uffc2\001" +
    "\002\000\022\005\uffc4\012\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\047\uffc4\001\002\000\004\004\145\001" +
    "\002\000\004\052\146\001\002\000\004\005\147\001\002" +
    "\000\006\004\uffcb\031\uffcb\001\002\000\004\031\151\001" +
    "\002\000\004\004\152\001\002\000\004\052\153\001\002" +
    "\000\004\005\154\001\002\000\006\004\uffcc\031\uffcc\001" +
    "\002\000\004\014\156\001\002\000\004\015\157\001\002" +
    "\000\022\005\uffb8\012\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\047\uffb8\001\002\000\004\005\166\001\002" +
    "\000\004\031\162\001\002\000\004\004\163\001\002\000" +
    "\004\043\164\001\002\000\004\005\165\001\002\000\004" +
    "\004\uffd3\001\002\000\004\031\167\001\002\000\004\004" +
    "\170\001\002\000\004\043\171\001\002\000\004\005\172" +
    "\001\002\000\004\004\uffd4\001\002\000\004\005\265\001" +
    "\002\000\004\004\177\001\002\000\004\004\uffb4\001\002" +
    "\000\004\004\262\001\002\000\004\063\200\001\002\000" +
    "\016\005\202\033\054\034\057\035\060\036\052\037\056" +
    "\001\002\000\004\005\254\001\002\000\004\004\203\001" +
    "\002\000\006\057\212\061\214\001\002\000\004\004\uffaf" +
    "\001\002\000\004\004\207\001\002\000\004\004\uffae\001" +
    "\002\000\010\057\212\061\214\064\213\001\002\000\004" +
    "\004\uffb1\001\002\000\004\004\uffb0\001\002\000\016\005" +
    "\242\033\054\034\057\035\060\036\052\037\056\001\002" +
    "\000\004\005\240\001\002\000\016\005\216\033\054\034" +
    "\057\035\060\036\052\037\056\001\002\000\004\005\233" +
    "\001\002\000\006\004\222\031\220\001\002\000\006\004" +
    "\uffa5\031\uffa5\001\002\000\006\004\uffa3\031\uffa3\001\002" +
    "\000\006\004\uffa6\031\uffa6\001\002\000\006\045\043\051" +
    "\046\001\002\000\006\004\227\031\220\001\002\000\006" +
    "\004\uffa4\031\uffa4\001\002\000\006\004\uffa7\031\uffa7\001" +
    "\002\000\006\004\uffa9\031\uffa9\001\002\000\010\045\043" +
    "\051\046\062\231\001\002\000\006\004\uffa8\031\uffa8\001" +
    "\002\000\004\005\232\001\002\000\004\004\uffab\001\002" +
    "\000\006\004\222\031\220\001\002\000\006\004\235\031" +
    "\220\001\002\000\010\045\043\051\046\062\236\001\002" +
    "\000\004\005\237\001\002\000\004\004\uffaa\001\002\000" +
    "\004\004\uffb3\001\002\000\004\005\247\001\002\000\006" +
    "\004\222\031\220\001\002\000\006\004\244\031\220\001" +
    "\002\000\010\045\043\051\046\060\245\001\002\000\004" +
    "\005\246\001\002\000\004\004\uffad\001\002\000\006\004" +
    "\222\031\220\001\002\000\006\004\251\031\220\001\002" +
    "\000\010\045\043\051\046\060\252\001\002\000\004\005" +
    "\253\001\002\000\004\004\uffac\001\002\000\004\004\203" +
    "\001\002\000\004\004\256\001\002\000\010\057\212\061" +
    "\214\064\257\001\002\000\004\005\260\001\002\000\004" +
    "\004\uffb2\001\002\000\004\004\uffb5\001\002\000\006\056" +
    "\263\063\200\001\002\000\004\005\264\001\002\000\004" +
    "\004\uffb6\001\002\000\004\004\177\001\002\000\004\004" +
    "\267\001\002\000\006\056\270\063\200\001\002\000\004" +
    "\005\271\001\002\000\004\004\uffb7\001\002\000\010\005" +
    "\uffba\012\uffba\047\uffba\001\002\000\006\004\311\050\312" +
    "\001\002\000\010\005\uffbb\012\uffbb\047\uffbb\001\002\000" +
    "\010\005\uffbe\012\127\047\135\001\002\000\004\005\277" +
    "\001\002\000\006\004\300\050\301\001\002\000\004\044" +
    "\305\001\002\000\004\004\302\001\002\000\004\044\303" +
    "\001\002\000\004\005\304\001\002\000\006\004\uffd0\031" +
    "\uffd0\001\002\000\004\005\306\001\002\000\006\004\uffcf" +
    "\031\uffcf\001\002\000\010\005\uffbc\012\uffbc\047\uffbc\001" +
    "\002\000\010\005\uffbd\012\uffbd\047\uffbd\001\002\000\004" +
    "\044\316\001\002\000\004\004\313\001\002\000\004\044" +
    "\314\001\002\000\004\005\315\001\002\000\006\004\uffd2" +
    "\031\uffd2\001\002\000\004\005\317\001\002\000\006\004" +
    "\uffd1\031\uffd1\001\002\000\004\004\uffef\001\002\000\020" +
    "\005\uffc6\012\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\001\002\000\004\031\335\001\002\000\004\005\330" +
    "\001\002\000\020\005\uffc7\012\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\001\002\000\020\005\uffca\012\127" +
    "\033\054\034\057\035\060\036\052\037\056\001\002\000" +
    "\020\005\uffc8\012\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\001\002\000\020\005\uffc9\012\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\001\002\000\004\031\331" +
    "\001\002\000\004\004\332\001\002\000\004\054\333\001" +
    "\002\000\004\005\334\001\002\000\004\004\uffce\001\002" +
    "\000\004\004\336\001\002\000\004\054\337\001\002\000" +
    "\004\005\340\001\002\000\004\004\uffcd\001\002\000\020" +
    "\023\342\032\047\042\045\045\043\051\046\053\041\055" +
    "\044\001\002\000\004\005\343\001\002\000\004\004\ufff0" +
    "\001\002\000\006\025\345\026\346\001\002\000\004\015" +
    "\350\001\002\000\004\015\347\001\002\000\004\005\uffed" +
    "\001\002\000\004\005\uffee\001\002\000\004\004\353\001" +
    "\002\000\004\004\356\001\002\000\020\023\354\032\047" +
    "\042\045\045\043\051\046\053\041\055\044\001\002\000" +
    "\004\005\355\001\002\000\004\004\ufff1\001\002\000\020" +
    "\023\357\032\047\042\045\045\043\051\046\053\041\055" +
    "\044\001\002\000\004\005\360\001\002\000\004\004\ufff2" +
    "\001\002\000\004\004\371\001\002\000\004\004\364\001" +
    "\002\000\004\004\ufffd\001\002\000\004\021\365\001\002" +
    "\000\004\005\366\001\002\000\004\004\ufffb\001\002\000" +
    "\004\004\ufffa\001\002\000\004\004\ufff6\001\002\000\010" +
    "\011\376\017\374\027\375\001\002\000\004\004\ufff9\001" +
    "\002\000\004\004\ufff7\001\002\000\004\012\u010c\001\002" +
    "\000\004\005\u0107\001\002\000\004\012\377\001\002\000" +
    "\004\013\u0100\001\002\000\004\014\u0101\001\002\000\004" +
    "\015\u0102\001\002\000\004\005\u0103\001\002\000\004\004" +
    "\u0104\001\002\000\004\016\u0105\001\002\000\004\005\u0106" +
    "\001\002\000\004\004\ufff5\001\002\000\004\031\u0108\001" +
    "\002\000\004\004\u0109\001\002\000\004\030\u010a\001\002" +
    "\000\004\005\u010b\001\002\000\004\004\ufff3\001\002\000" +
    "\004\013\u010d\001\002\000\004\014\u010e\001\002\000\004" +
    "\015\u010f\001\002\000\004\005\u0110\001\002\000\004\004" +
    "\u0111\001\002\000\004\020\u0112\001\002\000\004\005\u0113" +
    "\001\002\000\004\004\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\006\002\004\015\003\001\001\000\006\003" +
    "\012\017\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\360\014\361\001\001\000\004\005\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\021\032\025\031\033\030\035\034\042\033\043" +
    "\036\046\037\001\001\000\002\001\001\000\016\021\102" +
    "\033\100\035\103\042\101\043\105\046\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\323\041\320\044\322\045\324\001\001\000\002\001\001" +
    "\000\012\036\275\037\274\040\273\041\271\001\001\000" +
    "\010\022\054\023\172\024\050\001\001\000\010\022\054" +
    "\023\157\024\050\001\001\000\014\022\131\030\127\031" +
    "\133\040\132\041\125\001\001\000\010\022\054\023\047" +
    "\024\050\001\001\000\002\001\001\000\004\022\114\001" +
    "\001\000\002\001\001\000\020\021\032\025\074\033\030" +
    "\035\034\042\033\043\036\046\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\102\033\100\035\103\042\101\043\105\046" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\032\025\116\033\030\035\034\042" +
    "\033\043\036\046\037\001\001\000\016\021\102\033\100" +
    "\035\103\042\101\043\105\046\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\141\040\142\041" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\175\050\174\001\001\000\002\001\001\000\004\050\260" +
    "\001\001\000\002\001\001\000\010\022\054\023\200\024" +
    "\050\001\001\000\002\001\001\000\010\051\204\052\203" +
    "\053\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\052\207\053\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\054\023\240\024\050\001\001\000\002\001\001\000\010" +
    "\022\054\023\214\024\050\001\001\000\002\001\001\000" +
    "\012\035\220\042\216\054\222\055\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\035\225\042\224\055\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\035\220\042\216\054\233\055\223\001\001\000" +
    "\010\035\225\042\224\055\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\220\042\216\054\242\055\223" +
    "\001\001\000\010\035\225\042\224\055\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\035\220\042\216\054\247\055\223\001\001\000\010\035" +
    "\225\042\224\055\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\051\254\052\203\053" +
    "\205\001\001\000\006\052\207\053\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\265\050\174\001\001\000\004\050\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\307\041\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\326\041" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\032\025\351\033\030\035\034\042\033" +
    "\043\036\046\037\001\001\000\016\021\102\033\100\035" +
    "\103\042\101\043\105\046\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\366\011\367" +
    "\012\372\013\371\001\001\000\004\020\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public static String ConvertirObjectToString(Object Obj)
	 {
		String Str="";
		if(Obj!=null)
		{
			Str = Obj.toString();
		}
		return Str;
	}


	public static void erroresSintacticos(Symbol s)
	{
		System.out.println("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"");
		Errores errores_sintacticos=new Errores();
		errores_sintacticos.setTipo("Sintactico");
		errores_sintacticos.setLinea(s.right+1);
		errores_sintacticos.setColumna(s.left);
		errores_sintacticos.setDescripcion(ConvertirObjectToString(s.value));
		//sintactico.listaSintactico.add(errores_sintacticos);
		Interfaz.erroresSintacticos.add(errores_sintacticos);

	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CADENA ::= cadena 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("CADENA", Interfaz.contadorChtml++);
						nuevo.getHijos().add(new nodoChtml(cad,Interfaz.contadorChtml++));
						RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CADENA",43, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTENIDOCELDA ::= CADENA 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml cad = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("CONTENIDOCELDA", Interfaz.contadorChtml++);
						nuevo.getHijos().add(cad);
						RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTENIDOCELDA ::= BOTON 
            {
              nodoChtml RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("CONTENIDOCELDA", Interfaz.contadorChtml++);
								if(c!=null){nuevo.getHijos().add(c);}
								RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTENIDOCELDA ::= IMAGEN 
            {
              nodoChtml RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("CONTENIDOCELDA", Interfaz.contadorChtml++);
								if(c!=null){nuevo.getHijos().add(c);}
								RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDOCELDA ::= CONTENIDOCELDA BOTON 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("CONTENIDOCELDA", Interfaz.contadorChtml++);
								if(l!=null){nuevo.getHijos().add(l);}
								if(b!=null){nuevo.getHijos().add(b);}
								RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDOCELDA ::= CONTENIDOCELDA CADENA 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("CONTENIDOCELDA", Interfaz.contadorChtml++);
								if(l!=null){nuevo.getHijos().add(l);}
								if(b!=null){nuevo.getHijos().add(b);}
								RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDOCELDA ::= CONTENIDOCELDA IMAGEN 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("CONTENIDOCELDA", Interfaz.contadorChtml++);
								if(l!=null){nuevo.getHijos().add(l);}
								if(b!=null){nuevo.getHijos().add(b);}
								RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CELDAC ::= menorQue inicioCeldaCabecera ELEMENTOS mayorQue CONTENIDOCELDA menorQue finCeldaCabecera mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										nodoChtml nuevo = new nodoChtml("CELDAC",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioCeldaCabecera",Interfaz.contadorChtml++));																				
										if(elementos!=null){nuevo.getHijos().add(elementos);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										if(contenido!=null){nuevo.getHijos().add(contenido);}																												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finCeldaCabecera",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDAC",41, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CELDAC ::= menorQue inicioCeldaCabecera mayorQue CONTENIDOCELDA menorQue finCeldaCabecera mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										nodoChtml nuevo = new nodoChtml("CELDAC",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioCeldaCabecera",Interfaz.contadorChtml++));																															
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										if(contenido!=null){nuevo.getHijos().add(contenido);}																												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finCeldaCabecera",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDAC",41, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CELDA ::= menorQue inicioCelda ELEMENTOS mayorQue CONTENIDOCELDA menorQue finCelda mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										nodoChtml nuevo = new nodoChtml("CELDA",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioCelda",Interfaz.contadorChtml++));																				
										if(elementos!=null){nuevo.getHijos().add(elementos);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										if(contenido!=null){nuevo.getHijos().add(contenido);}																												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finCelda",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDA",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CELDA ::= menorQue inicioCelda mayorQue CONTENIDOCELDA menorQue finCelda mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										nodoChtml nuevo = new nodoChtml("CELDA",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioCelda",Interfaz.contadorChtml++));																															
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										if(contenido!=null){nuevo.getHijos().add(contenido);}																												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finCelda",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDA",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTACELDA ::= CELDAC 
            {
              nodoChtml RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("LISTACELDA", Interfaz.contadorChtml++);
					if(c!=null){nuevo.getHijos().add(c);}					
					RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTACELDA ::= CELDA 
            {
              nodoChtml RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("LISTACELDA", Interfaz.contadorChtml++);
					if(c!=null){nuevo.getHijos().add(c);}					
					RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTACELDA ::= LISTACELDA CELDAC 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("LISTACELDA", Interfaz.contadorChtml++);
					if(l!=null){nuevo.getHijos().add(l);}
					if(c!=null){nuevo.getHijos().add(c);}					
					RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTACELDA ::= LISTACELDA CELDA 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("LISTACELDA", Interfaz.contadorChtml++);
					if(l!=null){nuevo.getHijos().add(l);}
					if(c!=null){nuevo.getHijos().add(c);}					
					RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FILA ::= menorQue inicioFila ELEMENTOS mayorQue LISTACELDA menorQue finFila mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int celdasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int celdasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml celdas = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										nodoChtml nuevo = new nodoChtml("FILA",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioFila",Interfaz.contadorChtml++));																				
										if(elementos!=null){nuevo.getHijos().add(elementos);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										if(celdas!=null){nuevo.getHijos().add(celdas);}																												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finFila",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FILA",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FILA ::= menorQue inicioFila mayorQue LISTACELDA menorQue finFila mayorQue 
            {
              nodoChtml RESULT =null;
		int celdasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int celdasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml celdas = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										nodoChtml nuevo = new nodoChtml("FILA",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioFila",Interfaz.contadorChtml++));																				
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										if(celdas!=null){nuevo.getHijos().add(celdas);}										
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finFila",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FILA",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTAFILA ::= FILA 
            {
              nodoChtml RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml f = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
					nodoChtml nuevo = new nodoChtml("LISTAFILA",Interfaz.contadorChtml++);																									
					if(f!=null){nuevo.getHijos().add(f);}	
					RESULT=nuevo;
					
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAFILA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTAFILA ::= LISTAFILA FILA 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml f = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								nodoChtml nuevo = new nodoChtml("LISTAFILA",Interfaz.contadorChtml++);												
								if(l!=null){nuevo.getHijos().add(l);}									
								if(f!=null){nuevo.getHijos().add(f);}	
								RESULT=nuevo;
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAFILA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TABLA ::= menorQue inicioTabla mayorQue LISTAFILA menorQue finTabla mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										nodoChtml nuevo = new nodoChtml("TABLA",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioTabla",Interfaz.contadorChtml++));																				
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										//if(contenido!=null){nuevo.getHijos().add(contenido);}									
										nuevo.getHijos().add(new nodoChtml("finTabla",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TABLA ::= menorQue inicioTabla ELEMENTOS mayorQue LISTAFILA menorQue finTabla mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										nodoChtml nuevo = new nodoChtml("TABLA",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioTabla",Interfaz.contadorChtml++));
										if(e!=null){nuevo.getHijos().add(e);}											
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										if(contenido!=null){nuevo.getHijos().add(contenido);}									
										nuevo.getHijos().add(new nodoChtml("finTabla",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RUTA ::= ruta asignacion pathComillas puntoComa 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
										nodoChtml nuevo = new nodoChtml("RUTA",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("ruta",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));											
										nuevo.getHijos().add(new nodoChtml("path",Interfaz.contadorChtml++, new nodoChtml(path,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RUTA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CLICK ::= click asignacion metodo puntoComa 
            {
              nodoChtml RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String met = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
										nodoChtml nuevo = new nodoChtml("CLICK",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("click",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));											
										nuevo.getHijos().add(new nodoChtml("metodo",Interfaz.contadorChtml++, new nodoChtml(met,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CLICK",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EI1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("EI1",Interfaz.contadorChtml++);												
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EI1 ::= CLICK 
            {
              nodoChtml RESULT =null;
		int clickleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int clickright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml click = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("EI1",Interfaz.contadorChtml++);												
			if(click!=null){nuevo.getHijos().add(click);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EI1 ::= EI1 RUTA 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("EI1",Interfaz.contadorChtml++);												
			if(e!=null){nuevo.getHijos().add(e);}
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EI1 ::= EI1 CLICK 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("EI1",Interfaz.contadorChtml++);												
			if(e!=null){nuevo.getHijos().add(e);}
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EI ::= EI1 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("EI",Interfaz.contadorChtml++);												
			if(e!=null){nuevo.getHijos().add(e);}			
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ATRIBUTOS1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				nodoChtml nuevo = new nodoChtml("ATRIBUTOS",Interfaz.contadorChtml++);												
				if(e!=null){nuevo.getHijos().add(e);}			
				RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ATRIBUTOS1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				nodoChtml nuevo = new nodoChtml("ATRIBUTOS",Interfaz.contadorChtml++);												
				if(e!=null){nuevo.getHijos().add(e);}			
				RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ATRIBUTOS1 ::= CLICK 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				nodoChtml nuevo = new nodoChtml("ATRIBUTOS",Interfaz.contadorChtml++);												
				if(e!=null){nuevo.getHijos().add(e);}			
				RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ATRIBUTOS1 ::= ATRIBUTOS1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								nodoChtml nuevo = new nodoChtml("ATRIBUTOS1",Interfaz.contadorChtml++);												
								if(a!=null){nuevo.getHijos().add(a);}			
								if(c!=null){nuevo.getHijos().add(c);}			
								RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATRIBUTOS1 ::= ATRIBUTOS1 RUTA 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								nodoChtml nuevo = new nodoChtml("ATRIBUTOS1",Interfaz.contadorChtml++);												
								if(a!=null){nuevo.getHijos().add(a);}			
								if(c!=null){nuevo.getHijos().add(c);}			
								RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ATRIBUTOS1 ::= ATRIBUTOS1 CLICK 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								nodoChtml nuevo = new nodoChtml("ATRIBUTOS1",Interfaz.contadorChtml++);												
								if(a!=null){nuevo.getHijos().add(a);}			
								if(c!=null){nuevo.getHijos().add(c);}			
								RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ATRIBUTOS ::= ATRIBUTOS1 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("ATRIBUTOS",Interfaz.contadorChtml++);												
			if(e!=null){nuevo.getHijos().add(e);}			
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AE1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("AE1",Interfaz.contadorChtml++);
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AE1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("AE1",Interfaz.contadorChtml++);
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AE1 ::= AE1 RUTA 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("AE1",Interfaz.contadorChtml++);
			if(a!=null){nuevo.getHijos().add(a);}	
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AE1 ::= AE1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("AE1",Interfaz.contadorChtml++);
			if(a!=null){nuevo.getHijos().add(a);}
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AE ::= AE1 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		nodoChtml nuevo = new nodoChtml("AE",Interfaz.contadorChtml++);
			if(r!=null){nuevo.getHijos().add(r);}
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BOTON ::= menorQue inicioBoton mayorQue cadena menorQue finBoton mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("BOTON",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioBoton",Interfaz.contadorChtml++));
										
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(cad,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finBoton",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BOTON ::= menorQue inicioBoton ATRIBUTOS mayorQue cadena menorQue finBoton mayorQue 
            {
              nodoChtml RESULT =null;
		int atribleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml atrib = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("BOTON",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioBoton",Interfaz.contadorChtml++));
										if(atrib!=null){nuevo.getHijos().add(atrib);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(cad,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finBoton",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ENLACE ::= menorQue inicioEnlace mayorQue cadena menorQue finEnlace mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("ENLACE",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioEnlace",Interfaz.contadorChtml++));
										//if(ae!=null){nuevo.getHijos().add(ae);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(cad,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finEnlace",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENLACE",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ENLACE ::= menorQue inicioEnlace AE mayorQue cadena menorQue finEnlace mayorQue 
            {
              nodoChtml RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml ae = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("ENLACE",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioEnlace",Interfaz.contadorChtml++));
										if(ae!=null){nuevo.getHijos().add(ae);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(cad,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finEnlace",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENLACE",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMAGEN ::= menorQue inicioImagen EI mayorQue menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioImagen",Interfaz.contadorChtml++));
										if(e!=null){nuevo.getHijos().add(e);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										//nuevo.getHijos().add(new nodoChtml("path",Interfaz.contadorChtml++, new nodoChtml(ruta,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finImagen",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMAGEN ::= menorQue inicioImagen EI mayorQue path menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioImagen",Interfaz.contadorChtml++));
										if(e!=null){nuevo.getHijos().add(e);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("path",Interfaz.contadorChtml++, new nodoChtml(ruta,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finImagen",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IMAGEN ::= menorQue inicioImagen mayorQue menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioImagen",Interfaz.contadorChtml++));
//										if(elementos!=null){nuevo.getHijos().add(elementos);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										//nuevo.getHijos().add(new nodoChtml("path",Interfaz.contadorChtml++, new nodoChtml(ruta,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finImagen",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IMAGEN ::= menorQue inicioImagen mayorQue path menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioImagen",Interfaz.contadorChtml++));
//										if(elementos!=null){nuevo.getHijos().add(elementos);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("path",Interfaz.contadorChtml++, new nodoChtml(ruta,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finImagen",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TEXTO ::= menorQue inicioTexto mayorQue cadena menorQue finTexto mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("TEXTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioTexto",Interfaz.contadorChtml++));										
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(cad,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finTexto",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TEXTO ::= menorQue inicioTexto ELEMENTOS mayorQue cadena menorQue finTexto mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("TEXTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("inicioTexto",Interfaz.contadorChtml++));
										if(elementos!=null){nuevo.getHijos().add(elementos);}	
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(cad,Interfaz.contadorChtml++)));																																													
										nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("finTexto",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTO ::= alineado asignacion valorAlineado puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("alineado",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("valorAlineado",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTO ::= ancho asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("ancho",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO ::= alto asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
										nuevo.getHijos().add(new nodoChtml("alto",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
										nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
										nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTO ::= grupo asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
											nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
											nuevo.getHijos().add(new nodoChtml("grupo",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
											nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
											RESULT=nuevo;
											
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTO ::= idCcss asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
											nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);												
											nuevo.getHijos().add(new nodoChtml("idCcss",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
											nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id,Interfaz.contadorChtml++)));
											nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																																													
											RESULT=nuevo;
											
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTOS1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("ELEMENTO",Interfaz.contadorChtml++);
							if(r!=null){nuevo.getHijos().add(r);}							
							RESULT= nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS1",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELEMENTOS1 ::= ELEMENTOS1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("ELEMENTOS1",Interfaz.contadorChtml++);
							if(iz!=null){nuevo.getHijos().add(iz);}
							if(der!=null){nuevo.getHijos().add(der);}
							RESULT= nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS1",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELEMENTOS ::= ELEMENTOS1 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("ELEMENTOS",Interfaz.contadorChtml++);
						if(r!=null){nuevo.getHijos().add(r);}							
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PANEL ::= menorQue inicioPanel mayorQue menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("PANEL",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioPanel",Interfaz.contadorChtml++));
												//if(elementos!=null){nuevo.getHijos().add(elementos);}	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																									
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finPanel",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PANEL ::= menorQue inicioPanel mayorQue CONTENIDOCUERPO menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioPanel",Interfaz.contadorChtml++));
												//if(elementos!=null){nuevo.getHijos().add(elementos);}	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));												
												if(contenido!=null){nuevo.getHijos().add(contenido);}	
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finPanel",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PANEL ::= menorQue inicioPanel ELEMENTOS mayorQue menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioPanel",Interfaz.contadorChtml++));
												if(elementos!=null){nuevo.getHijos().add(elementos);}	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																									
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finPanel",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PANEL ::= menorQue inicioPanel ELEMENTOS mayorQue CONTENIDOCUERPO menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioPanel",Interfaz.contadorChtml++));
												if(elementos!=null){nuevo.getHijos().add(elementos);}	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));												
												if(contenido!=null){nuevo.getHijos().add(contenido);}	
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finPanel",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOCUERPO ::= TABLA 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(t!=null){nuevo.getHijos().add(t);}																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOCUERPO ::= ENLACE 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(t!=null){nuevo.getHijos().add(t);}																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOCUERPO ::= BOTON 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(t!=null){nuevo.getHijos().add(t);}																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDOCUERPO ::= IMAGEN 
            {
              nodoChtml RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(texto!=null){nuevo.getHijos().add(texto);}																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDOCUERPO ::= TEXTO 
            {
              nodoChtml RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(texto!=null){nuevo.getHijos().add(texto);}																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDOCUERPO ::= PANEL 
            {
              nodoChtml RESULT =null;
		int panelleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int panelright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml panel = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);																			
							if(panel!=null){nuevo.getHijos().add(panel);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDOCUERPO ::= CONTENIDOCUERPO TABLA 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(b!=null){nuevo.getHijos().add(b);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDOCUERPO ::= CONTENIDOCUERPO ENLACE 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(b!=null){nuevo.getHijos().add(b);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDOCUERPO ::= CONTENIDOCUERPO BOTON 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(b!=null){nuevo.getHijos().add(b);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDOCUERPO ::= CONTENIDOCUERPO IMAGEN 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(texto!=null){nuevo.getHijos().add(texto);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDOCUERPO ::= CONTENIDOCUERPO TEXTO 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(texto!=null){nuevo.getHijos().add(texto);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDOCUERPO ::= CONTENIDOCUERPO PANEL 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int panelleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int panelright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml panel = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDOCUERPO",Interfaz.contadorChtml++);												
							if(cuerpo!=null){nuevo.getHijos().add(cuerpo);}	
							if(panel!=null){nuevo.getHijos().add(panel);}																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTILOCUERPO ::= fondo asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
												nodoChtml nuevo = new nodoChtml("ESTILOCUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("fondo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("id",Interfaz.contadorChtml++, new nodoChtml(id, 
																			Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTILOCUERPO ::= fondo asignacion rgb puntoComa 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("ESTILOCUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("fondo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("rgb",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= menorQue inicioCuerpo mayorQue menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));												
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= menorQue inicioCuerpo mayorQue CONTENIDOCUERPO menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));												
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												if(contenido!=null){nuevo.getHijos().add(contenido);}
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= menorQue inicioCuerpo ESTILOCUERPO mayorQue menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int estiloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int estiloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml estilo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));
												if(estilo!=null){nuevo.getHijos().add(estilo);}
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= menorQue inicioCuerpo ESTILOCUERPO mayorQue CONTENIDOCUERPO menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int estiloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int estiloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml estilo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCuerpo",Interfaz.contadorChtml++));
												if(estilo!=null){nuevo.getHijos().add(estilo);}
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												if(contenido!=null){nuevo.getHijos().add(contenido);}
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));																							
												nuevo.getHijos().add(new nodoChtml("finCuerpo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TITULO ::= menorQue inicioTitulo mayorQue cadena menorQue finTitulo mayorQue 
            {
              nodoChtml RESULT =null;
		int valCadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int valCadenaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String valCadena = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("TITULO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioTitulo",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("cadena",Interfaz.contadorChtml++, new nodoChtml(valCadena,Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finTitulo",Interfaz.contadorChtml++));	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TITULO",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFCCSS ::= menorQue inicioCcss ruta asignacion pathComillas puntoComa mayorQue menorQue finCcss mayorQue 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		 
												nodoChtml nuevo = new nodoChtml("DEFCCSS",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCcss",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("ruta",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("pathComillas",Interfaz.contadorChtml++, new nodoChtml(path,
																			Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finCcss",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCCSS",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFCJS ::= menorQue inicioCjs ruta asignacion pathComillas puntoComa mayorQue menorQue finCjs mayorQue 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		 
												nodoChtml nuevo = new nodoChtml("DEFCJS",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioCjs",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("ruta",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("asignacion",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("pathComillas",Interfaz.contadorChtml++, new nodoChtml(path,
																			Interfaz.contadorChtml++)));
												nuevo.getHijos().add(new nodoChtml("puntoComa",Interfaz.contadorChtml++));	
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finCjs",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCJS",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFARCHIVO ::= DEFCCSS 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("DEFARCHIVO",Interfaz.contadorChtml++);							
							if(r!=null){nuevo.getHijos().add(r);}							
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFARCHIVO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFARCHIVO ::= DEFCJS 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("DEFARCHIVO",Interfaz.contadorChtml++);							
							if(r!=null){nuevo.getHijos().add(r);}							
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFARCHIVO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTAARCHIVOS ::= 
            {
              nodoChtml RESULT =null;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARCHIVOS",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAARCHIVOS ::= LISTAARCHIVOS DEFARCHIVO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
												nodoChtml nuevo = new nodoChtml("LISTAARCHIVOS",Interfaz.contadorChtml++);												
												if(iz!=null){nuevo.getHijos().add(iz);}
												if(der!=null){nuevo.getHijos().add(der);}							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARCHIVOS",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDOENCABEZADO ::= LISTAARCHIVOS TITULO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										nodoChtml nuevo = new nodoChtml("CONTENIDOENCABEZADO",Interfaz.contadorChtml++);												
										if(iz!=null){nuevo.getHijos().add(iz);}								
										if(der!=null){nuevo.getHijos().add(der);}																								
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOENCABEZADO",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FINENCABEZADO ::= menorQue finEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("FINENCABEZADO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finEncabezado",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINENCABEZADO",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIOENCABEZADO ::= menorQue inicioEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("INICIOENCABEZADO",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioEncabezado",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOENCABEZADO",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= INICIOENCABEZADO CONTENIDOENCABEZADO FINENCABEZADO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("ENCABEZADO",Interfaz.contadorChtml++);												
												if(iz!=null){nuevo.getHijos().add(iz);}
												if(cen!=null){nuevo.getHijos().add(cen);}
												if(der!=null){nuevo.getHijos().add(der);}
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FINCHTML ::= menorQue finChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("FINCHTML",Interfaz.contadorChtml++);
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("finChtml",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINCHTML",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIOCHTML ::= menorQue inicioChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("INICIOCHTML",Interfaz.contadorChtml++);												
												nuevo.getHijos().add(new nodoChtml("menorQue",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("inicioChtml",Interfaz.contadorChtml++));
												nuevo.getHijos().add(new nodoChtml("mayorQue",Interfaz.contadorChtml++));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOCHTML",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CHTML ::= INICIOCHTML ENCABEZADO CUERPO FINCHTML 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml cen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										Interfaz.raizChtml.setValue("DOCUMENTO");
										Interfaz.raizChtml.setTipo("DOCUMENTO");
										Interfaz.raizChtml.setLinea(Interfaz.contadorChtml++);
										if(iz!=null){Interfaz.raizChtml.getHijos().add(iz);}
										if(cen!=null){Interfaz.raizChtml.getHijos().add(cen);}
										if(cuerpo!=null){Interfaz.raizChtml.getHijos().add(cuerpo);}
										if(der!=null){Interfaz.raizChtml.getHijos().add(der);}
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CHTML",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CHTML EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml start_val = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

