
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 26 10:36:28 CST 2018
//----------------------------------------------------

package Source.CHTML;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.PrintWriter;
import Principal.Interfaz.*;
import Principal.Errores;
import Principal.Interfaz;
import Principal.tablaSimbolos;
import Source.CHTML.nodoChtml;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 26 10:36:28 CST 2018
  */
public class sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\006\000\002\015" +
    "\005\000\002\016\005\000\002\003\005\000\002\017\005" +
    "\000\002\020\005\000\002\014\004\000\002\010\004\000" +
    "\002\010\002\000\002\013\003\000\002\013\003\000\002" +
    "\012\014\000\002\011\014\000\002\007\011\000\002\005" +
    "\012\000\002\005\011\000\002\005\011\000\002\005\010" +
    "\000\002\006\006\000\002\006\006\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\021\012\000\002\021\011\000\002\021\011\000\002" +
    "\021\010\000\002\023\003\000\002\024\004\000\002\024" +
    "\003\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\022\006\000\002\033\012\000" +
    "\002\033\011\000\002\035\011\000\002\035\010\000\002" +
    "\035\012\000\002\035\011\000\002\043\012\000\002\043" +
    "\011\000\002\044\003\000\002\045\004\000\002\045\004" +
    "\000\002\045\003\000\002\045\003\000\002\042\012\000" +
    "\002\042\011\000\002\030\003\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\036\003\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\040\006\000\002" +
    "\041\006\000\002\046\012\000\002\046\011\000\002\047" +
    "\004\000\002\047\003\000\002\050\011\000\002\050\012" +
    "\000\002\051\004\000\002\051\004\000\002\051\003\000" +
    "\002\051\003\000\002\052\011\000\002\052\012\000\002" +
    "\053\011\000\002\053\012\000\002\054\004\000\002\054" +
    "\004\000\002\054\004\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\055\003\000\002\056\012\000" +
    "\002\056\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\004\004\006\001\002\000\004\004\014\001" +
    "\002\000\004\002\011\001\002\000\004\006\007\001\002" +
    "\000\004\005\010\001\002\000\004\004\uffff\001\002\000" +
    "\004\002\001\001\002\000\004\004\ufff8\001\002\000\004" +
    "\004\017\001\002\000\004\010\015\001\002\000\004\005" +
    "\016\001\002\000\004\004\ufffc\001\002\000\004\022\025" +
    "\001\002\000\004\004\021\001\002\000\004\007\023\001" +
    "\002\000\004\002\000\001\002\000\004\005\024\001\002" +
    "\000\004\002\ufffe\001\002\000\006\005\030\024\027\001" +
    "\002\000\004\005\371\001\002\000\004\013\364\001\002" +
    "\000\004\004\031\001\002\000\022\023\362\032\061\042" +
    "\057\045\056\051\060\053\052\055\055\065\054\001\002" +
    "\000\004\004\uffe2\001\002\000\004\004\uffe4\001\002\000" +
    "\004\004\uffe1\001\002\000\004\004\uffe5\001\002\000\004" +
    "\004\047\001\002\000\004\004\uffe0\001\002\000\004\004" +
    "\uffdf\001\002\000\004\004\uffe3\001\002\000\004\004\uffe6" +
    "\001\002\000\004\004\uffeb\001\002\000\004\004\uffe9\001" +
    "\002\000\004\004\uffec\001\002\000\004\004\uffea\001\002" +
    "\000\022\023\053\032\061\042\057\045\056\051\060\053" +
    "\052\055\055\065\054\001\002\000\004\004\uffe8\001\002" +
    "\000\004\004\uffe7\001\002\000\020\005\343\012\133\033" +
    "\066\034\071\035\072\036\064\037\070\001\002\000\004" +
    "\005\341\001\002\000\016\005\327\033\066\034\071\035" +
    "\072\036\064\037\070\001\002\000\016\005\230\033\066" +
    "\034\071\035\072\036\064\037\070\001\002\000\022\005" +
    "\200\012\133\033\066\034\071\035\072\036\064\037\070" +
    "\047\141\001\002\000\016\005\165\033\066\034\071\035" +
    "\072\036\064\037\070\001\002\000\022\005\135\012\133" +
    "\033\066\034\071\035\072\036\064\037\070\047\141\001" +
    "\002\000\016\005\065\033\066\034\071\035\072\036\064" +
    "\037\070\001\002\000\004\005\122\001\002\000\016\005" +
    "\uffda\033\066\034\071\035\072\036\064\037\070\001\002" +
    "\000\004\013\116\001\002\000\004\004\107\001\002\000" +
    "\004\013\104\001\002\000\016\005\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\001\002\000\004\013\101\001" +
    "\002\000\004\013\076\001\002\000\004\013\073\001\002" +
    "\000\004\026\074\001\002\000\004\015\075\001\002\000" +
    "\022\005\uffd5\012\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\047\uffd5\001\002\000\004\026\077\001\002\000" +
    "\004\015\100\001\002\000\022\005\uffd6\012\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\047\uffd6\001\002\000" +
    "\004\040\102\001\002\000\004\015\103\001\002\000\022" +
    "\005\uffd3\012\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\047\uffd3\001\002\000\004\026\105\001\002\000\004" +
    "\015\106\001\002\000\022\005\uffd7\012\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\047\uffd7\001\002\000\022" +
    "\032\061\041\114\042\057\045\056\051\060\053\052\055" +
    "\055\065\054\001\002\000\004\004\111\001\002\000\022" +
    "\032\061\041\112\042\057\045\056\051\060\053\052\055" +
    "\055\065\054\001\002\000\004\005\113\001\002\000\004" +
    "\004\uffdc\001\002\000\004\005\115\001\002\000\004\004" +
    "\uffdb\001\002\000\004\026\117\001\002\000\004\015\120" +
    "\001\002\000\022\005\uffd4\012\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\047\uffd4\001\002\000\016\005\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\001\002\000" +
    "\004\004\123\001\002\000\022\032\061\041\130\042\057" +
    "\045\056\051\060\053\052\055\055\065\054\001\002\000" +
    "\004\004\125\001\002\000\022\032\061\041\126\042\057" +
    "\045\056\051\060\053\052\055\055\065\054\001\002\000" +
    "\004\005\127\001\002\000\004\004\uffde\001\002\000\004" +
    "\005\131\001\002\000\004\004\uffdd\001\002\000\022\005" +
    "\uffbe\012\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\047\uffbe\001\002\000\004\013\161\001\002\000\004\005" +
    "\154\001\002\000\004\031\150\001\002\000\022\005\uffbd" +
    "\012\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\047" +
    "\uffbd\001\002\000\022\005\uffbf\012\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\047\uffbf\001\002\000\022\005" +
    "\uffc3\012\133\033\066\034\071\035\072\036\064\037\070" +
    "\047\141\001\002\000\004\013\142\001\002\000\004\046" +
    "\143\001\002\000\004\015\144\001\002\000\022\005\uffb5" +
    "\012\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\047" +
    "\uffb5\001\002\000\022\005\uffc1\012\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\047\uffc1\001\002\000\022\005" +
    "\uffc0\012\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\047\uffc0\001\002\000\022\005\uffc2\012\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\047\uffc2\001\002\000\004" +
    "\004\151\001\002\000\004\052\152\001\002\000\004\005" +
    "\153\001\002\000\006\004\uffc4\031\uffc4\001\002\000\004" +
    "\031\155\001\002\000\004\004\156\001\002\000\004\052" +
    "\157\001\002\000\004\005\160\001\002\000\006\004\uffc5" +
    "\031\uffc5\001\002\000\004\014\162\001\002\000\004\015" +
    "\163\001\002\000\022\005\uffb4\012\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\047\uffb4\001\002\000\004\005" +
    "\172\001\002\000\004\031\166\001\002\000\004\004\167" +
    "\001\002\000\004\043\170\001\002\000\004\005\171\001" +
    "\002\000\004\004\uffd1\001\002\000\004\031\173\001\002" +
    "\000\004\004\174\001\002\000\004\043\175\001\002\000" +
    "\004\005\176\001\002\000\004\004\uffd2\001\002\000\022" +
    "\005\uffb7\012\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\047\uffb7\001\002\000\006\004\220\050\221\001\002" +
    "\000\022\005\uffbc\012\133\033\066\034\071\035\072\036" +
    "\064\037\070\047\141\001\002\000\022\005\uffb6\012\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\047\uffb6\001" +
    "\002\000\022\005\uffb8\012\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\047\uffb8\001\002\000\004\005\205\001" +
    "\002\000\006\004\206\050\207\001\002\000\004\044\213" +
    "\001\002\000\004\004\210\001\002\000\004\044\211\001" +
    "\002\000\004\005\212\001\002\000\006\004\uffce\031\uffce" +
    "\001\002\000\004\005\214\001\002\000\006\004\uffcd\031" +
    "\uffcd\001\002\000\022\005\uffba\012\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\047\uffba\001\002\000\022\005" +
    "\uffb9\012\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\047\uffb9\001\002\000\022\005\uffbb\012\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\047\uffbb\001\002\000\004" +
    "\044\225\001\002\000\004\004\222\001\002\000\004\044" +
    "\223\001\002\000\004\005\224\001\002\000\006\004\uffd0" +
    "\031\uffd0\001\002\000\004\005\226\001\002\000\006\004" +
    "\uffcf\031\uffcf\001\002\000\004\005\321\001\002\000\004" +
    "\004\233\001\002\000\004\004\316\001\002\000\004\004" +
    "\uffb0\001\002\000\004\063\234\001\002\000\016\005\236" +
    "\033\066\034\071\035\072\036\064\037\070\001\002\000" +
    "\004\005\310\001\002\000\004\004\237\001\002\000\006" +
    "\057\246\061\250\001\002\000\004\004\243\001\002\000" +
    "\004\004\uffab\001\002\000\004\004\uffaa\001\002\000\010" +
    "\057\246\061\250\064\247\001\002\000\004\004\uffad\001" +
    "\002\000\004\004\uffac\001\002\000\016\005\276\033\066" +
    "\034\071\035\072\036\064\037\070\001\002\000\004\005" +
    "\274\001\002\000\016\005\252\033\066\034\071\035\072" +
    "\036\064\037\070\001\002\000\004\005\267\001\002\000" +
    "\006\004\256\031\254\001\002\000\006\004\uffa1\031\uffa1" +
    "\001\002\000\006\004\uff9f\031\uff9f\001\002\000\006\004" +
    "\uffa2\031\uffa2\001\002\000\006\045\056\051\060\001\002" +
    "\000\006\004\263\031\254\001\002\000\006\004\uffa0\031" +
    "\uffa0\001\002\000\006\004\uffa3\031\uffa3\001\002\000\006" +
    "\004\uffa5\031\uffa5\001\002\000\010\045\056\051\060\062" +
    "\265\001\002\000\006\004\uffa4\031\uffa4\001\002\000\004" +
    "\005\266\001\002\000\004\004\uffa7\001\002\000\006\004" +
    "\256\031\254\001\002\000\006\004\271\031\254\001\002" +
    "\000\010\045\056\051\060\062\272\001\002\000\004\005" +
    "\273\001\002\000\004\004\uffa6\001\002\000\004\004\uffaf" +
    "\001\002\000\004\005\303\001\002\000\006\004\256\031" +
    "\254\001\002\000\006\004\300\031\254\001\002\000\010" +
    "\045\056\051\060\060\301\001\002\000\004\005\302\001" +
    "\002\000\004\004\uffa9\001\002\000\006\004\256\031\254" +
    "\001\002\000\006\004\305\031\254\001\002\000\010\045" +
    "\056\051\060\060\306\001\002\000\004\005\307\001\002" +
    "\000\004\004\uffa8\001\002\000\004\004\237\001\002\000" +
    "\004\004\312\001\002\000\010\057\246\061\250\064\313" +
    "\001\002\000\004\005\314\001\002\000\004\004\uffae\001" +
    "\002\000\004\004\uffb1\001\002\000\006\056\317\063\234" +
    "\001\002\000\004\005\320\001\002\000\004\004\uffb2\001" +
    "\002\000\004\004\233\001\002\000\004\004\323\001\002" +
    "\000\006\056\324\063\234\001\002\000\004\005\325\001" +
    "\002\000\004\004\uffb3\001\002\000\004\005\334\001\002" +
    "\000\004\031\330\001\002\000\004\004\331\001\002\000" +
    "\004\066\332\001\002\000\004\005\333\001\002\000\004" +
    "\004\uff9d\001\002\000\004\031\335\001\002\000\004\004" +
    "\336\001\002\000\004\066\337\001\002\000\004\005\340" +
    "\001\002\000\004\004\uff9e\001\002\000\004\004\ufff0\001" +
    "\002\000\020\005\uffc6\012\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\001\002\000\004\031\356\001\002\000" +
    "\004\005\351\001\002\000\020\005\uffc7\012\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\001\002\000\020\005" +
    "\uffca\012\133\033\066\034\071\035\072\036\064\037\070" +
    "\001\002\000\020\005\uffc8\012\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\001\002\000\020\005\uffc9\012\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\001\002\000" +
    "\004\031\352\001\002\000\004\004\353\001\002\000\004" +
    "\054\354\001\002\000\004\005\355\001\002\000\004\004" +
    "\uffcc\001\002\000\004\004\357\001\002\000\004\054\360" +
    "\001\002\000\004\005\361\001\002\000\004\004\uffcb\001" +
    "\002\000\004\005\363\001\002\000\004\004\uffef\001\002" +
    "\000\006\025\365\026\366\001\002\000\004\015\370\001" +
    "\002\000\004\015\367\001\002\000\004\005\uffed\001\002" +
    "\000\004\005\uffee\001\002\000\004\004\372\001\002\000" +
    "\022\023\377\032\061\042\057\045\056\051\060\053\052" +
    "\055\055\065\054\001\002\000\004\004\374\001\002\000" +
    "\022\023\375\032\061\042\057\045\056\051\060\053\052" +
    "\055\055\065\054\001\002\000\004\005\376\001\002\000" +
    "\004\004\ufff2\001\002\000\004\005\u0100\001\002\000\004" +
    "\004\ufff1\001\002\000\004\004\u0109\001\002\000\004\004" +
    "\u0104\001\002\000\004\004\ufffd\001\002\000\004\021\u0105" +
    "\001\002\000\004\005\u0106\001\002\000\004\004\ufffb\001" +
    "\002\000\004\004\ufffa\001\002\000\004\004\ufff6\001\002" +
    "\000\010\011\u010e\017\u010c\027\u010d\001\002\000\004\004" +
    "\ufff9\001\002\000\004\004\ufff7\001\002\000\004\012\u011c" +
    "\001\002\000\004\005\u0117\001\002\000\004\012\u010f\001" +
    "\002\000\004\013\u0110\001\002\000\004\014\u0111\001\002" +
    "\000\004\015\u0112\001\002\000\004\005\u0113\001\002\000" +
    "\004\004\u0114\001\002\000\004\016\u0115\001\002\000\004" +
    "\005\u0116\001\002\000\004\004\ufff5\001\002\000\004\031" +
    "\u0118\001\002\000\004\004\u0119\001\002\000\004\030\u011a" +
    "\001\002\000\004\005\u011b\001\002\000\004\004\ufff3\001" +
    "\002\000\004\013\u011d\001\002\000\004\014\u011e\001\002" +
    "\000\004\015\u011f\001\002\000\004\005\u0120\001\002\000" +
    "\004\004\u0121\001\002\000\004\020\u0122\001\002\000\004" +
    "\005\u0123\001\002\000\004\004\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\006\002\004\015\003\001\001\000\006\003" +
    "\012\017\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\u0100\014\u0101\001\001\000\004\005\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\034\025\035\033\032\035\040\042\031\043" +
    "\033\046\036\056\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\044\033\042\035\045\042\043\043\047" +
    "\046\050\056\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\344\041\341\044\343\045\345\001\001\000\002\001" +
    "\001\000\010\022\066\023\325\024\062\001\001\000\010" +
    "\022\066\023\226\024\062\001\001\000\014\022\201\036" +
    "\203\037\200\040\202\041\176\001\001\000\010\022\066" +
    "\023\163\024\062\001\001\000\014\022\135\030\133\031" +
    "\137\040\136\041\131\001\001\000\010\022\066\023\061" +
    "\024\062\001\001\000\002\001\001\000\004\022\120\001" +
    "\001\000\002\001\001\000\022\021\034\025\107\033\032" +
    "\035\040\042\031\043\033\046\036\056\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\021\044\033\042\035" +
    "\045\042\043\043\047\046\050\056\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\034\025" +
    "\123\033\032\035\040\042\031\043\033\046\036\056\037" +
    "\001\001\000\002\001\001\000\020\021\044\033\042\035" +
    "\045\042\043\043\047\046\050\056\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\145\040\146\041\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\215\040\216\041\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\230\050\231\001\001" +
    "\000\004\050\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\066\023\234\024\062\001\001\000\002" +
    "\001\001\000\010\051\237\052\240\053\241\001\001\000" +
    "\002\001\001\000\006\052\243\053\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\066\023\274\024\062" +
    "\001\001\000\002\001\001\000\010\022\066\023\250\024" +
    "\062\001\001\000\002\001\001\000\012\035\254\042\252" +
    "\054\256\055\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\035\261" +
    "\042\260\055\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\035\254\042" +
    "\252\054\267\055\257\001\001\000\010\035\261\042\260" +
    "\055\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\035\254\042\252\054\276\055\257\001\001\000\010\035" +
    "\261\042\260\055\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\035\254\042\252\054" +
    "\303\055\257\001\001\000\010\035\261\042\260\055\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\051\310\052\240\053\241\001\001\000\006" +
    "\052\243\053\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\047\321\050" +
    "\231\001\001\000\004\050\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\347\041\346" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\034" +
    "\025\372\033\032\035\040\042\031\043\033\046\036\056" +
    "\037\001\001\000\002\001\001\000\020\021\044\033\042" +
    "\035\045\042\043\043\047\046\050\056\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\u0106\011\u0107\012" +
    "\u010a\013\u0109\001\001\000\004\020\u0102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public static String ConvertirObjectToString(Object Obj)
	 {
		String Str="";
		if(Obj!=null)
		{
			Str = Obj.toString();
		}
		return Str;
	}


	public static void erroresSintacticos(Symbol s)
	{
		System.out.println("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"");
		Errores errores_sintacticos=new Errores();
		errores_sintacticos.setTipo("Sintactico");
		errores_sintacticos.setLinea(s.right+1);
		errores_sintacticos.setColumna(s.left);
		errores_sintacticos.setDescripcion(ConvertirObjectToString(s.value));
		//sintactico.listaSintactico.add(errores_sintacticos);
		Interfaz.erroresSintacticos.add(errores_sintacticos);

	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TEXTOA ::= menorQue inicioCajaArea mayorQue cadena menorQue finCajaArea mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
						nodoChtml nuevo = new nodoChtml("TEXTOA");
						nodoChtml aux = new nodoChtml("ELEMENTO");						
						aux.add(new nodoChtml("CADENA"));
						aux.add(new nodoChtml(cad));
						nuevo.add(aux);
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTOA",44, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TEXTOA ::= menorQue inicioCajaArea ELEMENTOS mayorQue cadena menorQue finCajaArea mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
						nodoChtml nuevo = new nodoChtml("ELEMENTO");
						nuevo.add(new nodoChtml("CADENA"));
						nuevo.add(new nodoChtml(cad));
						elementos.add(nuevo);
						elementos.setValue("TEXTOA");
						RESULT= elementos;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTOA",44, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CADENA ::= cadena 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("ELEMENTO");
						nuevo.add(new nodoChtml("CADENA"));
						nuevo.add(new nodoChtml(cad));
						RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CADENA",43, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONTENIDOCELDA ::= CADENA 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml cad = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("LISTA");						
						nuevo.add(cad);
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONTENIDOCELDA ::= BOTON 
            {
              nodoChtml RESULT =null;
		int botonleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int botonright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml boton = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("LISTA");
						nuevo.add(boton);
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONTENIDOCELDA ::= IMAGEN 
            {
              nodoChtml RESULT =null;
		int imagenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int imagenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml imagen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("LISTA");
						nuevo.add(imagen);
						RESULT= nuevo;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTENIDOCELDA ::= CONTENIDOCELDA BOTON 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								l.add(b);						
								RESULT= l;
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTENIDOCELDA ::= CONTENIDOCELDA CADENA 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								l.add(b);						
								RESULT= l;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTENIDOCELDA ::= CONTENIDOCELDA IMAGEN 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
								l.add(b);						
								RESULT= l;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCELDA",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CELDAC ::= menorQue inicioCeldaCabecera ELEMENTOS mayorQue CONTENIDOCELDA menorQue finCeldaCabecera mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
				
										elementos.setValue("CELDAC");																																																	
										elementos.addLista(contenido);																																						
										RESULT=elementos;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDAC",41, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CELDAC ::= menorQue inicioCeldaCabecera mayorQue CONTENIDOCELDA menorQue finCeldaCabecera mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
																																	
										contenido.setValue("CELDAC");																												
										RESULT=contenido;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDAC",41, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CELDA ::= menorQue inicioCelda ELEMENTOS mayorQue CONTENIDOCELDA menorQue finCelda mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
				
										elementos.setValue("CELDA");																																																	
										elementos.addLista(contenido);																																						
										RESULT=elementos;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDA",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CELDA ::= menorQue inicioCelda mayorQue CONTENIDOCELDA menorQue finCelda mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
																																	 
										contenido.setValue("CELDA");																												
										RESULT=contenido;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CELDA",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTACELDA ::= CELDAC 
            {
              nodoChtml RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
			
					nodoChtml nuevo = new nodoChtml("FILA");
					nuevo.add(c);									
					RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTACELDA ::= CELDA 
            {
              nodoChtml RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
			
					nodoChtml nuevo = new nodoChtml("FILA");
					nuevo.add(c);									
					RESULT= nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTACELDA ::= LISTACELDA CELDAC 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
											
					l.add(c);					
					RESULT= l;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTACELDA ::= LISTACELDA CELDA 
            {
              nodoChtml RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml l = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
							
					l.add(c);										
					RESULT= l;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTACELDA",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FILA ::= menorQue inicioFila ELEMENTOS mayorQue LISTACELDA menorQue finFila mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int celdasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int celdasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml celdas = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										//nodoChtml nuevo = new nodoChtml("FILA");	
										elementos.setValue("FILA");
										elementos.addLista(celdas);																												
										RESULT=elementos;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FILA",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FILA ::= menorQue inicioFila mayorQue LISTACELDA menorQue finFila mayorQue 
            {
              nodoChtml RESULT =null;
		int celdasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int celdasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml celdas = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
				
										nodoChtml nuevo = new nodoChtml("FILA");
										nuevo.add(celdas);
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FILA",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTAFILA ::= FILA 
            {
              nodoChtml RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml f = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=f;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAFILA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTAFILA ::= LISTAFILA FILA 
            {
              nodoChtml RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml lista = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int filaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int filaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml fila = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
																						
								lista.addLista(fila);	
								RESULT=lista;
								
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAFILA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TABLA ::= menorQue inicioTabla mayorQue LISTAFILA menorQue finTabla mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										contenido.setValue("TABLA");																															
										RESULT=contenido;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TABLA ::= menorQue inicioTabla ELEMENTOS mayorQue LISTAFILA menorQue finTabla mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										e.setValue("TABLA");											
										e.addLista(contenido);
										RESULT=e;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RUTA ::= ruta asignacion pathComillas puntoComa 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
																										
										nodoChtml nuevo = new nodoChtml("ELEMENTO");
										nuevo.add(new nodoChtml("RUTA"));
										nuevo.add(new nodoChtml(path));
										RESULT=nuevo;																																													
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RUTA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CLICK ::= click asignacion metodo puntoComa 
            {
              nodoChtml RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String met = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
										nodoChtml nuevo = new nodoChtml("ELEMENTO");
										nuevo.add(new nodoChtml("CLICK"));																							
										nuevo.add(new nodoChtml(met));																																																							
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CLICK",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EI1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int elementoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int elementoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml elemento = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("ELEMENTOS");												
			nuevo.add(elemento);
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EI1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("ELEMENTOS");												
			nuevo.add(r);
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EI1 ::= CLICK 
            {
              nodoChtml RESULT =null;
		int clickleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int clickright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml click = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			nodoChtml nuevo = new nodoChtml("ELEMENTOS");												
			nuevo.add(click);
			RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EI1 ::= EI1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			e.add(r);
			RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EI1 ::= EI1 RUTA 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			e.add(r);
			RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EI1 ::= EI1 CLICK 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
																
			e.add(r);
			RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI1",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EI ::= EI1 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EI",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ATRIBUTOS1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("BOTON");
						nuevo.add(e);
						RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ATRIBUTOS1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("BOTON");
						nuevo.add(e);
						RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ATRIBUTOS1 ::= CLICK 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						nodoChtml nuevo = new nodoChtml("BOTON");
						nuevo.add(e);
						RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ATRIBUTOS1 ::= ATRIBUTOS1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml atributos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
				
								atributos.add(c);			
								RESULT=atributos;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ATRIBUTOS1 ::= ATRIBUTOS1 RUTA 
            {
              nodoChtml RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml atributos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
																	
								atributos.add(c);			
								RESULT=atributos;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ATRIBUTOS1 ::= ATRIBUTOS1 CLICK 
            {
              nodoChtml RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml atributos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml c = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
					
								atributos.add(c);			
								RESULT=atributos;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS1",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATRIBUTOS ::= ATRIBUTOS1 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BOTON ::= menorQue inicioBoton mayorQue cadena menorQue finBoton mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("BOTON");												
										nuevo.add(new nodoChtml(cad));
										nodoChtml aux = new nodoChtml("ELEMENTO");																					
										aux.add(new nodoChtml("CADENA"));
										aux.add(new nodoChtml(cad));	
										nuevo.add(aux);																																																						
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BOTON ::= menorQue inicioBoton ATRIBUTOS mayorQue cadena menorQue finBoton mayorQue 
            {
              nodoChtml RESULT =null;
		int atribleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml atrib = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
										atrib.setValue("BOTON"); 
										nodoChtml nuevo = new nodoChtml("ELEMENTO");																					
										nuevo.add(new nodoChtml("CADENA"));
										nuevo.add(new nodoChtml(cad));
										atrib.add(nuevo);										
										RESULT=atrib;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AE1 ::= RUTA 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				nodoChtml nuevo = new nodoChtml("ELEMENTOS");
				nuevo.add(r);
				RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AE1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
					nodoChtml nuevo = new nodoChtml("ELEMENTOS");
					nuevo.add(r);
					RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AE1 ::= AE1 RUTA 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						a.add(r);			
						RESULT=a;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AE1 ::= AE1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml a = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
						a.add(r);
						RESULT=a;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE1",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AE ::= AE1 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=r;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AE",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ENLACE ::= menorQue inicioEnlace mayorQue cadena menorQue finEnlace mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 																																																																																																											
										nodoChtml nuevo = new nodoChtml("ENLACE");
										nodoChtml aux = new nodoChtml("ELEMENTO");																															
										aux.add(new nodoChtml("CADENA"));										
										aux.add(new nodoChtml(cad));																																
										nuevo.add(nuevo);																																																							
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENLACE",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ENLACE ::= menorQue inicioEnlace AE mayorQue cadena menorQue finEnlace mayorQue 
            {
              nodoChtml RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml ae = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 	
										ae.setValue("ENLACE");
										nodoChtml nuevo = new nodoChtml("ELEMENTO");																															
										nuevo.add(new nodoChtml("CADENA"));										
										nuevo.add(new nodoChtml(cad));
										ae.add(nuevo);
										//nuevo.add(new nodoChtml("cadena", new nodoChtml(cad)));																																																							
										RESULT=ae;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENLACE",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IMAGEN ::= menorQue inicioImagen EI mayorQue menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
										e.setValue("IMAGEN");																						
										RESULT=e;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IMAGEN ::= menorQue inicioImagen EI mayorQue path menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml e = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										e.setValue("IMAGEN");
										nodoChtml aux = new nodoChtml("ELEMENTO");												
										aux.add(new nodoChtml("RUTA"));
										aux.add(new nodoChtml(ruta));
										e.add(aux);																																																																	
										RESULT=e;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMAGEN ::= menorQue inicioImagen mayorQue menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN");												
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMAGEN ::= menorQue inicioImagen mayorQue path menorQue finImagen mayorQue 
            {
              nodoChtml RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("IMAGEN");
										nodoChtml aux = new nodoChtml("ELEMENTO");												
										aux.add(new nodoChtml("RUTA"));
										aux.add(new nodoChtml(ruta));
										nuevo.add(aux);																																													
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TEXTO ::= menorQue inicioTexto mayorQue cadena menorQue finTexto mayorQue 
            {
              nodoChtml RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
										nodoChtml nuevo = new nodoChtml("TEXTO");	
										nodoChtml aux = new nodoChtml("ELEMENTO");
										aux.add(new nodoChtml("CADENA"));
										aux.add(new nodoChtml(cad));
										nuevo.add(aux);										
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TEXTO ::= menorQue inicioTexto ELEMENTOS mayorQue cadena menorQue finTexto mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 	
										elementos.setValue("TEXTO");	
										nodoChtml nuevo = new nodoChtml("ELEMENTO");																														
										nuevo.add(new nodoChtml("CADENA"));
										nuevo.add(new nodoChtml(cad));
										elementos.add(nuevo);	
										RESULT=elementos;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTO ::= alineado asignacion valorAlineado puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO");												
										nuevo.add(new nodoChtml("ALINEADO"));
										nuevo.add(new nodoChtml(id));																																												
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTO ::= ancho asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO");												
										nuevo.add(new nodoChtml("ANCHO"));
										nuevo.add(new nodoChtml(id));																																												
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTO ::= alto asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
										nodoChtml nuevo = new nodoChtml("ELEMENTO");												
										nuevo.add( new nodoChtml("ALTO"));
										nuevo.add(new nodoChtml(id));																																												
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTO ::= grupo asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
											nodoChtml nuevo = new nodoChtml("ELEMENTO");												
											nuevo.add(new nodoChtml("GRUPO"));
											nuevo.add(new nodoChtml(id));
											RESULT=nuevo;
											
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO ::= idCcss asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
											nodoChtml nuevo = new nodoChtml("ELEMENTO");
											nuevo.add(new nodoChtml("ID"));
											nuevo.add(new nodoChtml(id));
											RESULT=nuevo;
											
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTOS1 ::= ELEMENTO 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
							nodoChtml nuevo = new nodoChtml("ELEMENTO");
							nuevo.add(r);							
							RESULT= nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS1",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTOS1 ::= ELEMENTOS1 ELEMENTO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
							
							iz.add(der);
							RESULT= iz;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS1",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTOS ::= ELEMENTOS1 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
							
						RESULT= r;
						
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PANEL ::= menorQue inicioPanel mayorQue menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("PANEL");																																																									
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PANEL ::= menorQue inicioPanel mayorQue CONTENIDOCUERPO menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL");																							
												nuevo.add(contenido);																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PANEL ::= menorQue inicioPanel ELEMENTOS mayorQue menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL");												
												nuevo.add(elementos);																																													
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PANEL ::= menorQue inicioPanel ELEMENTOS mayorQue CONTENIDOCUERPO menorQue finPanel mayorQue 
            {
              nodoChtml RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml elementos = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("PANEL");												
												nuevo.add(elementos);																								
												nuevo.add(contenido);																																														
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOCUERPO ::= TEXTOA 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(t);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOCUERPO ::= TABLA 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(t);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOCUERPO ::= ENLACE 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
			
							nodoChtml nuevo = new nodoChtml("CONTENIDO");						 																																																															
							nuevo.add(t);
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOCUERPO ::= BOTON 
            {
              nodoChtml RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml t = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(t);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOCUERPO ::= IMAGEN 
            {
              nodoChtml RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(texto);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDOCUERPO ::= TEXTO 
            {
              nodoChtml RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");												
							nuevo.add(texto);																																																				
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDOCUERPO ::= PANEL 
            {
              nodoChtml RESULT =null;
		int panelleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int panelright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml panel = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							nodoChtml nuevo = new nodoChtml("CONTENIDO");																			
							nuevo.add(panel);																																													
							RESULT=nuevo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDOCUERPO ::= CONTENIDOCUERPO TEXTOA 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							cuerpo.add(b);																																												
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDOCUERPO ::= CONTENIDOCUERPO TABLA 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 	
							cuerpo.add(b);																																												
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDOCUERPO ::= CONTENIDOCUERPO ENLACE 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 											
							cuerpo.add(b);																																																				
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDOCUERPO ::= CONTENIDOCUERPO BOTON 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml b = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 	
							cuerpo.add(b);																																												
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDOCUERPO ::= CONTENIDOCUERPO IMAGEN 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int imagenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int imagenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml imagen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							cuerpo.add(imagen);																																													
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDOCUERPO ::= CONTENIDOCUERPO TEXTO 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml texto = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 											
							cuerpo.add(texto);																																																		
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDOCUERPO ::= CONTENIDOCUERPO PANEL 
            {
              nodoChtml RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int panelleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int panelright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml panel = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
							cuerpo.add(panel);																																													
							RESULT=cuerpo;
							
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCUERPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTILOCUERPO ::= fondo asignacion id puntoComa 
            {
              nodoChtml RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
												nodoChtml nuevo = new nodoChtml(color);																																		
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTILOCUERPO ::= fondo asignacion rgb puntoComa 
            {
              nodoChtml RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 
												nodoChtml nuevo = new nodoChtml(color);																																		
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= menorQue inicioCuerpo mayorQue menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO");												
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= menorQue inicioCuerpo mayorQue CONTENIDOCUERPO menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO");
												nuevo.add(contenido);
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= menorQue inicioCuerpo ESTILOCUERPO mayorQue menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int estiloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int estiloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		nodoChtml estilo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO");
												nuevo.add(estilo);	
												RESULT=nuevo;											
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= menorQue inicioCuerpo ESTILOCUERPO mayorQue CONTENIDOCUERPO menorQue finCuerpo mayorQue 
            {
              nodoChtml RESULT =null;
		int estiloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int estiloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		nodoChtml estilo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml contenido = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("CUERPO");												
												nuevo.add(estilo);
												nuevo.add(contenido);
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TITULO ::= menorQue inicioTitulo mayorQue cadena menorQue finTitulo mayorQue 
            {
              nodoChtml RESULT =null;
		int valCadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int valCadenaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String valCadena = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		 
												nodoChtml nuevo = new nodoChtml("TITULO");												
												nuevo.add(new nodoChtml(valCadena));																							
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TITULO",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFCCSS ::= menorQue inicioCcss ruta asignacion pathComillas puntoComa mayorQue menorQue finCcss mayorQue 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		 
												nodoChtml nuevo = new nodoChtml(path);																																		
												nuevo.setTipo("path");
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCCSS",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFCJS ::= menorQue inicioCjs ruta asignacion pathComillas puntoComa mayorQue menorQue finCjs mayorQue 
            {
              nodoChtml RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		 
												nodoChtml nuevo = new nodoChtml(path);																																		
												nuevo.setTipo("path");
												RESULT=nuevo;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFCJS",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFARCHIVO ::= DEFCCSS 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
						
				RESULT=r;
				
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFARCHIVO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFARCHIVO ::= DEFCJS 
            {
              nodoChtml RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml r = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
								
				RESULT=r;
				
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEFARCHIVO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTAARCHIVOS ::= 
            {
              nodoChtml RESULT =null;
		RESULT= new nodoChtml("LISTAARCHIVOS");
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARCHIVOS",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAARCHIVOS ::= LISTAARCHIVOS DEFARCHIVO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
												iz.add(der);
												RESULT=iz;
												
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARCHIVOS",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDOENCABEZADO ::= LISTAARCHIVOS TITULO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										nodoChtml nuevo = new nodoChtml("ENCABEZADO");																							
										nuevo.add(iz);							
										nuevo.add(der);																								
										RESULT=nuevo;
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOENCABEZADO",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FINENCABEZADO ::= menorQue finEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("FINENCABEZADO");												
												nuevo.add(new nodoChtml("menorQue"));
												nuevo.add(new nodoChtml("finEncabezado"));
												nuevo.add(new nodoChtml("mayorQue"));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINENCABEZADO",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIOENCABEZADO ::= menorQue inicioEncabezado mayorQue 
            {
              nodoChtml RESULT =null;
		 
												nodoChtml nuevo = new nodoChtml("INICIOENCABEZADO");												
												nuevo.add(new nodoChtml("menorQue"));
												nuevo.add(new nodoChtml("inicioEncabezado"));
												nuevo.add(new nodoChtml("mayorQue"));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOENCABEZADO",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= INICIOENCABEZADO CONTENIDOENCABEZADO FINENCABEZADO 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cen = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												RESULT=cen;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FINCHTML ::= menorQue finChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("FINCHTML");
												nuevo.add(new nodoChtml("menorQue"));
												nuevo.add(new nodoChtml("finChtml"));
												nuevo.add(new nodoChtml("mayorQue"));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINCHTML",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIOCHTML ::= menorQue inicioChtml mayorQue 
            {
              nodoChtml RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
												nodoChtml nuevo = new nodoChtml("INICIOCHTML");												
												nuevo.add(new nodoChtml("menorQue"));
												nuevo.add(new nodoChtml("inicioChtml"));
												nuevo.add(new nodoChtml("mayorQue"));
												RESULT=nuevo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIOCHTML",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CHTML ::= INICIOCHTML ENCABEZADO CUERPO FINCHTML 
            {
              nodoChtml RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		nodoChtml iz = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int encabezadoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int encabezadoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		nodoChtml encabezado = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml cuerpo = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		nodoChtml der = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
										Interfaz.raizChtml.setValue("DOCUMENTO");
										Interfaz.raizChtml.setTipo("DOCUMENTO");
										Interfaz.raizChtml.setLinea(Interfaz.contadorChtml++);
										//if(iz!=null){Interfaz.raizChtml.add(iz);}
										Interfaz.raizChtml.add(encabezado);
										Interfaz.raizChtml.add(cuerpo);
										
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CHTML",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CHTML EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		nodoChtml start_val = (nodoChtml)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

