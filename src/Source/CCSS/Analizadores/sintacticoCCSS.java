
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Source.CCSS.Analizadores;

import java_cup.runtime.*;
import Source.CCSS.AST.*;
import javax.swing.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintacticoCCSS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symCCSS.class;
}

  /** Default constructor. */
  @Deprecated
  public sintacticoCCSS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintacticoCCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoCCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\004\005" +
    "\000\002\005\004\000\002\005\003\000\002\015\010\000" +
    "\002\015\010\000\002\015\007\000\002\015\007\000\002" +
    "\006\004\000\002\006\003\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\012\000\002\007\006\000" +
    "\002\007\014\000\002\007\006\000\002\007\006\000\002" +
    "\010\005\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\004\000\002\014\005\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\051\004\001\002\000\004\004\012\001" +
    "\002\000\006\002\ufffe\051\ufffe\001\002\000\006\002\000" +
    "\051\004\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\051\uffff\001\002\000\010" +
    "\005\013\033\016\034\017\001\002\000\006\002\ufffc\051" +
    "\ufffc\001\002\000\010\005\ufffa\033\ufffa\034\ufffa\001\002" +
    "\000\010\005\162\033\016\034\017\001\002\000\004\006" +
    "\155\001\002\000\004\006\020\001\002\000\004\051\021" +
    "\001\002\000\004\014\022\001\002\000\004\015\023\001" +
    "\002\000\036\005\ufff6\026\033\027\026\030\024\031\027" +
    "\032\034\033\ufff6\034\ufff6\035\035\036\030\037\036\040" +
    "\032\041\031\042\037\001\002\000\004\007\144\001\002" +
    "\000\036\005\ufff8\026\033\027\026\030\024\031\027\032" +
    "\034\033\ufff8\034\ufff8\035\035\036\030\037\036\040\032" +
    "\041\031\042\037\001\002\000\004\007\140\001\002\000" +
    "\004\007\135\001\002\000\004\007\132\001\002\000\004" +
    "\007\127\001\002\000\004\007\124\001\002\000\004\007" +
    "\113\001\002\000\004\007\110\001\002\000\004\007\101" +
    "\001\002\000\004\007\066\001\002\000\004\007\041\001" +
    "\002\000\036\005\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\001\002\000\020\006\050\012\045" +
    "\024\044\025\047\051\043\052\042\053\051\001\002\000" +
    "\022\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\001\002\000\022\005\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\001\002" +
    "\000\022\005\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\001\002\000\020\006\050\012\045" +
    "\024\044\025\047\051\043\052\042\053\051\001\002\000" +
    "\014\011\053\012\054\013\056\015\064\016\055\001\002" +
    "\000\022\005\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\001\002\000\020\006\050\012\045" +
    "\024\044\025\047\051\043\052\042\053\051\001\002\000" +
    "\022\005\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\001\002\000\014\011\053\012\054\013" +
    "\056\014\057\016\055\001\002\000\020\006\050\012\045" +
    "\024\044\025\047\051\043\052\042\053\051\001\002\000" +
    "\020\006\050\012\045\024\044\025\047\051\043\052\042" +
    "\053\051\001\002\000\020\006\050\012\045\024\044\025" +
    "\047\051\043\052\042\053\051\001\002\000\020\006\050" +
    "\012\045\024\044\025\047\051\043\052\042\053\051\001" +
    "\002\000\022\005\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\001\002\000\022\005\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\001\002\000\022\005\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\001\002\000\022\005\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\056\014\uffde\015\uffde\016" +
    "\055\001\002\000\022\005\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\056\014\uffdf\015\uffdf\016\055\001\002\000\036\005" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\001\002\000\022\005\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\056\014\uffdb\015\uffdb\016\055\001\002\000\014\017" +
    "\070\020\071\021\073\022\072\023\075\001\002\000\006" +
    "\010\uffe7\015\uffe7\001\002\000\006\010\uffe6\015\uffe6\001" +
    "\002\000\006\010\uffe5\015\uffe5\001\002\000\006\010\uffe3" +
    "\015\uffe3\001\002\000\006\010\uffe4\015\uffe4\001\002\000" +
    "\006\010\076\015\077\001\002\000\006\010\uffe2\015\uffe2" +
    "\001\002\000\014\017\070\020\071\021\073\022\072\023" +
    "\075\001\002\000\036\005\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\001\002\000\006\010\uffe8" +
    "\015\uffe8\001\002\000\012\045\103\046\102\047\105\050" +
    "\104\001\002\000\004\015\uffd3\001\002\000\004\015\uffd4" +
    "\001\002\000\004\015\uffd1\001\002\000\004\015\uffd2\001" +
    "\002\000\004\015\107\001\002\000\036\005\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\001\002" +
    "\000\020\006\050\012\045\024\044\025\047\051\043\052" +
    "\042\053\051\001\002\000\014\011\053\012\054\013\056" +
    "\015\112\016\055\001\002\000\036\005\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\001\002\000" +
    "\004\004\114\001\002\000\020\006\050\012\045\024\044" +
    "\025\047\051\043\052\042\053\051\001\002\000\014\010" +
    "\116\011\053\012\054\013\056\016\055\001\002\000\006" +
    "\043\120\044\121\001\002\000\004\005\122\001\002\000" +
    "\004\005\uffe0\001\002\000\004\005\uffe1\001\002\000\004" +
    "\015\123\001\002\000\036\005\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\001\002\000\020\006" +
    "\050\012\045\024\044\025\047\051\043\052\042\053\051" +
    "\001\002\000\014\011\053\012\054\013\056\015\126\016" +
    "\055\001\002\000\036\005\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\001\002\000\020\006\050" +
    "\012\045\024\044\025\047\051\043\052\042\053\051\001" +
    "\002\000\014\011\053\012\054\013\056\015\131\016\055" +
    "\001\002\000\036\005\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\001\002\000\020\006\050\012" +
    "\045\024\044\025\047\051\043\052\042\053\051\001\002" +
    "\000\014\011\053\012\054\013\056\015\134\016\055\001" +
    "\002\000\036\005\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\001\002\000\020\006\050\012\045" +
    "\024\044\025\047\051\043\052\042\053\051\001\002\000" +
    "\014\011\053\012\054\013\056\015\137\016\055\001\002" +
    "\000\036\005\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\001\002\000\020\006\050\012\045\024" +
    "\044\025\047\051\043\052\042\053\051\001\002\000\014" +
    "\011\053\012\054\013\056\015\142\016\055\001\002\000" +
    "\036\005\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\001\002\000\036\005\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\001\002\000\004" +
    "\004\145\001\002\000\020\006\050\012\045\024\044\025" +
    "\047\051\043\052\042\053\051\001\002\000\014\010\147" +
    "\011\053\012\054\013\056\016\055\001\002\000\020\006" +
    "\050\012\045\024\044\025\047\051\043\052\042\053\051" +
    "\001\002\000\014\010\151\011\053\012\054\013\056\016" +
    "\055\001\002\000\020\006\050\012\045\024\044\025\047" +
    "\051\043\052\042\053\051\001\002\000\014\005\153\011" +
    "\053\012\054\013\056\016\055\001\002\000\004\015\154" +
    "\001\002\000\036\005\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\001\002\000\004\051\156\001" +
    "\002\000\004\014\157\001\002\000\004\015\160\001\002" +
    "\000\036\005\ufff7\026\033\027\026\030\024\031\027\032" +
    "\034\033\ufff7\034\ufff7\035\035\036\030\037\036\040\032" +
    "\041\031\042\037\001\002\000\036\005\ufff9\026\033\027" +
    "\026\030\024\031\027\032\034\033\ufff9\034\ufff9\035\035" +
    "\036\030\037\036\040\032\041\031\042\037\001\002\000" +
    "\006\002\ufffd\051\ufffd\001\002\000\010\005\ufffb\033\ufffb" +
    "\034\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\010\002\006\003\005\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\014\015\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\024\007\037\001\001\000\002\001" +
    "\001\000\004\007\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\062\001\001\000" +
    "\004\014\061\001\001\000\004\014\060\001\001\000\004" +
    "\014\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\073\011\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\114\001\001\000\002\001\001\000\004\012" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\145\001\001\000\002\001\001\000\004\014\147\001\001" +
    "\000\002\001\001\000\004\014\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\160\007" +
    "\037\001\001\000\004\007\142\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoCCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoCCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoCCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        JOptionPane.showInputDialog("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        String texto = "Identificador " +s.value + " no reconocido.";
        //Web.listaError.agregarError("Error sintactico",texto, s.left, s.right);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        JOptionPane.showInputDialog("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        String texto = "Identificador " +s.value + " no reconocido.";
        //Web.listaError.agregarError("Error sintactico",texto, s.left, s.right);
    }  

    public nodo getRaiz(){
        return action_obj.raiz;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintacticoCCSS$actions {


    nodo raiz= null;


  private final sintacticoCCSS parser;

  /** Constructor */
  CUP$sintacticoCCSS$actions(sintacticoCCSS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintacticoCCSS$do_action_part00000000(
    int                        CUP$sintacticoCCSS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoCCSS$parser,
    java.util.Stack            CUP$sintacticoCCSS$stack,
    int                        CUP$sintacticoCCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoCCSS$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoCCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo start_val = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoCCSS$parser.done_parsing();
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LI_DEF 
            {
              nodo RESULT =null;
		int li_defleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int li_defright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo li_def = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
                RESULT = new nodo("INICIO");
                RESULT.add(li_def);

                raiz = RESULT;
                raiz.archivo = "CCSS";
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LI_DEF ::= LI_DEF DEF 
            {
              nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo lista = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		int definileft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int definiright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo defini = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            nodo elementos = new nodo("Lista Definiciones");
            elementos.add(lista);
            elementos.add(defini);
            RESULT = elementos;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LI_DEF",1, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LI_DEF ::= DEF 
            {
              nodo RESULT =null;
		int definileft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int definiright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo defini = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            nodo elementos = new nodo("Lista Definiciones");
            elementos.add(defini);
            RESULT = elementos;

        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LI_DEF",1, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEF ::= ID COR_IZQ LI_ELE COR_DER 
            {
              nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo li = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
            nodo definiciones = new nodo("Definiciones");
            nodo objeto = new nodo(identificador, "ID", identificadorleft, identificadorright);
            definiciones.add(objeto);
            definiciones.add(li);
            RESULT =  definiciones;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("DEF",2, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEF ::= ID COR_IZQ COR_DER 
            {
              nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).value;
		

            nodo definiciones = new nodo("Definiciones");
            nodo objeto = new nodo( identificador, "ID", identificadorleft, identificadorright);
            definiciones.add(objeto);
            RESULT = definiciones;

        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("DEF",2, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LI_ELE ::= LI_ELE ELE 
            {
              nodo RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo li = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		int elementoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int elementoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo elemento = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            nodo elem = new nodo("Elementos");
            elem.add(li);
            elem.add(elemento);
            RESULT = elem;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LI_ELE",3, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LI_ELE ::= ELE 
            {
              nodo RESULT =null;
		int elementoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int elementoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo elemento = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		

            nodo ele = new nodo("Elementos");
            ele.add(elemento);
            RESULT = ele;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LI_ELE",3, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ELE ::= grupo PAR_IZQ ID PAR_DER PUNTO_COMA LI_ATRIB 
            {
              nodo RESULT =null;
		int groupleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-5)).left;
		int groupright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-5)).right;
		String group = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).value;
		int lis_atributosleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int lis_atributosright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo lis_atributos = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            RESULT = new nodo(group,"GRUPO", idleft-1, idright-1);
            nodo objeto = new nodo(id, "GRUPO", idleft,idright);
            RESULT.add(objeto);
            RESULT.add(lis_atributos);
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ELE",11, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ELE ::= idToken PAR_IZQ ID PAR_DER PUNTO_COMA LI_ATRIB 
            {
              nodo RESULT =null;
		int idtoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-5)).left;
		int idtoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-5)).right;
		String idto = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-5)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).value;
		int lis_atributosleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int lis_atributosright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo lis_atributos = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            RESULT = new nodo(idto,"GRUPO", identificadorleft-1, identificadorright-1);
            nodo objeto = new nodo( identificador, "ID", identificadorleft, identificadorright);
            RESULT.add(objeto);
            RESULT.add(lis_atributos);
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ELE",11, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ELE ::= grupo PAR_IZQ ID PAR_DER PUNTO_COMA 
            {
              nodo RESULT =null;
		int groupleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).left;
		int groupright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).right;
		String group = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).value;
		
            RESULT = new nodo(group, "GRUPO", identificadorleft-1, identificadorright-1);
            nodo objeto = new nodo( identificador, "GRUPO", identificadorleft, identificadorright);
            RESULT.add(objeto);
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ELE",11, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELE ::= idToken PAR_IZQ ID PAR_DER PUNTO_COMA 
            {
              nodo RESULT =null;
		int idtoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).left;
		int idtoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).right;
		String idto = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).value;
		
            RESULT = new nodo(idto,"GRUPO", idleft-1, idright-1);
            nodo objeto = new nodo( id, "ID", idleft, idright);
            RESULT.add(objeto);
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ELE",11, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LI_ATRIB ::= LI_ATRIB ATRIB 
            {
              nodo RESULT =null;
		int lis_atributosleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int lis_atributosright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo lis_atributos = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo atributos = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            nodo atributos_lis =  new nodo("ATRIBUTOS");
            atributos_lis.add(lis_atributos);
            atributos_lis.add(atributos);
            RESULT = atributos_lis;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LI_ATRIB",4, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LI_ATRIB ::= ATRIB 
            {
              nodo RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo atributos = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            nodo atri = new nodo("ATRIBUTOS");
            atri.add(atributos);
            RESULT = atri; 
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LI_ATRIB",4, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ATRIB ::= alineado IGUAL AL PUNTO_COMA 
            {
              nodo RESULT =null;
		int alineadoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int alineadoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo alineado = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
                RESULT = new nodo("ATRIBUTO");
                nodo aling = new nodo("Alineado");
                //RESULT = new nodo("Alineado", alineadoleft-1, alineadoright-1);
                RESULT.add(aling);
                RESULT.add(alineado);
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ATRIB ::= texto IGUAL EXP PUNTO_COMA 
            {
              nodo RESULT =null;
		int textosleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).left;
		int textosright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).right;
		String textos = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
                RESULT = new nodo("ATRIBUTO");
                nodo text = new nodo(textos);
                RESULT.add(text);
                RESULT.add(e);
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ATRIB ::= formato IGUAL LI_FORM PUNTO_COMA 
            {
              nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).value;
		int lista_formaleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int lista_formaright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo lista_forma = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
                RESULT = new nodo("ATRIBUTO");
                nodo form =new nodo(formato);
                RESULT = lista_forma;
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ATRIB ::= letra IGUAL EXP PUNTO_COMA 
            {
              nodo RESULT =null;
		int letraleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).left;
		int letraright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).right;
		String letra = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
                RESULT = new nodo("ATRIBUTO");
                nodo letra1 =  new nodo("Letra");
                RESULT.add(letra1);
                RESULT.add(e);
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIB ::= tamTex IGUAL EXP PUNTO_COMA 
            {
              nodo RESULT =null;
		int tamtextoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).left;
		int tamtextoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).right;
		String tamtexto = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
                RESULT = new nodo("ATRIBUTO");
                nodo tamtextos= new nodo(tamtexto);
                RESULT.add(tamtextos);
                RESULT.add(e);
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIB ::= fondoElemento IGUAL EXP PUNTO_COMA 
            {
              nodo RESULT =null;
		int fondoelementoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).left;
		int fondoelementoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).right;
		String fondoelemento = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
                RESULT = new nodo("ATRIBUTO");
                nodo fondito =  new nodo("FondoElemento");
                RESULT.add(fondito);
                RESULT.add(e);
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ATRIB ::= autoredimension IGUAL COR_IZQ EXP COMA AREA COR_DER PUNTO_COMA 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).value;
		int arealeft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).left;
		int arearight = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).right;
		nodo area = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).value;
		
                RESULT = new nodo("ATRIBUTO");
                nodo autore = new nodo("AutoRedimension");
                RESULT.add(autore);
                RESULT.add(e);
                RESULT.add(area);   
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATRIB ::= visible IGUAL EXP PUNTO_COMA 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
                RESULT = new nodo("ATRIBUTO");

                nodo visibilito = new nodo("Visible");
                RESULT.add(visibilito);
                RESULT.add(e);
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ATRIB ::= borde IGUAL COR_IZQ EXP COMA EXP COMA EXP COR_DER PUNTO_COMA 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-6)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).right;
		nodo e3 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).value;
		
                RESULT = new nodo("ATRIBUTO");
                nodo bordito = new nodo("Borde" );
                RESULT.add(bordito);
                RESULT.add(e1);
                RESULT.add(e2);
                RESULT.add(e3);
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-9)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATRIB ::= opaque IGUAL EXP PUNTO_COMA 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
                RESULT = new nodo("ATRIBUTO");

                nodo opa = new nodo("Opaque");
                RESULT.add(opa);
                RESULT.add(e);
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ATRIB ::= colorText IGUAL EXP PUNTO_COMA 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
                RESULT = new nodo("ATRIBUTO");

                nodo colorte = new nodo("ColorTexto");
                RESULT.add(colorte);
                RESULT.add(e);
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",5, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LI_FORM ::= LI_FORM COMA FORM 
            {
              nodo RESULT =null;
		int lista_formaleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).left;
		int lista_formaright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).right;
		nodo lista_forma = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).value;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo formato = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		  

                lista_forma.add(formato);
                RESULT = lista_forma;
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LI_FORM",6, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LI_FORM ::= FORM 
            {
              nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo formato = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
                nodo form = new nodo("FORMATO");
                form.add(formato);
                RESULT = form;
            
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LI_FORM",6, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORM ::= negrilla 
            {
              nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
                    //RESULT = new nodo("FORMATO");
                    nodo negrita = new nodo(formato, "Form", formatoleft, formatoright);
                    
                    RESULT = negrita;
                    
                
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORM",7, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORM ::= cursiva 
            {
              nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		 
                   // RESULT = new nodo("FORMATO");
                    nodo cursiva = new nodo(formato, "Form", formatoleft, formatoright);
                    RESULT =  cursiva;

                 
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORM",7, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORM ::= mayuscula 
            {
              nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		 
                   // RESULT = new nodo("FORMATO");
                    nodo mayus = new nodo(formato, "Form", formatoleft, formatoright);
                    RESULT = mayus;
                
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORM",7, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORM ::= minuscula 
            {
              nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		 
                   // RESULT = new nodo("FORMATO");
                    
                    nodo minus = new nodo(formato, "Form", formatoleft, formatoright);
                    RESULT = minus;
                
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORM",7, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORM ::= capital 
            {
              nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		 

                    nodo capi = new nodo(formato, "Form", formatoleft, formatoright);
                    RESULT = capi;
                
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORM",7, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AREA ::= vertical 
            {
              nodo RESULT =null;
		int arealeft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int arearight = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String area = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		 RESULT = new nodo(area,"Area", arealeft, arearight);
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AREA",8, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AREA ::= horizontal 
            {
              nodo RESULT =null;
		int arealeft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int arearight = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String area = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		 RESULT = new nodo(area,"Area", arealeft, arearight);
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AREA",8, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= EXP MAS EXP 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            //RESULT = new nodo("Expresion", e1left-1, e1right-1);
            nodo op = new nodo(mas, "OP", masleft, masright);
            op.add(e1);
            op.add(e2);
            RESULT = op;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= EXP MENOS EXP 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).value;
		int menosleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            //RESULT = new nodo("Expresion", e1left-1, e1right-1);
            nodo op = new nodo(menos, "OP", menosleft, menosright);
            op.add(e1);
            op.add(e2);
            RESULT = op;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= EXP POR EXP 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).value;
		int porleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int porright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		String por = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            //RESULT = new nodo("Expresion", e1left-1, e1right-1);
            nodo op = new nodo( por, "OP", porleft, porright);
            op.add(e1);
            op.add(e2);
            RESULT = op;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP DIV EXP 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            //RESULT = new nodo("Expresion", e1left-1, e1right-1);
            nodo op = new nodo( div, "OP", divleft, divright);
            op.add(e1);
            op.add(e2);
            RESULT = op;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= MENOS EXP 
            {
              nodo RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            //RESULT = new nodo("Expresion", eleft-1, eright-1);
            nodo op  = new nodo( menos, "DECREMENTO",  menosleft, menosright);
            op.add(e);
            RESULT = op;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= PAR_IZQ EXP PAR_DER 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-1)).value;
		
            RESULT = e;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.elementAt(CUP$sintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= ID 
            {
              nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            //RESULT = new nodo("Expresion", idleft-1, idright-1);
            nodo objeto = new nodo(id, "ID",idleft,idright);
            RESULT = objeto;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= NUMERO 
            {
              nodo RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            //RESULT = new nodo("Expresion", numeroleft-1, numeroright-1);
            nodo objeto = new nodo( numero, "Numero",numeroleft,numeroright);
            RESULT = objeto;
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= TRUE 
            {
              nodo RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            RESULT = new nodo( verdadero,"BOOLEANO", verdaderoleft-1, verdaderoright-1);
         
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= FALSE 
            {
              nodo RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            RESULT = new nodo(falso, "BOOLEANO", falsoleft-1, falsoright-1);
     
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= CADENA 
            {
              nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		
            RESULT = new nodo( cadena, "CADENA", cadenaleft-1, cadenaright-1);
            
        
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AL ::= izquierda 
            {
              nodo RESULT =null;
		int alineadoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int alineadoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String alineado = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		 RESULT = new nodo(alineado, "ALINEADO", alineadoleft, alineadoright);
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AL",9, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AL ::= derecha 
            {
              nodo RESULT =null;
		int alineadoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int alineadoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String alineado = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		 RESULT = new nodo(alineado, "ALINEADO", alineadoleft, alineadoright);
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AL",9, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AL ::= centrado 
            {
              nodo RESULT =null;
		int alineadoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int alineadoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String alineado = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		 RESULT = new nodo(alineado,"ALINEADO", alineadoleft, alineadoright);
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AL",9, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AL ::= justificado 
            {
              nodo RESULT =null;
		int alineadoleft = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).left;
		int alineadoright = ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()).right;
		String alineado = (String)((java_cup.runtime.Symbol) CUP$sintacticoCCSS$stack.peek()).value;
		 RESULT = new nodo(alineado, "ALINEADO", alineadoleft, alineadoright);
              CUP$sintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AL",9, ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$sintacticoCCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintacticoCCSS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintacticoCCSS$do_action(
    int                        CUP$sintacticoCCSS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoCCSS$parser,
    java.util.Stack            CUP$sintacticoCCSS$stack,
    int                        CUP$sintacticoCCSS$top)
    throws java.lang.Exception
    {
              return CUP$sintacticoCCSS$do_action_part00000000(
                               CUP$sintacticoCCSS$act_num,
                               CUP$sintacticoCCSS$parser,
                               CUP$sintacticoCCSS$stack,
                               CUP$sintacticoCCSS$top);
        }
}

}
