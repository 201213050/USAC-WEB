package Source.CCSS;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.PrintWriter;
import Principal.Interfaz.*;
import Principal.Errores;
import Principal.Interfaz;
import Principal.tablaSimbolos;
import Source.CHTML.nodoChtml;

parser code {:

   
    public List<Integer> posibles=new LinkedList();

       /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;

       StringBuilder m = new StringBuilder("Error Sintactico");
        if (info instanceof java_cup.runtime.Symbol) {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                linea = s.left+1;
                if (s.right >= 0)
                    columna = s.right + 1;
            }
        }
        m.append(" asdf: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        List<String> toks = new LinkedList();

       if(!expected_token_ids().isEmpty()){
            System.out.println("No esta vacia "+expected_token_ids().size());
            usac.web.error.Error a = new usac.web.error.Error();
            a.setLinea(linea);
            a.setColumna(columna);
            a.setToken(s.value.toString());
            a.setDescription("Error Sintactico");
            a.setArchivo("C:\\archivo\\parseado.chtml");

                 for(int w=0; w<expected_token_ids().size(); w++){ 
                    if(expected_token_ids().get(w) !=sym.error){
                        int tok = (int)expected_token_ids().get(w);                        
                        toks.add( symbol_name_from_id(tok) );
                    }
                }

        }

        System.out.println(expected_token_ids().size());

        usac.web.error.Error a = new usac.web.error.Error();
        a.setLinea(linea);
        a.setColumna(columna);
        a.setToken(s.value.toString());
        a.setDescription("Error Sintactico");
        a.setArchivo("C:\\archivo\\parseado.chtml");

        
        for(int w=0; w<expected_token_ids().size(); w++){ 
            if(expected_token_ids().get(w)!=sym.error   ){
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }

        a.setExpected(toks);
        Globaleshtml.Errores.add(a);
        
        
    }
    
    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

    public void report_fatal_error(String message, Object info) {        
    report_error(message, info);
        //System.exit(0);
    }


   public static Nodo main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Nodo result = (Nodo) asin.parse().value;  
            
            return result;            

           // System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        return null;
    }
   
    public static void print(Object a){
        System.out.println(a.toString());
    }
    

      public static void reportar_lista_errores() {

        for (int a = 0; a < Globaleshtml.Errores.size(); a++) {
            usac.web.error.Error r = Globaleshtml.Errores.get(a);
            System.out.print(r.getToken() + "|");
            System.out.print(r.getLinea() + "|");
            System.out.print(r.getColumna() + "|");
            System.out.print(r.getDescription() + "|");

            String exp = "";

            for (int w = 0; w < r.getExpected().size(); w++) {
                if (w != sym.error) {
                    String tok = (String) r.getExpected().get(w);
                    exp = exp + tok + ",";
                }
            }
            System.out.print(exp + "|\n");
        }
    }

  
:};
 
terminal    Object      GRUPO, COR1, COR2, IGUAL, PUNTOCOMA, SUMA, RESTA, MULTI, DIVI,
                        ALINEADO, CENTRADO, IZQUIERDA, DERECHA, JUSTIFICADO, TEXTO, FORMATO,
                        MAYUSCULA, MINUSCULA, NEGRILLA, CURSIVA, CAPITALT, LETRA, TAMTEX, 
                        FONDOELEMENTO, AUTOREDIMENSION, HORIZONTAL, VERTICAL, COMA, VERDADERO, FALSO,
                        VISIBLE, BORDE, OPACO, COLORTEXT, ID, PAR1, PAR2, TAMELEMENTO;

terminal    String      IDENTIFIER, DECIMAL, ENTERO, CADENA;

non terminal Nodo       css, inicio, lista_bloques, bloque, lista_elementos, elemento, grupo, identificador, encabezado_id, encabezado_grupo,
                        propiedades, alineaciones, texto, formato, lista_formatos, elemento_formato, letra, tamtext, fondoelemento, autoredimension, booleano,
                        orientacion, visible, borde, opaco, colortext, e, t, f, alineado, list_propiedades, tamelemento; 


css ::=                 lista_bloques;


lista_bloques ::=       lista_bloques bloque 
                        |   bloque;

bloque ::=              IDENTIFIER COR1  lista_elementos COR2
                        | IDENTIFIER COR1  COR2; 

lista_elementos ::=        lista_elementos elemento
                            | elemento;

elemento ::=  grupo 
            | identificador ;


grupo ::=  encabezado_grupo list_propiedades 
          |  encabezado_grupo ;


identificador ::= encabezado_id  list_propiedades
                | encabezado_id ;


encabezado_id ::= ID PAR1 IDENTIFIER PAR2 PUNTOCOMA ;


encabezado_grupo ::= GRUPO PAR1  IDENTIFIER  PAR2 PUNTOCOMA;


list_propiedades ::= list_propiedades propiedades PUNTOCOMA
                    | propiedades PUNTOCOMA;

propiedades ::= alineado
            |   texto
            |   formato
            |   letra
            |   tamtext
            |   fondoelemento
            |   autoredimension
            |   visible
            |   borde
            |   opaco
            |   colortext
            |   tamelemento
            ;



 alineado ::= ALINEADO IGUAL alineaciones ;


alineaciones ::= IZQUIERDA | DERECHA | JUSTIFICADO | CENTRADO ;


texto ::= TEXTO IGUAL e ;


formato ::= FORMATO IGUAL lista_formatos;


lista_formatos ::= lista_formatos COMA elemento_formato
                |   elemento_formato ;



elemento_formato ::= NEGRILLA
                    | CURSIVA
                    | MAYUSCULA
                    | MINUSCULA
                    | CAPITALT
                    ;

letra ::= LETRA IGUAL  e ;

tamtext ::= TAMTEX IGUAL e ;

tamelemento ::= TAMELEMENTO IGUAL COR1 e COMA e  COR2;

fondoelemento ::= FONDOELEMENTO IGUAL e;


autoredimension ::= AUTOREDIMENSION IGUAL COR1  booleano COMA orientacion COR2 ;


booleano ::= VERDADERO | FALSO ;


orientacion ::= VERTICAL | HORIZONTAL ;

visible ::= VISIBLE IGUAL booleano ;

borde ::= BORDE COR1  e COMA e COMA booleano  COR2;


opaco ::= OPACO IGUAL booleano;

colortext ::= COLORTEXT IGUAL e ;

e ::=  e  SUMA t
    |  e RESTA t 
    |  t;


t ::= t MULTI f 
      t DIVI f 
      | f;

f ::= PAR1 e PAR2
    | DECIMAL
    | ENTERO
    | CADENA ;
 

