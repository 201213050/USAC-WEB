/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Principal;


import static Principal.Navegador.contenedorPaginas;
import Source.CHTML.Scanner;
import Source.CHTML.dibujador;
import Source.CHTML.nodoChtml;
import Source.CHTML.sintactico;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author erick
 */
public class Pagina extends javax.swing.JPanel implements ActionListener{

    public int auxContador = 0;
    public static int contadorPagina= 0;
    public ArrayList<tablaSimbolos> tablaSimbolos_ = new ArrayList();
    public ArrayList<Errores> erroresSintacticos = new ArrayList();
    public ArrayList<Errores> erroresLexicos = new ArrayList();
    public ArrayList<Errores> erroresSemanticos = new ArrayList();
    public ArrayList<Errores> listaErrores = new ArrayList();  /* Errores */
    public static ArrayList<String> historial = new ArrayList();
    public String analisisLexico="";      
    public String analisisLexico_="";
    public String resultado="";
    public String ELexico="";
    public String analisisSintactico="";
    public String analisisSemantico="";   
    public Scanner scanner;
    public sintactico parser;
    public nodoChtml raizChtml = new nodoChtml();
    public int contadorChtml=0;
    public int contadorPaginas=0;
    public String consolaSalida = "";
    
    DefaultTableModel filasErrores = new DefaultTableModel(); 
    DefaultTableModel filasSalidas = new DefaultTableModel();
    int flagOpciones = 0;
    int posX, posXAux = 0;
    int posY, posYAux = 0;
    Color colorFondo = Color.WHITE ;
    ArrayList<Elemento> elementos = new ArrayList();
    int xMax,  xMaxAux=0;
    int yMax, yMaxAux=0;
    int flagTabla = 0; // 0 Significa Que no pertence a tabla, 1. que sí.
    
    Tabla tablaActual;
    Pagina panelActual = null;
    public int anchoActual=0;
    public Panel panelPrincipal = new Panel();
    
    
    //JScrollPane scroll = new JScrollPane();
    
    
    
    public ArrayList<String> archivos = new ArrayList();
    /**
     * Creates new form Panel
     */
    public Pagina() 
    {
        initComponents();        
        filasSalidas = new DefaultTableModel();        
        filasSalidas.addColumn("Archivo");
        filasSalidas.addColumn("Línea");
        filasSalidas.addColumn("Columna");
        filasSalidas.addColumn("Salida consola"); 
        tablaSalida.setModel(filasSalidas);
        //this.panelContenido.add(scroll);
        
        //
        //areaOpciones.setVisible(false);
        //panelOpciones.setVisible(false);
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        Panel = new javax.swing.JPanel();
        panelMenu = new javax.swing.JPanel();
        Menu = new javax.swing.JPanel();
        botonAtras = new javax.swing.JButton();
        botonAdelante = new javax.swing.JButton();
        botonIr = new javax.swing.JButton();
        textRuta = new javax.swing.JTextField();
        botonOpciones = new javax.swing.JButton();
        botonHistorial = new javax.swing.JButton();
        etiquetaNombre = new javax.swing.JLabel();
        botonCerrar = new javax.swing.JButton();
        panelContenido = new javax.swing.JPanel();
        scrollPanel = new javax.swing.JScrollPane();
        scroll = new javax.swing.JPanel();
        panelOpciones = new javax.swing.JPanel();
        areaOpciones = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        archivoCHTML = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        ccss1 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        ccssArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        cjs1 = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        cjsArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaSalida = new javax.swing.JTable();
        panelErrores = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        contenedorErrores = new javax.swing.JPanel();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setPreferredSize(new java.awt.Dimension(800, 800));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(new javax.swing.OverlayLayout(this));

        Panel.setPreferredSize(new java.awt.Dimension(600, 600));
        Panel.setLayout(new java.awt.BorderLayout());

        panelMenu.setBackground(new java.awt.Color(0, 255, 102));
        panelMenu.setLayout(new java.awt.BorderLayout());

        botonAtras.setText("<-");
        botonAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAtrasActionPerformed(evt);
            }
        });

        botonAdelante.setText("->");
        botonAdelante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAdelanteActionPerformed(evt);
            }
        });

        botonIr.setText("Ir a");
        botonIr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIrActionPerformed(evt);
            }
        });

        textRuta.setText("C:\\Users\\erick\\Documents\\NetBeansProjects\\USAC-WEB\\prueba.html");
        textRuta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textRutaKeyPressed(evt);
            }
        });

        botonOpciones.setText("Opciones");
        botonOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpcionesActionPerformed(evt);
            }
        });

        botonHistorial.setText("Historial");
        botonHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonHistorialActionPerformed(evt);
            }
        });

        etiquetaNombre.setText("Nombre de la página");

        botonCerrar.setText("X");
        botonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuLayout = new javax.swing.GroupLayout(Menu);
        Menu.setLayout(MenuLayout);
        MenuLayout.setHorizontalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MenuLayout.createSequentialGroup()
                        .addComponent(botonOpciones)
                        .addGap(18, 18, 18)
                        .addComponent(botonHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MenuLayout.createSequentialGroup()
                        .addComponent(botonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonAdelante, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonIr, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textRuta)
                    .addGroup(MenuLayout.createSequentialGroup()
                        .addComponent(etiquetaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        MenuLayout.setVerticalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuLayout.createSequentialGroup()
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonCerrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAdelante, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonIr, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelMenu.add(Menu, java.awt.BorderLayout.CENTER);

        Panel.add(panelMenu, java.awt.BorderLayout.PAGE_START);

        panelContenido.setBackground(new java.awt.Color(51, 204, 255));
        panelContenido.setPreferredSize(new java.awt.Dimension(600, 600));
        panelContenido.setLayout(new java.awt.CardLayout());

        scrollPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPanel.setViewportBorder(javax.swing.BorderFactory.createCompoundBorder());
        scrollPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        scroll.setBackground(new java.awt.Color(153, 255, 255));
        scroll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        scroll.setMinimumSize(new java.awt.Dimension(0, 15767));
        scroll.setPreferredSize(new java.awt.Dimension(600, 3000));
        scroll.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                scrollComponentResized(evt);
            }
        });

        javax.swing.GroupLayout scrollLayout = new javax.swing.GroupLayout(scroll);
        scroll.setLayout(scrollLayout);
        scrollLayout.setHorizontalGroup(
            scrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2972, Short.MAX_VALUE)
        );
        scrollLayout.setVerticalGroup(
            scrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15767, Short.MAX_VALUE)
        );

        scrollPanel.setViewportView(scroll);

        panelContenido.add(scrollPanel, "card2");

        Panel.add(panelContenido, java.awt.BorderLayout.CENTER);

        panelOpciones.setPreferredSize(new java.awt.Dimension(457, 350));
        panelOpciones.setLayout(new javax.swing.OverlayLayout(panelOpciones));

        areaOpciones.setToolTipText("");

        jPanel1.setLayout(new javax.swing.OverlayLayout(jPanel1));

        archivoCHTML.setColumns(20);
        archivoCHTML.setRows(5);
        jScrollPane3.setViewportView(archivoCHTML);

        jPanel1.add(jScrollPane3);

        areaOpciones.addTab("CHTML", jPanel1);

        jPanel2.setLayout(new javax.swing.OverlayLayout(jPanel2));

        ccssArea1.setColumns(20);
        ccssArea1.setRows(5);
        jScrollPane4.setViewportView(ccssArea1);

        ccss1.addTab("1", jScrollPane4);

        jPanel2.add(ccss1);

        areaOpciones.addTab("CCSS", jPanel2);

        jPanel3.setLayout(new javax.swing.OverlayLayout(jPanel3));

        cjsArea1.setColumns(20);
        cjsArea1.setRows(5);
        jScrollPane5.setViewportView(cjsArea1);

        cjs1.addTab("tab1", jScrollPane5);

        jPanel3.add(cjs1);

        areaOpciones.addTab("CJS", jPanel3);

        jPanel4.setLayout(new javax.swing.OverlayLayout(jPanel4));

        tablaSalida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Archivo", "Línea", "Columna", "Salida"
            }
        ));
        jScrollPane1.setViewportView(tablaSalida);
        if (tablaSalida.getColumnModel().getColumnCount() > 0) {
            tablaSalida.getColumnModel().getColumn(0).setHeaderValue("Archivo");
            tablaSalida.getColumnModel().getColumn(1).setHeaderValue("Línea");
            tablaSalida.getColumnModel().getColumn(2).setHeaderValue("Columna");
            tablaSalida.getColumnModel().getColumn(3).setHeaderValue("Salida");
        }

        jPanel4.add(jScrollPane1);

        areaOpciones.addTab("Consolo Salida", jPanel4);

        panelErrores.setLayout(new javax.swing.OverlayLayout(panelErrores));

        contenedorErrores.setLayout(new javax.swing.OverlayLayout(contenedorErrores));
        jScrollPane2.setViewportView(contenedorErrores);

        panelErrores.add(jScrollPane2);

        areaOpciones.addTab("Consola Errores", panelErrores);

        panelOpciones.add(areaOpciones);

        Panel.add(panelOpciones, java.awt.BorderLayout.PAGE_END);

        add(Panel);
    }// </editor-fold>//GEN-END:initComponents

    private void botonAdelanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAdelanteActionPerformed
        try {
            verPaginaSiguiente();
        } catch (IOException ex) {
            Logger.getLogger(Pagina.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonAdelanteActionPerformed

    private void botonEjecutarPerformed(java.awt.event.ActionEvent evt)
    {
        
        
    }
    
    
    private void botonIrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIrActionPerformed
        try 
        {
            analizar();
            Pagina.contadorPagina=0;
        } 
        catch (IOException ex)
        {
            //Logger.getLogger(this.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_botonIrActionPerformed

    private void botonHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonHistorialActionPerformed
                       
            Pagina pagina = new Pagina();
            String currentPath= PathActual()+"\\Historial.chtml"; 
        try {
            imprimirHistorial();
        } catch (IOException ex) {
            Logger.getLogger(Pagina.class.getName()).log(Level.SEVERE, null, ex);
        }
            pagina.textRuta.setText(currentPath); 
            scroll.add(pagina);
        try {
            pagina.analizar();
        } catch (IOException ex) {
            Logger.getLogger(Pagina.class.getName()).log(Level.SEVERE, null, ex);
        }
            contenedorPaginas.addTab("Historial", null, pagina);            
                 
            
                        
    }//GEN-LAST:event_botonHistorialActionPerformed

    public void imprimirHistorial() throws IOException
    {
        String contenido="< chtml >\n"
                + "    < encabezado >\n" +
            "< titulo > Historial< fin-titulo> \n" +
            "< fin-encabezado >"
                 + "<cuerpo>\n  ";
        
        for(String item : Pagina.historial)
        {
            String partes[] = item.split(",");
            contenido= contenido+
                    "<texto alto=\"30\"; ancho=\"500\"; > " + partes[0] + " <fin-texto> \n "+
                   "<enlace alto=\"30\"; ancho=\"200\"; ruta=\"" + partes[0] + "\";> Ir  <fin-enlace>\n "+
                   "<texto alto=\"30\"; ancho=\"300\"; > " + partes[1] + " <fin-texto> \n "+
                   "<salto-fin> \n";
        }
        
        contenido = contenido + "< fin-cuerpo >\n"
                + "<fin-chtml>";
        
        String ruta = PathActual()+"\\Historial.chtml";
        File archivo = new File(ruta);
        BufferedWriter bw;
        if(archivo.exists()) {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(contenido);
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(contenido);
        }
        bw.close();        
        

    }
    
    private void botonOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpcionesActionPerformed
        if(flagOpciones==0)
        {
            panelOpciones.setVisible(true);            
            flagOpciones = 1;
        }
        if(flagOpciones==1)
        {
            panelOpciones.setVisible(false);
            flagOpciones = 0;
        }          
    }//GEN-LAST:event_botonOpcionesActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized


    }//GEN-LAST:event_formComponentResized

    private void textRutaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textRutaKeyPressed
          if(evt.getKeyCode() == evt.VK_ENTER) 
          {
                try 
                {
                    analizar();
                } 
                catch (IOException ex)
                {
                    //Logger.getLogger(this.class.getName()).log(Level.SEVERE, null, ex);
                }                                                
          }    
        
        
 
    }//GEN-LAST:event_textRutaKeyPressed

    private void botonAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAtrasActionPerformed
        try {
            verPaginaAnterior();
        } catch (IOException ex) {
            Logger.getLogger(Pagina.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonAtrasActionPerformed

    private void botonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCerrarActionPerformed
        int actual = Navegador.contenedorPaginas.getSelectedIndex();
        Navegador.contenedorPaginas.remove(actual);
    }//GEN-LAST:event_botonCerrarActionPerformed

    private void scrollComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_scrollComponentResized
        posX = posY = xMax = yMax=  0;
        //panelPrincipal = new Panel();
        panelPrincipal = new Panel();
        panelPrincipal.setBounds(0, 0, scroll.getWidth(), Panel.getHeight());
        panelPrincipal.setAncho(Panel.getWidth());
        panelPrincipal.setAlto(scroll.getHeight());
        prepararPanel(panelPrincipal);
        generarObjetos(raizChtml,panelPrincipal);
        Interfaz(panelPrincipal); // Generamos la interfaz
        scroll.add(panelPrincipal);
    }//GEN-LAST:event_scrollComponentResized

    private void botonActionPerformed(java.awt.event.ActionEvent evt)
    {
       etiquetaNombre.setText("Has pulsado el botón " );	 
    }
    

public void prepararPanel(Panel nuevo)
{
    nuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    nuevo.setMinimumSize(new java.awt.Dimension(0, 15767));
    nuevo.setPreferredSize(new java.awt.Dimension(nuevo.getAncho(),nuevo.getAlto()));
}
    
public void analizar() throws IOException
{
        scroll.removeAll();
        tablaSimbolos_.clear();
        erroresLexicos.clear();
        elementos.clear();
        erroresSintacticos.clear();
        elementos.clear();
        archivos.clear();
        compilar(); 
        errores_consola();
        if(
                (!erroresLexicos.isEmpty())
                ||(!erroresSintacticos.isEmpty())
                ||(erroresSemanticos.size()!=0))
        {
            errores_consola();
        }  
        
        ponerTitulo();
        
        /*Generamos la gráfica del arbol.*/
        dibujador aux = new dibujador();           
        aux.generarGrafica(raizChtml);
        
        /*Preparamos el panel a insertar a la página.*/
        posX = posY = xMax = yMax=  0;
        panelPrincipal = new Panel();        
        panelPrincipal.setBounds(0, 0, scroll.getWidth(), 3000);
        panelPrincipal.setAncho(scroll.getWidth());
        panelPrincipal.setAlto(3000);        
        prepararPanel(panelPrincipal);
        
        /*Analizamos el arbol y generamos lista de objetos*/
        generarObjetos(raizChtml,panelPrincipal);  
        
        /*Analizar los archivos cjs y ccss*/
        analizarArchivos();        
        
        /*Agregamos el panel principal a la lista de elementos.*/
        Elemento elemento = new Elemento("cuerpo", "panel", panelPrincipal);
        elementos.add(elemento);
        
        

        
        

        
        /*A partir de la lista de objetos los dibujamos sobre el panelPrincipal.*/
        Interfaz(panelPrincipal);   
        

        
        
                        
        /*Agregamos el panel a nuestro scroll(en pagina vacía).*/
        scroll.add(panelPrincipal);
        limpiarSalidas();
        imprimirReporteLexico();
        imprimirResultado();
        imprimirLexicos();
        imprimirSintacticos();
        imprimirSemanticos(); 
        mostrarChtml();
        mostrarCjs();
} 



    public static void interpretarccss(String path) {
        Source.CCSS.Analizadores.sintacticoCCSS pars;
        try {
            InputStream is = new FileInputStream(path);
            Reader reader = new InputStreamReader(is);
            pars=new Source.CCSS.Analizadores.sintacticoCCSS(new Source.CCSS.Analizadores.lexicoCCSS(reader));
            pars.parse(); 
            
            Source.CCSS.AST.nodo raiz = pars.getRaiz();
            Source.CCSS.Ejecucion.recorrerArbol.recorrido(raiz);            
            Source.CCSS.AST.graficarAST graficar = new Source.CCSS.AST.graficarAST(raiz);
            Source.CCSS.Ejecucion.listaElemento.imprimirBloque();
        } catch (Exception ex) {
            System.out.println("Error fatal en compilación de entrada." );
            System.out.println("Causa: "+ex.getMessage());
        } 
    }



public void ponerTitulo()
{       
    String ruta = textRuta.getText();
    StringTokenizer token = new StringTokenizer(ruta, "\\");
    while (token.hasMoreTokens()) {
            ruta = token.nextToken();                
    }       
    
    int panelActual =  Navegador.contenedorPaginas.getSelectedIndex();      
}

public MouseListener agregarListener()
{
    MouseListener boton =new MouseListener(){

        public void mouseClicked(MouseEvent event) 
        {

            Boton fuente = (Boton)event.getSource();
            Mensaje(fuente.getCadena(), fuente.getCadena());
        }

        @Override
        public void mousePressed(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseExited(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    };    
    
    return boton;
}


public void mostrarCjs()
{
      ccss1.removeAll();
      cjs1.removeAll();
      File archivo = null;
      FileReader fr = null;
      BufferedReader br = null;
      String contenido="";
      boolean existe=false;

      String nombre="";
      for(String texto: archivos)
      {
        File archivoExiste = new File(texto);   
        if (archivoExiste.exists()){existe=true;}else{existe=false;}
        archivoExiste = null;
        if(existe)
        {
            
            try 
            {
               archivoExiste = new File (texto);
               fr = new FileReader (archivoExiste);
               br = new BufferedReader(fr);
               String linea;
               while((linea=br.readLine())!=null)
                   contenido = contenido + linea;              
            }
            catch(Exception e){
               e.printStackTrace();
            }finally{
               try{                    
                  if( null != fr ){   
                     fr.close();     
                  }                  
               }catch (Exception e2){ 
                  e2.printStackTrace();
               }
            }
            StringTokenizer token = new StringTokenizer(texto, "\\");
            while (token.hasMoreTokens()) {
                    nombre = token.nextToken();                
            }  
            token  = new StringTokenizer(nombre, ".");
            String tipo ="";
            while (token.hasMoreTokens()) {
                    tipo = token.nextToken();                
            }          
            switch(tipo)
            {
                case "ccss":
                    JTextArea nuevo = new JTextArea(contenido);
                    ccss1.add(nombre, nuevo);                 
                    break;
                case "cjs":
                    nuevo = new JTextArea(contenido);
                    cjs1.add(nombre, nuevo);                 
                    break;   
                 default:
                     archivoCHTML.setText(contenido);
                     break;
            }            
        }

        contenido="";
      }
}


public void analizarArchivos()
{
      String nombre="";
      for(String texto: archivos)
      {                    
            StringTokenizer token  = new StringTokenizer(texto, ".");
            String tipo ="";
            while (token.hasMoreTokens()) 
            {
                    tipo = token.nextToken();                
            }          
            switch(tipo)
            {
                case "ccss":
                    interpretarccss(texto);
                    break;
                case "cjs":              
                    break;   
            }                   
      }
}
public void mostrarChtml()
{
      File archivo = null;
      FileReader fr = null;
      BufferedReader br = null;

      try 
      {
         archivo = new File (textRuta.getText());         
         if(archivo.isFile() && archivo.exists())
         {
            fr = new FileReader (archivo);
            br = new BufferedReader(fr);
            String linea;
            while((linea=br.readLine())!=null)
            archivoCHTML.setText(archivoCHTML.getText() +"\n" + linea);         
         }

      }
      catch(Exception e){
         e.printStackTrace();
      }finally{
         // En el finally cerramos el fichero, para asegurarnos
         // que se cierra tanto si todo va bien como si salta 
         // una excepcion.
         try{                    
            if( null != fr ){   
               fr.close();     
            }                  
         }catch (Exception e2){ 
            e2.printStackTrace();
         }
      }
}
public void limpiarSalidas()
{
        filasErrores = new DefaultTableModel(); 
        filasSalidas = new DefaultTableModel();
        filasErrores.addColumn("Archivo");
        filasErrores.addColumn("Línea");
        filasErrores.addColumn("Columna");
        filasErrores.addColumn("Tipo");
        filasErrores.addColumn("Descripción");
            
        filasSalidas.addColumn("Archivo");
        filasSalidas.addColumn("Línea");
        filasSalidas.addColumn("Columna");
        filasSalidas.addColumn("SalidaX"); 
        tablaSalida.setModel(filasSalidas);
}

public void compilar(){

        Scanner.listaErrores.clear();
        String path=textRuta.getText();
        path = quitarComillas(path);
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        Pagina.historial.add(path+ "," + date);      
        
        File archivo = new File(path);             
        if(archivo.exists() && !archivo.isDirectory())
        {
            try 
            {            
               scanner=new Scanner(new java.io.FileReader(path));      
               erroresLexicos = Scanner.listaErrores;
               Scanner.tablaSimbolos_.clear();
               parser = new sintactico(scanner);
               parser.parse();
               tablaSimbolos_ = Scanner.tablaSimbolos_;
               raizChtml = sintactico.raizChtml;
               int numero= tablaSimbolos_.size();
               System.out.println("Columna\tLinea\tValor\tTipo\tDescripción");                
               for(int n=0;n<numero;n++)
               {
                   System.out.println(
                           tablaSimbolos_.get(n).columna +
                           "\t"+tablaSimbolos_.get(n).linea+
                           "\t"+tablaSimbolos_.get(n).Valor+ 
                           "\t"+tablaSimbolos_.get(n).tipo+ 
                           "\t\t"+tablaSimbolos_.get(n).descripcion);
               }
               System.out.println(numero);
           }
           catch(Exception e) { System.out.println(e.getMessage());}        
        }
        else
        {
            JOptionPane.showMessageDialog(areaOpciones, "El archivo no ha sido encontrado.");
        }
}



   public void generarObjetos(nodoChtml raiz, Panel panel)
    {
        
        String retorno="";
        if(raiz!=null)
        {
            System.out.println(raiz.getValue());
            switch(raiz.getValue())
            {
                case "DOCUMENTO":
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        generarObjetos(aux, panel);
                    }
                    break;
                    
                case "ENCABEZADO":                                
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        generarObjetos(aux, panel);
                    }
                    break;
                case "LISTAARCHIVOS":
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        archivos.add(quitarComillas(aux.getValue())); // Agregamos los archivos a analizar.
                    }
                    break;
                case "TITULO": 
                    String titulo = "";
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        titulo = titulo + aux.getValue();
                    }                                    
                    etiquetaNombre.setText(quitarComillas(titulo));
                    break;
                case "SALTO":                                   
                    Elemento salto = new Elemento();
                    salto.setNombre("salto");
                    salto.setTipo("salto");
                    panel.getElementos().add(salto);
                    break;                    
                case  "CUERPO":
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        generarObjetos(aux,panel);
                    }
                    break;
                case "ELEMENTO":
                        nodoChtml hijoI = raiz.getHijos().get(0);
                        nodoChtml hijoD = raiz.getHijos().get(1);
                        switch(hijoI.getValue().toLowerCase())
                        {                                                                 
                            case "id":
                                panel.setName(quitarComillas(hijoD.getValue()));
                                panel.setId(quitarComillas(hijoD.getValue()));
                                break;
                            case "grupo":
                                panel.setGrupo(quitarComillas(hijoD.getValue()));                                    
                                break;
                            case "cadena":
                                panel.setCadena(quitarComillas(hijoD.getValue()));                                                                                           
                                break; 
                            case "ancho":                                                                        
                                String numero = hijoD.getValue();
                                numero = numero.substring(1,numero.length()-1);
                                if (esNumero(numero))
                                {
                                    panel.setAncho(Integer.valueOf(numero));
                                } 
                                break;
                            case "alto":            
                                numero = hijoD.getValue();
                                numero = numero.substring(1,numero.length()-1);
                                if (esNumero(numero))
                                {
                                    panel.setAlto(Integer.valueOf(numero));
                                }     
                                break; 
                            case "alineado":                                                                        
                                switch(hijoD.getValue())
                                {
                                    case "\"izquierda\"":
                                        panel.setAlineado("izquierda");                                        
                                        panel.setAlignmentX(LEFT_ALIGNMENT);
                                        panel.setLayout(new FlowLayout(FlowLayout.LEFT));
                                        break;
                                    case "\"derecha\"":
                                        panel.setAlineado("derecha");
                                        panel.setAlignmentX(RIGHT_ALIGNMENT);
                                        panel.setLayout(new FlowLayout(FlowLayout.RIGHT));
                                        break;  
                                    case "\"centrado\"":
                                        panel.setAlineado("centrado");
                                        panel.setAlignmentX(CENTER_ALIGNMENT);
                                        panel.setLayout(new FlowLayout(FlowLayout.CENTER));
                                        break;   
                                    default :
                                        //filasErrores.addRow(new String[]{"CHTML",String.valueOf(hijoD.getLinea()),String.valueOf(hijoD.getColumna()),
                                          //  "Sintactico","Valor de alineacion incorrecto"});
                                        String mensaje = raiz.getValue() + "Nombre de color no válido.";
                                        erroresSemanticos.add( new Errores("Sematico", raiz.getLinea(), raiz.getColumna(), mensaje ));                                        
                                        break;                                          
                                }
                                break;  
                            case "click":                                                                       
                                panel.setMetodo(quitarComillas(hijoD.getValue()));
                                break; 
                            case "ruta":                                                                       
                                panel.setRuta(quitarComillas(hijoD.getValue()));
                                break;   
                            case "color":
                                if(hijoD.getValue().substring(1,2).equals("#"))
                                {
                                    if(hijoD.getValue().length()==9)
                                    {
                                        //Color colorFodo = new Color(int r, int g, int b, int a);
                                        //this.scroll.setBackground(colorFondo);
                                        int r,g,b,a;
                                        String hr,hg,hb,ha;
                                        String entrada= hijoD.getValue();
                                        hr = entrada.substring(2,4);
                                        hg = entrada.substring(4,6);
                                        hb = entrada.substring(6,8);

                                        r = hexToDec(hr);
                                        g = hexToDec(hg);
                                        b = hexToDec(hb);
                                        a=0;
                                        if(r==300 || g ==300 || b==300)
                                        {
                                            //filasErrores.addRow(new String[]{"CHTML",String.valueOf(hijoD.getLinea()),String.valueOf(hijoD.getColumna()),"Semantico", hijoD.getValue() + " Valor rgb no valido."});
                                            String mensaje = raiz.getValue() + "Valor rgb no válido.";
                                            erroresSemanticos.add( new Errores("Sematico", raiz.getLinea(), raiz.getColumna(), mensaje ));
                                            break;
                                        }

                                        panel.setBackground(new Color(r,g,b));
                                        colorFondo = new Color(r,g,b);
                                    }
                                    else
                                    {
                                        //filasErrores.addRow(new String[]{"CHTML",String.valueOf(hijoD.getLinea()),String.valueOf(hijoD.getColumna()),"Semantico","Valor rgb no valido."});
                                        String mensaje = raiz.getValue() + "Valor rgb no válido.";
                                        erroresSemanticos.add( new Errores("Sematico", raiz.getLinea(), raiz.getColumna(), mensaje ));                                        
                                        break;
                                    }
                                }
                                else
                                {
                                    panel.setBackground(buscarColor(hijoD));
                                    colorFondo = buscarColor(raiz.getHijos().get(0));
                                }  
                                break;
                        }                                                                                                                 
                    break;
                    
                    
                case "CONTENIDO"   :
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        generarObjetos(aux,panel);
                    }
                    break;
                    
                case "ENLACE":
                    System.out.println("---------------------------ENLACE---------------------");
                    //Vemos todos los elementos :v
                    Enlace enlace = new Enlace();
                    enlace.setBackground(colorFondo);
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {
                                case "ruta":
                                    enlace.setRuta(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "id":
                                    enlace.setId(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "grupo":
                                    enlace.setGrupo(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "cadena":
                                    enlace.setCadena(aux.getHijos().get(1).getValue());                                    
                                    enlace.setText(enlace.getCadena());
                                    break; 
                                case "ancho":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        enlace.setAncho(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                       
                                    break;
                                case "alto":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        enlace.setAlto(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            enlace.setAlineado("izquierda");
                                            enlace.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            enlace.setAlineado("derecha");
                                            enlace.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            enlace.setAlineado("centrado");
                                            enlace.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+enlace.getAlineado());
                                    break;                                     
                            }
                        }
                    }
                    /*
                    
                    */                    
                    Elemento elemento = new Elemento(enlace.getId(),"enlace",enlace);
                   panel.getElementos().add(elemento);                                     
                    break;
                    
                case "BOTON":
                    System.out.println("---------------------------BOTON---------------------");                    
                    Boton boton = new Boton();                    
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {
                                case "ruta":
                                    boton.setRuta(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    break;
                                case "click":                                                                       
                                    boton.setMetodo(quitarComillas(aux.getHijos().get(1).getValue()));
                                    break;                                     
                                case "id":
                                    boton.setId(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    break;
                                case "grupo":
                                    boton.setGrupo(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    break;
                                case "cadena":
                                    boton.setCadena(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    boton.setText(quitarComillas(boton.getCadena()));
                                    break; 
                                case "ancho":          
                                    String numero = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    if (esNumero(numero))
                                    {
                                        boton.setAncho(Integer.valueOf(numero));
                                    }                                       
                                    break;
                                case "alto":  
                                    numero = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);                                    
                                    if (esNumero(numero))
                                    {
                                        boton.setAlto(Integer.valueOf(numero));
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            boton.setAlineado("izquierda");
                                            boton.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            boton.setAlineado("derecha");
                                            boton.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            boton.setAlineado("centrado");
                                            boton.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    break;                                     
                            }
                        }
                    }      
                    if(flagTabla==1)
                    {
                        Elemento tablaAuxiliar =  elementos.get(elementos.size());                                                
                    }
                    elemento = new Elemento(boton.getId(),"boton",boton);
                    panel.getElementos().add(elemento);                                     
                    break;                    
                    
                    
                case "SPINNER":
                    System.out.println("---------------------------SPINNER---------------------");                    
                    Spinner spinner = new Spinner();
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {
                                case "ruta":
                                    spinner.setRuta(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "click":                                                                       
                                    spinner.setMetodo(aux.getHijos().get(1).getValue());
                                    break;                                     
                                case "id":
                                    spinner.setId(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "grupo":
                                    spinner.setGrupo(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "entero":
                                    spinner.setCadena(aux.getHijos().get(1).getValue());                                                                        
                                    break; 
                                case "ancho":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        spinner.setAncho(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                       
                                    break;
                                case "alto":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        spinner.setAlto(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            spinner.setAlineado("izquierda");
                                            spinner.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            spinner.setAlineado("derecha");
                                            spinner.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            spinner.setAlineado("centrado");
                                            spinner.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+spinner.getAlineado());
                                    break;                                     
                            }
                        }
                    }                   
                    elemento = new Elemento(spinner.getId(),"spinner",spinner);
                    panel.getElementos().add(elemento);                                     
                    break;                    
                    
                case "TEXTO":
                    System.out.println("---------------------------TEXTO---------------------");
                    //Vemos todos los elementos :v
                    Texto texto = new Texto();
                    //texto.setBackground(colorFondo);
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {                                                                 
                                case "id":
                                    texto.setName(quitarComillas(aux.getHijos().get(1).getValue()));
                                    break;
                                case "grupo":
                                    texto.setGrupo(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    break;
                                case "cadena":
                                    texto.setCadena(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    texto.setText(quitarComillas(texto.getCadena()));
                                    //texto.setAlto(texto.cadena.length());
                                    break; 
                                case "ancho":                                                                        
                                    String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println(aux.getHijos().get(1).getValue()+"  ANCHO ---- "+ancho);
                                    if (esNumero(ancho))
                                    {
                                        System.out.println("--Valor válido--");
                                        texto.setAncho(Integer.valueOf(ancho));
                                    }                                       
                                    break;
                                case "alto":                                                                        
                                    String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println(aux.getHijos().get(1).getValue()+"  ALTO ---- "+alto);
                                    if (esNumero(alto))
                                    {
                                        System.out.println("--Valor válido--");
                                        texto.setAlto(Integer.valueOf(alto));
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            texto.setAlineado("izquierda");
                                            texto.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            texto.setAlineado("derecha");
                                            texto.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            texto.setAlineado("centrado");
                                            texto.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+texto.getAlineado());
                                    break;                                     
                            }
                        }
                    }                    
                    elemento = new Elemento(texto.getId(),"texto",texto);    
                    panel.getElementos().add(elemento);
                    break;  
/*--------------------------------------------------Caja area de texto--------------------------------------------------*/                   
                case "TEXTOA":
                    System.out.println("---------------------------TEXTOA---------------------");
                    //Vemos todos los elementos :v
                    areaTexto area = new areaTexto();
                    area.setBackground(Color.white);
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {                                                                 
                                case "id":
                                    area.setName(quitarComillas(aux.getHijos().get(1).getValue()));
                                    break;
                                case "grupo":
                                    area.setGrupo(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    break;
                                case "cadena":
                                    area.setCadena(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    area.setText(quitarComillas(area.getCadena()));
                                    //texto.setAlto(texto.cadena.length());
                                    break; 
                                case "ancho":     
                                    String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println("ANCHO ---- "+ancho);
                                    if (esNumero(ancho))
                                    {
                                        area.setAncho(Integer.valueOf(ancho));
                                        area.setAncho(area.getAncho());
                                    }                                       
                                    break;
                                case "alto": 
                                    String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println("ALTO ---- "+alto);
                                    if (esNumero(alto))
                                    {
                                        area.setAlto(Integer.valueOf(alto));
                                        area.setAlto(area.getAlto());
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            area.setAlineado("izquierda");
                                            area.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            area.setAlineado("derecha");
                                            area.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            area.setAlineado("centrado");
                                            area.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+area.getAlineado());
                                    break;                                     
                            }
                        }
                    }   
                    area.setBorder(BorderFactory.createLineBorder(Color.black));
                    elemento = new Elemento(area.getId(),"area",area);    
                    panel.getElementos().add(elemento);
                    break;      
                    
/*CAJA DE TEXTO SIN LINEAS-----------------------------------------------*/  
                    
                case "CAJATEXTO":
                    System.out.println("---------------------------CAJATEXTO---------------------");
                    //Vemos todos los elementos :v
                    Caja caja = new Caja();                    
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {                                                                 
                                case "id":
                                    caja.setName(quitarComillas(aux.getHijos().get(1).getValue()));
                                    break;
                                case "grupo":
                                    caja.setGrupo(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    break;
                                case "cadena":
                                    caja.setCadena(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    caja.setText(quitarComillas(caja.getCadena()));
                                    //texto.setAlto(texto.cadena.length());
                                    break; 
                                case "ancho":     
                                    String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println("ANCHO ---- "+ancho);
                                    if (esNumero(ancho))
                                    {
                                        caja.setAncho(Integer.valueOf(ancho));
                                        caja.setAncho(caja.getAncho());
                                    }                                       
                                    break;
                                case "alto": 
                                    String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println("ALTO ---- "+alto);
                                    if (esNumero(alto))
                                    {
                                        caja.setAlto(Integer.valueOf(alto));
                                        caja.setAlto(caja.getAlto());
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            caja.setAlineado("izquierda");
                                            caja.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            caja.setAlineado("derecha");
                                            caja.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            caja.setAlineado("centrado");
                                            caja.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+caja.getAlineado());
                                    break;                                     
                            }
                        }
                    }   
                    caja.setBorder(BorderFactory.createLineBorder(Color.black));
                    elemento = new Elemento(caja.getId(),"caja",caja);    
                    panel.getElementos().add(elemento);
                    break;  

/*----------------------------IMAGEN--------------------------------------*/                    
                case "IMAGEN":
                    System.out.println("---------------------------IMAGEN---------------------");
                    Imagen imagen = new Imagen();
                    imagen.setBackground(colorFondo);
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {                                                                 
                                case "id":
                                    imagen.setName(quitarComillas(aux.getHijos().get(1).getValue()));
                                    break;
                                case "grupo":
                                    imagen.setGrupo(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    break;
                                case "cadena":
                                    imagen.setCadena(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    imagen.setText(imagen.getCadena());                                    
                                    break; 
                                case "ancho":                                                                        
                                    String numero = aux.getHijos().get(1).getValue();
                                    numero = numero.substring(1,numero.length()-1);
                                    if (esNumero(numero))
                                    {
                                        imagen.setAncho(Integer.valueOf(numero));
                                    } 
                                    break;
                                case "alto":            
                                    numero = aux.getHijos().get(1).getValue();
                                    numero = numero.substring(1,numero.length()-1);
                                    if (esNumero(numero))
                                    {
                                        imagen.setAlto(Integer.valueOf(numero));
                                    }     
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            imagen.setAlineado("izquierda");
                                            imagen.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            imagen.setAlineado("derecha");
                                            imagen.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            imagen.setAlineado("centrado");
                                            imagen.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    break;  
                                case "click":                                                                       
                                    imagen.setMetodo(aux.getHijos().get(1).getValue());
                                    break; 
                                case "ruta":                                                                       
                                    imagen.setRuta(aux.getHijos().get(1).getValue());
                                    break;                                    
                            }
                        }
                    }                    
                    elemento = new Elemento(imagen.getId(),"imagen",imagen);    
                    panel.getElementos().add(elemento);
                    break;                        
                    
                  
/*------------------------CAJA DE OPCIONES-----------------------*/                    
                case "CAJAOPCIONES":
                    System.out.println("---------------------------IMAGEN---------------------");
                    JComboBox cajaOpciones = new JComboBox();
                    cajaOpciones.setBounds(posX, posY, 100, 20);
                    int contadorOpciones = 0;
                    for(nodoChtml aux: raiz.getHijos())
                    {       
                        System.out.println(aux.getValue());
                        switch(aux.getValue().toLowerCase())
                        {                                      
                            /*------------OPCIONES----------*/                                        
                            case "opcion":
                                
                                String valor = "";                                
                                for(nodoChtml opcion: aux.getHijos())
                                {     
                                    if(opcion.getValue().equals("ELEMENTO"))
                                    {
                                        nodoChtml izquierda = opcion.getHijos().get(0);
                                        nodoChtml derecha = opcion.getHijos().get(1);
                                        //System.out.println(izquierda.getValue().toLowerCase()+"***********************************************"+derecha.getValue());
                                        switch(izquierda.getValue().toLowerCase())
                                        {
                                            case "valor":                                                                                                                           
                                                valor = quitarComillas(derecha.getValue());
                                                break; 
                                            case "cadena":                                                                       
                                                if(valor.equals(""))
                                                {
                                                    valor = quitarComillas(derecha.getValue());
                                                }
                                                break;                                                
                                        }                                                        
                                    }
                                }
                                cajaOpciones.addItem(valor);
                                break;                                                                                                    
                        }
                        contadorOpciones++;
                    }                    
                    //elemento = new Elemento(cajaOpciones.getId(),"cajaOpciones",cajaOpciones);    
                    elemento = new Elemento("cajaOpciones","cajaOpciones",cajaOpciones);    
                    panel.getElementos().add(elemento);
                    break;                        
                  
                    
                case "PANEL":
                    System.out.println("---------------------------PANEL---------------------");
                    Panel panelNuevo = new Panel();
                    prepararPanel(panelNuevo);
                    for(nodoChtml hijoAuxiliar: raiz.getHijos())
                    {
                        generarObjetos(hijoAuxiliar, panelNuevo);                                  
                    }                              
                    anchoActual = scroll.getWidth();
                    elemento = new Elemento("panel","panel",panelNuevo); 
                    panel.getElementos().add(elemento);
                    break;                    
                    
                case "TABLA":
                    System.out.println("---------------------------TABLA---------------------");
                    Tab tabla = generarTabla(raiz);
                    elemento = new Elemento(tabla.getId(),"tabla",tabla);
                    panel.getElementos().add(elemento);
                    break;                                                            
            }
        }        
    
    }
   
   public Tab generarTabla(nodoChtml raiz)
   {
       Tab tabla = new Tab();
       DefaultTableModel dataTablaFila = new DefaultTableModel();
       ArrayList<Elemento> listaCeldas = new ArrayList();
       for(nodoChtml aux: raiz.getHijos())
       {           
           switch(aux.getValue())
           {
                case "ELEMENTO":                    
                    switch(aux.getHijos().get(0).getValue().toLowerCase())
                    {                                                                 
                        case "id":
                            tabla.setName(quitarComillas(aux.getHijos().get(1).getValue()));
                            break;
                        case "grupo":
                            tabla.setGrupo(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                            break;
                        case "cadena":
                            tabla.setCadena(quitarComillas(aux.getHijos().get(1).getValue()));                                                                                               
                            break; 
                        case "ancho":                                                                        
                            String numero = aux.getHijos().get(1).getValue();
                            numero = numero.substring(1,numero.length()-1);
                            if (esNumero(numero))
                            {
                                tabla.setAncho(Integer.valueOf(numero));
                            } 
                            break;
                        case "alto":            
                            numero = aux.getHijos().get(1).getValue();
                            numero = numero.substring(1,numero.length()-1);
                            if (esNumero(numero))
                            {
                                tabla.setAlto(Integer.valueOf(numero));
                            }     
                            break; 
                        case "alineado":                                                                        
                            switch(aux.getHijos().get(1).getValue())
                            {
                                case "\"izquierda\"":
                                    tabla.setAlineado("izquierda");
                                    tabla.setAlignmentX(LEFT_ALIGNMENT);
                                    break;
                                case "\"derecha\"":
                                    tabla.setAlineado("derecha");
                                    tabla.setAlignmentX(RIGHT_ALIGNMENT);
                                    break;  
                                case "\"centrado\"":
                                    tabla.setAlineado("centrado");
                                    tabla.setAlignmentX(CENTER_ALIGNMENT);
                                    break;   
                                default :
                                    filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                        "Sintactico","Valor de alineacion incorrecto"});
                                    break;                                          
                            }
                            break;  
                        case "click":                                                                       
                            tabla.setMetodo(aux.getHijos().get(1).getValue());
                            break; 
                        case "ruta":                                                                       
                            tabla.setRuta(aux.getHijos().get(1).getValue());
                            break;                                    
                    }
                break;
                case "FILA":                    
                    for(nodoChtml fila: aux.getHijos())
                    {                                                
                        for(nodoChtml elemento :  fila.getHijos())
                        {
                            switch(elemento.getValue())
                            {
                                case "ELEMENTO":
                                        nodoChtml valorI = elemento.getHijos().get(0);
                                        nodoChtml valorD = elemento.getHijos().get(1);
                                        switch(valorI.getValue().toLowerCase())
                                        {
                                            case "id":
                                                tabla.setName(quitarComillas(valorD.getValue()));
                                                break;
                                            case "grupo":
                                                tabla.setGrupo(quitarComillas(valorD.getValue()));                                    
                                                break;
                                            case "cadena":
                                                Texto nuevoTexto = new Texto();
                                                nuevoTexto.setText(quitarComillas(valorD.getValue()));
                                                nuevoTexto.setCadena(quitarComillas(valorD.getValue()));
                                                Elemento nuevoElemento = new Elemento();
                                                nuevoElemento.setTipo("texto");
                                                nuevoElemento.setValor(nuevoTexto);                                                        
                                                if(nuevoTexto.getText().length()!=0){listaCeldas.add(nuevoElemento);}                                                
                                                break; 
                                            case "ancho":                                                                        
                                                String numero = valorD.getValue();
                                                numero = numero.substring(1,numero.length()-1);
                                                if (esNumero(numero))
                                                {
                                                    tabla.setAncho(Integer.valueOf(numero));
                                                } 
                                                break;
                                            case "alto":            
                                                numero = valorD.getValue();
                                                numero = numero.substring(1,numero.length()-1);
                                                if (esNumero(numero))
                                                {
                                                    tabla.setAlto(Integer.valueOf(numero));
                                                }     
                                                break; 
                                            case "alineado":                                                                        
                                                switch(valorD.getValue())
                                                {
                                                    case "\"izquierda\"":
                                                        tabla.setAlineado("izquierda");
                                                        tabla.setAlignmentX(LEFT_ALIGNMENT);
                                                        break;
                                                    case "\"derecha\"":
                                                        tabla.setAlineado("derecha");
                                                        tabla.setAlignmentX(RIGHT_ALIGNMENT);
                                                        break;  
                                                    case "\"centrado\"":
                                                        tabla.setAlineado("centrado");
                                                        tabla.setAlignmentX(CENTER_ALIGNMENT);
                                                        break;   
                                                    default :
                                                        filasErrores.addRow(new String[]{"CHTML",String.valueOf(valorD.getLinea()),String.valueOf(valorD.getColumna()),
                                                            "Sintactico","Valor de alineacion incorrecto"});
                                                        break;                                          
                                                }
                                                break;  
                                            case "click":                                                                       
                                                tabla.setMetodo(valorD.getValue());
                                                break; 
                                            case "ruta":                                                                       
                                                tabla.setRuta(valorD.getValue());
                                                break;                                                                                                 
                                        }
                                        break;
                            /*-----------------------------------------/ELEMENTOS------------------------------------------*/                                                
                            /*-----------------------------------------BOTON------------------------------------------*/
                            case "BOTON":
                                System.out.println("---------------------------BOTON---------------------");                    
                                Boton boton = new Boton();                    
                                for(nodoChtml nodoBoton: elemento.getHijos())
                                {                        
                                    if(nodoBoton.getValue().equals("ELEMENTO"))
                                    {
                                        valorI = nodoBoton.getHijos().get(0);
                                        valorD = nodoBoton.getHijos().get(1);
                                        switch(valorI.getValue().toLowerCase())
                                        {
                                            case "ruta":
                                                boton.setRuta(valorD.getValue());                                    
                                                break;
                                            case "click":                                                                       
                                                boton.setMetodo(valorD.getValue());
                                                break;                                     
                                            case "id":
                                                boton.setId(valorD.getValue());                                    
                                                break;
                                            case "grupo":
                                                boton.setGrupo(valorD.getValue());                                    
                                                break;
                                            case "cadena":
                                                boton.setCadena(valorD.getValue());                                    
                                                boton.setText(boton.getCadena());
                                                break; 
                                            case "ancho":          
                                                String numero = valorD.getValue().substring(1,valorD.getValue().length()-1);
                                                if (esNumero(numero))
                                                {
                                                    boton.setAncho(Integer.valueOf(numero));
                                                }                                       
                                                break;
                                            case "alto":  
                                                numero = valorD.getValue().substring(1,valorD.getValue().length()-1);                                    
                                                if (esNumero(numero))
                                                {
                                                    boton.setAlto(Integer.valueOf(numero));
                                                }                                                                                                                                   
                                                break; 
                                            case "alineado":                                                                        
                                                switch(valorD.getValue())
                                                {
                                                    case "\"izquierda\"":
                                                        boton.setAlineado("izquierda");
                                                        boton.setAlignmentX(LEFT_ALIGNMENT);
                                                        break;
                                                    case "\"derecha\"":
                                                        boton.setAlineado("derecha");
                                                        boton.setAlignmentX(RIGHT_ALIGNMENT);
                                                        break;  
                                                    case "\"centrado\"":
                                                        boton.setAlineado("centrado");
                                                        boton.setAlignmentX(CENTER_ALIGNMENT);
                                                        break;   
                                                    default :
                                                        filasErrores.addRow(new String[]{"CHTML",String.valueOf(valorD.getLinea()),String.valueOf(valorD.getColumna()),
                                                            "Sintactico","Valor de alineacion incorrecto"});
                                                        break;                                          
                                                }
                                                break;                                     
                                        }
                                    }
                                } 
                                Elemento nuevoElemento = new Elemento();
                                nuevoElemento.setTipo("boton");
                                nuevoElemento.setValor(boton);
                                listaCeldas.add(nuevoElemento);
                                break;
                            /*-----------------------------------------/BOTON------------------------------------------*/
                            /*-----------------------------------------IMAGEN------------------------------------------*/                                        
                            case "IMAGEN":
                                System.out.println("---------------------------IMAGEN---------------------");
                                Imagen imagen = new Imagen();
                                imagen.setBackground(colorFondo);
                                for(nodoChtml nodoImagen: elemento.getHijos())
                                {                        
                                    if(nodoImagen.getValue().equals("ELEMENTO"))
                                    {
                                        valorI = nodoImagen.getHijos().get(0);
                                        valorD = nodoImagen.getHijos().get(1);                                        
                                        switch(valorI.getValue().toLowerCase())
                                        {                                                                 
                                            case "id":
                                                imagen.setName(quitarComillas(valorD.getValue()));
                                                break;
                                            case "grupo":
                                                imagen.setGrupo(quitarComillas(valorD.getValue()));                                    
                                                break;
                                            case "cadena":
                                                imagen.setCadena(quitarComillas(valorD.getValue()));                                    
                                                imagen.setText(imagen.getCadena());                                    
                                                break; 
                                            case "ancho":                                                                        
                                                String numero = valorD.getValue();
                                                numero = numero.substring(1,numero.length()-1);
                                                if (esNumero(numero))
                                                {
                                                    imagen.setAncho(Integer.valueOf(numero));
                                                } 
                                                break;
                                            case "alto":            
                                                numero = valorD.getValue();
                                                numero = numero.substring(1,numero.length()-1);
                                                if (esNumero(numero))
                                                {
                                                    imagen.setAlto(Integer.valueOf(numero));
                                                }     
                                                break; 
                                            case "alineado":                                                                        
                                                switch(valorD.getValue())
                                                {
                                                    case "\"izquierda\"":
                                                        imagen.setAlineado("izquierda");
                                                        imagen.setAlignmentX(LEFT_ALIGNMENT);
                                                        break;
                                                    case "\"derecha\"":
                                                        imagen.setAlineado("derecha");
                                                        imagen.setAlignmentX(RIGHT_ALIGNMENT);
                                                        break;  
                                                    case "\"centrado\"":
                                                        imagen.setAlineado("centrado");
                                                        imagen.setAlignmentX(CENTER_ALIGNMENT);
                                                        break;   
                                                    default :
                                                        filasErrores.addRow(new String[]{"CHTML",String.valueOf(valorD.getLinea()),String.valueOf(valorD.getColumna()),
                                                            "Sintactico","Valor de alineacion incorrecto"});
                                                        break;                                          
                                                }
                                                break;  
                                            case "click":                                                                       
                                                imagen.setMetodo(valorD.getValue());
                                                break; 
                                            case "ruta":                                                                       
                                                imagen.setRuta(valorD.getValue());
                                                break;                                    
                                        }
                                    }
                                }                    
                                nuevoElemento = new Elemento(imagen.getId(),"imagen",imagen);    
                                listaCeldas.add(nuevoElemento);    
                                break;
                            /*-----------------------------------------/IMAGEN------------------------------------------*/                                         
                            }
                        }                                                                                                                                    
                    }
                    Elemento nuevoElemento = new Elemento ("nuevaLinea","nuevaLinea", new String(""));
                    listaCeldas.add(nuevoElemento);
                        /*Aquí agregamos la fila*/
                    /*    Object[] arrayFila = new Object[listaCeldas.size()];
                        dataTablaFila.setColumnCount(listaCeldas.size());
                        int contador= 0;
                        for(Elemento auxElemento: listaCeldas)
                        {
                            //elementos.add(auxElemento);
                            switch(auxElemento.getTipo())
                            {
                                
                                case "texto":
                                    Texto nuevoTexto = (Texto)auxElemento.getValor();
                                    nuevoTexto.setText(nuevoTexto.getCadena());
                                    nuevoTexto.setPreferredSize(new java.awt.Dimension(nuevoTexto.getText().length()*4,20));
                                    if(nuevoTexto.getAncho()!=0 && nuevoTexto.getAlto()!=0)
                                    {
                                        nuevoTexto.setPreferredSize(new java.awt.Dimension(nuevoTexto.getAncho(),nuevoTexto.getAlto()));
                                    }                                    
                                    arrayFila[contador] = nuevoTexto;                                    
                                    //tabla.add(nuevoTexto);
                                    break;
                                case "boton":
                                    Boton nuevoBoton = (Boton)auxElemento.getValor();
                                    nuevoBoton.setPreferredSize(new java.awt.Dimension(nuevoBoton.getAncho(),nuevoBoton.getAlto()));
                                    arrayFila[contador] = nuevoBoton;
                                    //tabla.add(nuevoBoton);
                                    break;  
                                case "imagen":                                  
                                    Imagen imagen =(Imagen)auxElemento.getValor();
                                    imagen.setBounds(posXAux, posYAux, imagen.getAncho(),imagen.getAlto());
                                    ImageIcon icono = new ImageIcon(); 
                                    if(imagen.getRuta()!=null )
                                    {
                                        if(!imagen.getRuta().equals(""))
                                        {
                                            icono =   new ImageIcon(imagen.getRuta().substring(1,imagen.getRuta().length()-1));
                                        }   
                                        if(!imagen.getRuta().substring(0,1).equals("\""))
                                        {
                                            icono = new ImageIcon(imagen.getRuta());
                                        }  
                                        ImageIcon iconoEscala = new ImageIcon(icono.getImage().getScaledInstance(imagen.getAncho(), imagen.getAlto(), java.awt.Image.SCALE_DEFAULT));                
                                        imagen.setIcon(iconoEscala);                     

                                    }                                                       
                                    imagen.setPreferredSize(new java.awt.Dimension(imagen.getAncho(),imagen.getAlto()));
                                    arrayFila[contador] = imagen;
                                    //tabla.add(imagen);
                                    break;                                                                           
                            }
                        }
                        dataTablaFila.addRow(arrayFila);                        
                        //dataTablaFila.addRow(new Object[] {"Nombre", "Apellido"});       
                    */
                    break;                           
           }
       }              
              
       tabla.setElementos(listaCeldas);
       return tabla;       
   }
   
   
   /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
   public Panel generarPanel(nodoChtml raiz)
   {             
       ArrayList<Elemento> elementosPanel = new ArrayList();
       Panel panelNuevo = new Panel();
        if(raiz!=null)
        {
          for(nodoChtml hijo : raiz.getHijos())
          {                                      
            switch(hijo.getValue())
            {               
                case "CONTENIDO":
                    for(nodoChtml nieto: hijo.getHijos())
                    {
                       switch(nieto.getValue())
                       {
                                    case "SALTO":                                   
                                    Elemento salto = new Elemento();
                                    salto.setNombre("salto");
                                    salto.setTipo("salto");
                                    elementosPanel.add(salto);
                                    break;                                                                                    
                                    case "ENLACE":
                                        System.out.println("---------------------------ENLACE---------------------");                    
                                        Enlace enlace = new Enlace();
                                        enlace.setBackground(colorFondo);
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {
                                                    case "ruta":
                                                        enlace.setRuta(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "id":
                                                        enlace.setId(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "grupo":
                                                        enlace.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "cadena":
                                                        enlace.setCadena(aux.getHijos().get(1).getValue());                                    
                                                        enlace.setText(enlace.getCadena());
                                                        break; 
                                                    case "ancho":                                                                        
                                                        if (esNumero(aux.getHijos().get(1).getValue()))
                                                        {
                                                            enlace.setAncho(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                                        }                                       
                                                        break;
                                                    case "alto":                                                                        
                                                        if (esNumero(aux.getHijos().get(1).getValue()))
                                                        {
                                                            enlace.setAlto(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                enlace.setAlineado("izquierda");
                                                                enlace.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                enlace.setAlineado("derecha");
                                                                enlace.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                enlace.setAlineado("centrado");
                                                                enlace.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        System.out.println("------------ALINEACION: \t"+enlace.getAlineado());
                                                        break;                                     
                                                }
                                            }
                                        }
                                        /*

                                        */                    
                                        Elemento elemento = new Elemento(enlace.getId(),"enlace",enlace);
                                        elementosPanel.add(elemento);                                     
                                        break;

                                    case "BOTON":
                                        System.out.println("---------------------------BOTON---------------------");                    
                                        Boton boton = new Boton();                    
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {
                                                    case "ruta":
                                                        boton.setRuta(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "click":                                                                       
                                                        boton.setMetodo(aux.getHijos().get(1).getValue());
                                                        break;                                     
                                                    case "id":
                                                        boton.setId(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "grupo":
                                                        boton.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "cadena":
                                                        boton.setCadena(aux.getHijos().get(1).getValue());                                    
                                                        boton.setText(boton.getCadena());
                                                        break; 
                                                    case "ancho":          
                                                        String numero = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        if (esNumero(numero))
                                                        {
                                                            boton.setAncho(Integer.valueOf(numero));
                                                        }                                       
                                                        break;
                                                    case "alto":  
                                                        numero = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);                                    
                                                        if (esNumero(numero))
                                                        {
                                                            boton.setAlto(Integer.valueOf(numero));
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                boton.setAlineado("izquierda");
                                                                boton.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                boton.setAlineado("derecha");
                                                                boton.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                boton.setAlineado("centrado");
                                                                boton.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        break;                                     
                                                }
                                            }
                                        }      
                                        elemento = new Elemento(boton.getId(),"boton",boton);
                                        elementosPanel.add(elemento);                                     
                                        break;                    


                                    case "SPINNER":
                                        System.out.println("---------------------------SPINNER---------------------");                    
                                        Spinner spinner = new Spinner();
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {
                                                    case "ruta":
                                                        spinner.setRuta(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "click":                                                                       
                                                        spinner.setMetodo(aux.getHijos().get(1).getValue());
                                                        break;                                     
                                                    case "id":
                                                        spinner.setId(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "grupo":
                                                        spinner.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "entero":
                                                        spinner.setCadena(aux.getHijos().get(1).getValue());                                                                        
                                                        break; 
                                                    case "ancho":                                                                        
                                                        if (esNumero(aux.getHijos().get(1).getValue()))
                                                        {
                                                            spinner.setAncho(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                                        }                                       
                                                        break;
                                                    case "alto":                                                                        
                                                        if (esNumero(aux.getHijos().get(1).getValue()))
                                                        {
                                                            spinner.setAlto(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                spinner.setAlineado("izquierda");
                                                                spinner.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                spinner.setAlineado("derecha");
                                                                spinner.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                spinner.setAlineado("centrado");
                                                                spinner.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        System.out.println("------------ALINEACION: \t"+spinner.getAlineado());
                                                        break;                                     
                                                }
                                            }
                                        }                   
                                        elemento = new Elemento(spinner.getId(),"spinner",spinner);
                                        elementosPanel.add(elemento);                                     
                                        break;                    

                                    case "TEXTO":
                                        System.out.println("---------------------------TEXTO---------------------");
                                        //Vemos todos los elementosPanel :v
                                        Texto texto = new Texto();
                                        //texto.setBackground(colorFondo);
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {                                                                 
                                                    case "id":
                                                        texto.setName(aux.getHijos().get(1).getValue());
                                                        break;
                                                    case "grupo":
                                                        texto.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "cadena":
                                                        texto.setCadena(aux.getHijos().get(1).getValue());                                    
                                                        texto.setText(texto.getCadena());
                                                        //texto.setAlto(texto.cadena.length());
                                                        break; 
                                                    case "ancho":                                                                        
                                                        String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println(aux.getHijos().get(1).getValue()+"  ANCHO ---- "+ancho);
                                                        if (esNumero(ancho))
                                                        {
                                                            System.out.println("--Valor válido--");
                                                            texto.setAncho(Integer.valueOf(ancho));
                                                        }                                       
                                                        break;
                                                    case "alto":                                                                        
                                                        String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println(aux.getHijos().get(1).getValue()+"  ALTO ---- "+alto);
                                                        if (esNumero(alto))
                                                        {
                                                            System.out.println("--Valor válido--");
                                                            texto.setAlto(Integer.valueOf(alto));
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                texto.setAlineado("izquierda");
                                                                texto.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                texto.setAlineado("derecha");
                                                                texto.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                texto.setAlineado("centrado");
                                                                texto.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        System.out.println("------------ALINEACION: \t"+texto.getAlineado());
                                                        break;                                     
                                                }
                                            }
                                        }                    
                                        elemento = new Elemento(texto.getId(),"texto",texto);    
                                        elementosPanel.add(elemento);
                                        break;  
                    /*Caja area de texto*/                   
                                    case "TEXTOA":
                                        System.out.println("---------------------------TEXTOA---------------------");
                                        //Vemos todos los elementosPanel :v
                                        areaTexto area = new areaTexto();
                                        area.setBackground(Color.white);
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {                                                                 
                                                    case "id":
                                                        area.setName(aux.getHijos().get(1).getValue());
                                                        break;
                                                    case "grupo":
                                                        area.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "cadena":
                                                        area.setCadena(aux.getHijos().get(1).getValue());                                    
                                                        area.setText(area.getCadena());
                                                        //texto.setAlto(texto.cadena.length());
                                                        break; 
                                                    case "ancho":     
                                                        String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println("ANCHO ---- "+ancho);
                                                        if (esNumero(ancho))
                                                        {
                                                            area.setAncho(Integer.valueOf(ancho));
                                                            area.setAncho(area.getAncho());
                                                            area.setSize(Integer.valueOf(ancho),area.getHeight());
                                                        }                                       
                                                        break;
                                                    case "alto": 
                                                        String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println("ALTO ---- "+alto);
                                                        if (esNumero(alto))
                                                        {
                                                            area.setAlto(Integer.valueOf(alto));
                                                            area.setAlto(area.getAlto());
                                                            area.setSize(area.getWidth(), Integer.valueOf(alto));
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                area.setAlineado("izquierda");
                                                                area.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                area.setAlineado("derecha");
                                                                area.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                area.setAlineado("centrado");
                                                                area.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        System.out.println("------------ALINEACION: \t"+area.getAlineado());
                                                        break;                                     
                                                }
                                            }
                                        }   
                                        area.setBorder(BorderFactory.createLineBorder(Color.black));
                                        elemento = new Elemento(area.getId(),"area",area);    
                                        elementosPanel.add(elemento);
                                        break;      

                    /*CAJA DE TEXTO SIN LINEAS*/  

                                    case "CAJATEXTO":
                                        System.out.println("---------------------------CAJATEXTO---------------------");
                                        //Vemos todos los elementosPanel :v
                                        Caja caja = new Caja();                    
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {                                                                 
                                                    case "id":
                                                        caja.setName(aux.getHijos().get(1).getValue());
                                                        break;
                                                    case "grupo":
                                                        caja.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "cadena":
                                                        caja.setCadena(aux.getHijos().get(1).getValue());                                    
                                                        caja.setText(caja.getCadena());
                                                        //texto.setAlto(texto.cadena.length());
                                                        break; 
                                                    case "ancho":     
                                                        String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println("ANCHO ---- "+ancho);
                                                        if (esNumero(ancho))
                                                        {
                                                            caja.setAncho(Integer.valueOf(ancho));
                                                            caja.setAncho(caja.getAncho());
                                                        }                                       
                                                        break;
                                                    case "alto": 
                                                        String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println("ALTO ---- "+alto);
                                                        if (esNumero(alto))
                                                        {
                                                            caja.setAlto(Integer.valueOf(alto));
                                                            caja.setAlto(caja.getAlto());
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                caja.setAlineado("izquierda");
                                                                caja.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                caja.setAlineado("derecha");
                                                                caja.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                caja.setAlineado("centrado");
                                                                caja.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        System.out.println("------------ALINEACION: \t"+caja.getAlineado());
                                                        break;                                     
                                                }
                                            }
                                        }   
                                        caja.setBorder(BorderFactory.createLineBorder(Color.black));
                                        elemento = new Elemento(caja.getId(),"caja",caja);    
                                        elementosPanel.add(elemento);
                                        break;  

                    /*----------------------------IMAGEN--------------------------------------*/                    
                                    case "IMAGEN":
                                        System.out.println("---------------------------IMAGEN---------------------");
                                        Imagen imagen = new Imagen();
                                        imagen.setBackground(colorFondo);
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {                                                                 
                                                    case "id":
                                                        imagen.setName(quitarComillas(aux.getHijos().get(1).getValue()));
                                                        break;
                                                    case "grupo":
                                                        imagen.setGrupo(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                                        break;
                                                    case "cadena":
                                                        imagen.setCadena(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                                        imagen.setText(imagen.getCadena());                                    
                                                        break; 
                                                    case "ancho":                                                                        
                                                        String numero = aux.getHijos().get(1).getValue();
                                                        numero = numero.substring(1,numero.length()-1);
                                                        if (esNumero(numero))
                                                        {
                                                            imagen.setAncho(Integer.valueOf(numero));
                                                        } 
                                                        break;
                                                    case "alto":            
                                                        numero = aux.getHijos().get(1).getValue();
                                                        numero = numero.substring(1,numero.length()-1);
                                                        if (esNumero(numero))
                                                        {
                                                            imagen.setAlto(Integer.valueOf(numero));
                                                        }     
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                imagen.setAlineado("izquierda");
                                                                imagen.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                imagen.setAlineado("derecha");
                                                                imagen.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                imagen.setAlineado("centrado");
                                                                imagen.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        break;  
                                                    case "click":                                                                       
                                                        imagen.setMetodo(aux.getHijos().get(1).getValue());
                                                        break; 
                                                    case "ruta":                                                                       
                                                        imagen.setRuta(aux.getHijos().get(1).getValue());
                                                        break;                                    
                                                }
                                            }
                                        }                    
                                        elemento = new Elemento(imagen.getId(),"imagen",imagen);    
                                        elementosPanel.add(elemento);
                                        break;                        


                    /*------------------------CAJA DE OPCIONES-----------------------*/                    
                                    case "CAJAOPCIONES":
                                        System.out.println("---------------------------IMAGEN---------------------");
                                        JComboBox cajaOpciones = new JComboBox();
                                        cajaOpciones.setBounds(posX, posY, 100, 20);
                                        int contadorOpciones = 0;
                                        for(nodoChtml aux: nieto.getHijos())
                                        {       
                                            System.out.println(aux.getValue());
                                            switch(aux.getValue().toLowerCase())
                                            {                                      
                                                /*------------OPCIONES----------*/                                        
                                                case "opcion":

                                                    String valor = "";                                
                                                    for(nodoChtml opcion: aux.getHijos())
                                                    {     
                                                        if(opcion.getValue().equals("ELEMENTO"))
                                                        {
                                                            nodoChtml izquierda = opcion.getHijos().get(0);
                                                            nodoChtml derecha = opcion.getHijos().get(1);
                                                            System.out.println(izquierda.getValue().toLowerCase()+"***********************************************"+derecha.getValue());
                                                            switch(izquierda.getValue().toLowerCase())
                                                            {
                                                                case "valor":                                                                                                                           
                                                                    valor = quitarComillas(derecha.getValue());
                                                                    break; 
                                                                case "cadena":                                                                       
                                                                    if(valor.equals(""))
                                                                    {
                                                                        valor = quitarComillas(derecha.getValue());
                                                                    }
                                                                    break;                                                
                                                            }                                                        
                                                        }
                                                    }
                                                    cajaOpciones.addItem(valor);
                                                    break;                                                                                                    
                                            }
                                            contadorOpciones++;
                                        }                    
                                        //elemento = new Elemento(cajaOpciones.getId(),"cajaOpciones",cajaOpciones);    
                                        elemento = new Elemento("cajaOpciones","cajaOpciones",cajaOpciones);    
                                        elementosPanel.add(elemento);
                                        break;                        


                                    case "PANEL":
                                        System.out.println("---------------------------PANEL---------------------");
                                        Panel panelNuevo_ = generarPanel(nieto);
                                        elemento = new Elemento("panel","panel",panelNuevo_); 
                                        elementosPanel.add(elemento);
                                        break;                                    
                                    case "TABLA":
                                        System.out.println("---------------------------TABLA---------------------");
                                        Tab tabla = generarTabla(nieto);
                                        elemento = new Elemento(tabla.getId(),"tabla",tabla);
                                        elementosPanel.add(elemento);                                     
                                        break;                            

                                           }
                                    }
                                break;
                                
                            case "ELEMENTO":
                                    System.out.println("---------------ELEMENTOS DE OBJETO DE PANEL----------------------");
                                    nodoChtml hijoI = hijo.getHijos().get(0);
                                    nodoChtml hijoD = hijo.getHijos().get(1);
                                    System.out.println(hijoI.getValue() +"--->" + hijoD.getValue());
                                    switch(hijoI.getValue().toLowerCase())
                                    {                                                                 
                                        case "id":
                                            panelNuevo.setName(hijoD.getValue());
                                            break;
                                        case "grupo":
                                            panelNuevo.setGrupo(hijoD.getValue());                                    
                                            break;
                                        case "cadena":
                                            panelNuevo.setCadena(hijoD.getValue());                                                                    
                                            //texto.setAlto(texto.cadena.length());
                                            break; 
                                        case "ancho":     
                                            String ancho = hijoD.getValue().substring(1,hijoD.getValue().length()-1);                                
                                            if (esNumero(ancho))
                                            {
                                                panelNuevo.setAncho(Integer.valueOf(ancho));     
                                                panelNuevo.setSize(panelNuevo.getAncho(), panelNuevo.getHeight());
                                            }                                       
                                            break;
                                        case "alto": 
                                            String alto =  hijoD.getValue().substring(1,hijoD.getValue().length()-1);                                
                                            if (esNumero(alto))
                                            {
                                                panelNuevo.setAlto(Integer.valueOf(alto));
                                                panelNuevo.setSize(panelNuevo.getWidth(), panelNuevo.getAlto());
                                            }                                                                                                                                   
                                            break; 
                                        case "alineado":                                                                        
                                            switch(hijoD.getValue())
                                            {
                                                case "\"izquierda\"":
                                                    panelNuevo.setAlineado("izquierda");
                                                    panelNuevo.setAlignmentX(LEFT_ALIGNMENT);
                                                    break;
                                                case "\"derecha\"":
                                                    panelNuevo.setAlineado("derecha");
                                                    panelNuevo.setAlignmentX(RIGHT_ALIGNMENT);
                                                    break;  
                                                case "\"centrado\"":
                                                    panelNuevo.setAlineado("centrado");
                                                    panelNuevo.setAlignmentX(CENTER_ALIGNMENT);
                                                    break;   
                                                default :
                                                    filasErrores.addRow(new String[]{"CHTML",String.valueOf(hijoD.getLinea()),String.valueOf(hijoD.getColumna()),
                                                        "Sintactico","Valor de alineacion incorrecto"});
                                                    break;                                          
                                            }                                
                                            break;                                     
                        }                    
                break;                      
                }                         
            }
        }
        panelNuevo.setElementos(elementosPanel);
        //dibujarPanel(panelNuevo);
        return panelNuevo;
   }
   

    
public void dibujarPanel(Panel contenedor)
{    
    posXAux = posYAux = xMaxAux = yMaxAux = 0;
    ArrayList<Elemento> lista = contenedor.getElementos();
    for(Elemento aux: lista)
    {
        switch(aux.getTipo())
        {
            case "boton":
                Boton boton =(Boton)aux.getValor();                
                boton.setBounds(posXAux, posYAux, boton.getAncho(),boton.getAlto());                  
                posicionesPanel(boton.getAncho(), boton.getAlto(), contenedor);         
                contenedor.add(boton);
                break;
            case "enlace":
                Enlace enlace =(Enlace)aux.getValor();                
                enlace.setBounds(posXAux, posYAux, enlace.getAncho(),enlace.getAlto());                
                posicionesPanel(enlace.getAncho(), enlace.getAlto(), contenedor);        
                contenedor.add(enlace);
                break; 
            case "salto":
                System.out.println("Salto de línea dentro del panel");
                if(yMaxAux == 0)
                {
                    yMaxAux = 15;
                }
                JLabel label = new JLabel();
                label.setBackground(contenedor.getBackground());
                //label.setSize(yMaxAux, contenedor.getWidth()-xMaxAux-50);
                label.setSize(contenedor.getWidth()-xMaxAux-50,yMaxAux);
                for(int contador = 0 ; contador<contenedor.getWidth()-xMaxAux-50;contador++){label.setText(label.getText() + " ");}
                //label.setBorder(BorderFactory.createLineBorder(Color.BLUE));
                posicionesPanel(label.getWidth(), label.getHeight(), contenedor);  
                
                
                
                //contenedor.add(label);                
                break;                 
            case "spinner":
                Spinner spinner =(Spinner)aux.getValor();
                spinner.setBounds(posXAux, posYAux, spinner.getAncho(),spinner.getAlto());
                if(esNumero(spinner.getCadena()))
                {
                    spinner.setValue(Integer.valueOf(spinner.getCadena()));
                }                
                posicionesPanel(spinner.getAncho(), spinner.getAlto(), contenedor);                
                contenedor.add(spinner);
                break;                
            case "cajaOpciones":
                JComboBox opciones =(JComboBox)aux.getValor();
                opciones.setBounds(posXAux, posYAux, opciones.getWidth(), opciones.getHeight());                
                posicionesPanel(opciones.getWidth(), opciones.getHeight(), contenedor);                
                contenedor.add(opciones);
                break;                
            case "imagen":
                Imagen imagen =(Imagen)aux.getValor();
                imagen.setBounds(posXAux, posYAux, imagen.getAncho(),imagen.getAlto());
                ImageIcon icono = new ImageIcon(); 
                if(imagen.getRuta()!=null )
                {
                    if(!imagen.getRuta().equals(""))
                    {
                        icono =   new ImageIcon(imagen.getRuta().substring(1,imagen.getRuta().length()-1));
                    }   
                    if(!imagen.getRuta().substring(0,1).equals("\""))
                    {
                        icono = new ImageIcon(imagen.getRuta());
                    }  
                    ImageIcon iconoEscala = new ImageIcon(icono.getImage().getScaledInstance(imagen.getAncho(), imagen.getAlto(), java.awt.Image.SCALE_DEFAULT));                
                    imagen.setIcon(iconoEscala);                                         
                }                                                       
                posicionesPanel(imagen.getAncho(), imagen.getAlto(), contenedor);                
                contenedor.add(imagen);       
                break;                  
            case "texto":
                Texto texto =(Texto)aux.getValor();
                if(texto.getAlto()==0 && texto.getAncho()==0)
                {
                    
                    String[] auxiliar = texto.getCadena().split("\r");
                    int alto= auxiliar.length*20;
                    System.out.println("El texto no tiene dimensiones definidas");
                    System.out.println("\t"+texto.getCadena());
                    System.out.println("\tNo. líneas \t"+alto);
                    int ancho = 0;
                    for(String cad : auxiliar)
                    {
                        if(cad.length()>ancho){ancho=cad.length();}
                        System.out.println("\tNo. caracteres \t"+ancho);
                    }
                    texto.setText(texto.getText());   
                    texto.setAlto(alto);
                    texto.setAncho(ancho*7);                    
                }
                texto.setBounds(posXAux, posYAux, texto.getAncho(),texto.getAlto());
                posicionesPanel(texto.getAncho(), texto.getAlto(), contenedor);                
                contenedor.add(texto);                
                break;  
                
            case "caja":
                Caja caja =(Caja)aux.getValor();
                if(caja.getAlto()==0 && caja.getAncho()==0)
                {
                    String[] auxiliar = caja.getCadena().split("\r");
                    int alto = auxiliar.length;
                    int ancho = 0;
                    String valorCaja= "";
                    for(String cad : auxiliar)
                    {
                        valorCaja = valorCaja + cad;                        
                        ancho = ancho + cad.length();
                    }                    
                    caja.setText(valorCaja);   
                    caja.setAlto(20);
                    caja.setAncho(ancho*7);
                }
                caja.setBounds(posXAux, posYAux, caja.getAncho(),caja.getAlto());
                posicionesPanel(caja.getAncho(), caja.getAlto(), contenedor);                
                contenedor.add(caja);                
                break;                  
                
            case "area":
                areaTexto area =(areaTexto)aux.getValor();
                //area.setBounds(posX, posY, area.getAncho(),area.getAlto());                                
                JScrollPane nuevo = new JScrollPane(area);
                nuevo.setBounds(posXAux, posYAux, area.getWidth(),area.getHeight());
                posicionesPanel(area.getWidth(), area.getHeight(),contenedor); 
                contenedor.add(nuevo);                
                break;                 
                
            case "tabla":
                Tabla tabla =(Tabla)aux.getValor();
                tabla.setBounds(posXAux, posYAux, tabla.getAncho(),tabla.getAlto());                
                posicionesPanel(tabla.getAncho(), tabla.getAlto(), contenedor);       
                contenedor.add(tabla);
                break;     
                
            case "panel":
                Panel panel =(Panel)aux.getValor();
                //panel.setBackground(Color.black);
                if(panel.getWidth()==0){ panel.setSize(contenedor.getWidth(), panel.getHeight());}
                if(panel.getHeight()==0){panel.setSize(panel.getWidth(),100);}
                if(panel.getWidth()==0 && panel.getHeight() ==0){panel.setSize(contenedor.getWidth(),100);}                
                panel.setBorder(BorderFactory.createLineBorder(Color.black));
                panel.setSize(panel.getAncho(), panel.getAlto());
                panel.setBounds(posXAux, posYAux, panel.getAncho(),panel.getAlto());                
                posicionesPanel( panel.getAncho(),panel.getAlto(), contenedor);       
                contenedor.add(panel);
                break;                  
        }
    }
    this.repaint();
    
}  


public void posicionesPanel(int ancho, int alto, Panel contenedor)
{   
    int limite = contenedor.getAncho(); 
    if(alto>yMaxAux){yMaxAux = alto;}    
    if((posXAux + ancho)>= limite-ancho)        
    {
        posXAux = 0;
        posYAux = posYAux + yMaxAux;            
        yMaxAux= 0;              
    }
    else
    {
        posXAux = posXAux + ancho;
    }

}


public int[] posicionPanel(int ancho, int alto, Panel contenedor , int saltoY, int x, int y)
{   
    int valores[] = new int[5];
    int limite = contenedor.getAncho(); 
    if(alto>saltoY){saltoY = alto;}    
    if(limite>0)
    {
        if((x + ancho)>= limite-ancho)        
        {
            x = contenedor.getInicio();
            y = y + saltoY;            
            saltoY= 0;              
        }
        else
        {
            x = x + ancho;
        }        
    }
    else
    {
        x = x + ancho;            
    }
    
    valores[0]= x;
    valores[1]= y;
    valores[2]= saltoY;       
    return valores;

}


public void posicionTabla(int ancho, int alto, Tab contenedor , int saltoY, int x, int y, int xMax, int yMax)
{   
    int limite = contenedor.getAncho(); 
    if(alto>saltoY){saltoY = alto;}    
    if(limite>0)
    {
        if((x + ancho)>= limite-ancho)        
        {
            x = 0;
            y = y + saltoY;            
            saltoY= 0;              
        }
        else
        {
            x = x + ancho;
        }        
    }
    else
    {
        x = x + ancho;            
    }

}

public static void Mensaje(String mensaje, String titulo)
{
    JOptionPane.showMessageDialog(contenedorPaginas, mensaje, titulo, HEIGHT);
}
   
public void calcularTamaño(Panel contenedor)
{   
    if(contenedor.getAlto()==0 || contenedor.getAncho()==0)
    {
        int x = 0;
        int y = 0;
        int saltoY = 0;
        int saltoX = 0;
        int anchoMaximo = 0;
        int altoMaximo = 0;
        ArrayList<Elemento> elementosContenedor = contenedor.getElementos(); 
        Elemento finalAuxiliar = null;
        for(Elemento aux: elementosContenedor)
        {
            finalAuxiliar = aux;
            switch(aux.getTipo())
            {
                case "boton":
                    Boton boton =(Boton)aux.getValor();                
                    x+= boton.getAncho();
                    if(anchoMaximo<x){anchoMaximo=x;}
                    if(altoMaximo<boton.getAlto()){ altoMaximo = boton.getAlto();}
                    break;
                case "enlace":
                    Enlace enlace =(Enlace)aux.getValor();
                    if(enlace.getAlto()==0 && enlace.getAncho()==0)
                    {
                        String[] auxiliar = enlace.getCadena().split("\r");
                        int alto= auxiliar.length;
                        System.out.println("El texto no tiene dimensiones definidas");
                        System.out.println("\t"+enlace.getCadena());
                        System.out.println("\tNo. líneas \t"+alto);
                        int ancho = 0;
                        for(String cad : auxiliar)
                        {
                            if(cad.length()>ancho){ancho=cad.length();}
                            System.out.println("\tNo. caracteres \t"+ancho);
                        }
                        enlace.setText(enlace.getText());   
                        enlace.setAlto(alto*25);
                        enlace.setAncho(ancho*alto*8);                    
                    }
                    enlace.setPreferredSize(new java.awt.Dimension(enlace.getAncho(),enlace.getAlto()));
                    enlace.setBounds(x, y, enlace.getAncho(),enlace.getAlto());                
                    x+= enlace.getAncho();
                    if(anchoMaximo<x){anchoMaximo=x;}
                    if(altoMaximo<enlace.getAlto()){ altoMaximo = enlace.getAlto();} 
                    break; 
                case "salto":
                    if(altoMaximo == 0)
                    {
                        altoMaximo = 10;
                    } 
                    y = y + altoMaximo;                
                    altoMaximo=0;
                    x=0;                
                    break;                 
                case "spinner":
                    Spinner spinner =(Spinner)aux.getValor();
                    x+= spinner.getAncho();
                    if(anchoMaximo<x){anchoMaximo=x;}
                    if(altoMaximo<spinner.getAlto()){ altoMaximo = spinner.getAlto();}                               
                    break;                
                case "cajaOpciones":
                    JComboBox opciones =(JComboBox)aux.getValor();
                    x+= opciones.getWidth();
                    if(anchoMaximo<x){anchoMaximo=x;}
                    if(altoMaximo<25){ altoMaximo = 25;}                                      
                    break;                
                case "imagen":
                    Imagen imagen =(Imagen)aux.getValor();
                    imagen.setBounds(x, y, imagen.getAncho(),imagen.getAlto());
                    ImageIcon icono = new ImageIcon(); 
                    if(imagen.getRuta()!=null )
                    {
                        if(!imagen.getRuta().equals(""))
                        {
                            icono =   new ImageIcon(imagen.getRuta().substring(1,imagen.getRuta().length()-1));
                        }   
                        if(!imagen.getRuta().substring(0,1).equals("\""))
                        {
                            icono = new ImageIcon(imagen.getRuta());
                        }  
                        ImageIcon iconoEscala = new ImageIcon(icono.getImage().getScaledInstance(imagen.getAncho(), imagen.getAlto(), java.awt.Image.SCALE_DEFAULT));                
                        imagen.setIcon(iconoEscala);                     

                    }                                   
                    x+= imagen.getAncho();
                    if(anchoMaximo<x){anchoMaximo=x;}
                    if(altoMaximo<imagen.getAlto()){ altoMaximo = imagen.getAlto();}    
                    break;                  
                case "texto":
                    Texto texto =(Texto)aux.getValor();
                    if(texto.getAlto()==0 && texto.getAncho()==0)
                    {                        
                        String[] auxiliar = texto.getCadena().split("\t");
                        int alto= auxiliar.length;
                        System.out.println("El texto no tiene dimensiones definidas");
                        System.out.println("\t"+texto.getCadena());
                        System.out.println("\tNo. líneas \t"+alto);
                        int ancho = 0;
                        for(String cad : auxiliar)
                        {
                            if(cad.length()>ancho){ancho=cad.length();}
                            System.out.println("\tNo. caracteres \t"+ancho);
                        }
                        texto.setText(texto.getText());   
                        texto.setAlto(alto*25);
                        texto.setAncho(ancho*8);                    
                    }
                    texto.setPreferredSize(new java.awt.Dimension(texto.getAncho(),texto.getAlto()));
                    texto.setBounds(x, y, texto.getAncho(),texto.getAlto());                
                    x+= texto.getAncho();
                    if(anchoMaximo<x){anchoMaximo=x;}
                    if(altoMaximo<=texto.getAlto()){ altoMaximo = texto.getAlto();}     
                    break;
                case "caja":
                    Caja caja =(Caja)aux.getValor();
                    if(caja.getAlto()==0 && caja.getAncho()==0)
                    {
                        String[] auxiliar = caja.getCadena().split("\r");
                        int alto = auxiliar.length;
                        int ancho = 0;
                        String valorCaja= "";
                        for(String cad : auxiliar)
                        {
                            valorCaja = valorCaja + cad;                        
                            ancho = ancho + cad.length();
                        }                    
                        caja.setText(valorCaja);   
                        caja.setAlto(20*alto);
                        caja.setAncho(ancho*7);
                    }
                    x+= caja.getAncho();
                    if(anchoMaximo<x){anchoMaximo=x;}
                    if(altoMaximo<caja.getAlto()){ altoMaximo = caja.getAlto();}               
                    break;                  

                case "area":
                    areaTexto area =(areaTexto)aux.getValor();
                    x+= area.getAncho();
                    if(anchoMaximo<x){anchoMaximo=x;}
                    if(altoMaximo<area.getAlto()){ altoMaximo = area.getAlto();}                  
                    break;                 

                case "tabla":
                    Tab tabla =(Tab)aux.getValor();                               
                    x+= tabla.getAncho();
                    if(anchoMaximo<x){anchoMaximo=x;}
                    if(altoMaximo<tabla.getAlto()){ altoMaximo = tabla.getAlto();} 
                    break;     

                case "panel":
                    Panel panel =(Panel)aux.getValor();                
                    contenedor.setFlagPanel(true);
                    Interfaz(panel);                                  
                    x+= panel.getAncho();
                    y+= panel.getAlto();
                    if(anchoMaximo<x){anchoMaximo=x;}
                    if(altoMaximo<panel.getAlto()){ altoMaximo = panel.getAlto();} 
                    break;                  
            }        
        }   

        
        if(altoMaximo!=0)
        {
            contenedor.setAncho(anchoMaximo+50);
            contenedor.setAlto(y+altoMaximo+50);            
        }
        else
        {
            contenedor.setAncho(anchoMaximo+50);
            contenedor.setAlto(y+50);             
        }                
    }
    else
    {
        for(Elemento elemento : contenedor.getElementos())
        {
            if(elemento.getTipo().equals("panel"))
            {
                contenedor.setFlagPanel(true);
                break;
            }
        }
    }        
}

public void Interfaz(Panel contenedor) // Este metodo genera un panel con todos los elementos.
{           
    int val[] = new int[3];
    int x = 10;
    int y = 5;
    int saltoY = 0;
    int saltoX = 0;
    int anchoMaximo = 0;
    int altoMaximo = 0;
    ArrayList<Elemento> elementosContenedor = contenedor.getElementos();    
    scroll.removeAll();
    
    /*Verificamos el tipo de alineacion
    Por defecto es izquierda
    */
    if(contenedor.getAncho()!=0)
    {
        Panel auxiliar = new Panel();
        auxiliar.setElementos(contenedor.getElementos());
        calcularTamaño(auxiliar);
        if(!contenedor.getAlineado().equals(""))
        {
            if(quitarComillas(contenedor.getAlineado()).toLowerCase().equals("izquierda"))
            {
                x = 10;
            }                
            if(quitarComillas(contenedor.getAlineado()).toLowerCase().equals("derecha"))
            {
                x = contenedor.getAncho() - auxiliar.getAncho()-50;
            }
            if(quitarComillas(contenedor.getAlineado()).toLowerCase().equals("centrado"))
            {        
                x = (contenedor.getAncho() - auxiliar.getAncho()-50)/2;
            }            
        }
        contenedor.setInicio(x);            
    }      
    
    calcularTamaño(contenedor);
    //contenedor.setLayout(null);
    //contenedor.setLayout(null);/*Verificar*/
    if(!contenedor.isFlagPanel())
    {
        contenedor.setLayout(null);
    }           
    else
    {
        //contenedor.setAncho(contenedor.getAncho()/2);
        contenedor.setAlto(contenedor.getAlto()/2);    
    }
    for(Elemento aux: elementosContenedor)
    {
        switch(aux.getTipo())
        {
            case "boton":
                Boton boton =(Boton)aux.getValor();                
                boton.setPreferredSize(new java.awt.Dimension(boton.getAncho(),boton.getAlto()));                  
                boton.setBounds(x, y, boton.getAncho(),boton.getAlto()); 
                boton.removeMouseListener(mouseListener);
                boton.addMouseListener(mouseListener);     
                //System.out.println("Objeto insertado "+aux.getTipo()+" \tx: " +x + "\ty: "+ y);
                contenedor.add(boton);          
                val = posicionPanel(boton.getAncho(), boton.getAlto(),  contenedor, saltoY, x, y); 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                
                break;
            case "enlace":
                Enlace enlace =(Enlace)aux.getValor();
                enlace.removeMouseListener(listenerEnlace);
                enlace.addMouseListener(listenerEnlace);                
                if(enlace.getAlto()==0 && enlace.getAncho()==0)
                {
                    
                    String[] auxiliar = enlace.getCadena().split("\r");
                    int alto= auxiliar.length;
                    System.out.println("El texto no tiene dimensiones definidas");
                    System.out.println("\t"+enlace.getCadena());
                    System.out.println("\tNo. líneas \t"+alto);
                    int ancho = 0;
                    for(String cad : auxiliar)
                    {
                        if(cad.length()>ancho){ancho=cad.length();}
                        System.out.println("\tNo. caracteres \t"+ancho);
                    }
                    enlace.setText(enlace.getText());   
                    enlace.setAlto(alto*20);
                    enlace.setAncho(ancho*8);                    
                }                                                                
                enlace.setPreferredSize(new java.awt.Dimension(enlace.getAncho(),enlace.getAlto()));
                enlace.setBounds(x, y, enlace.getAncho(),enlace.getAlto());                                                    
                contenedor.add(enlace);
                //System.out.println("Objeto insertado "+aux.getTipo()+" x: " +x + "\ty: "+ y);
                val = posicionPanel(enlace.getAncho(), enlace.getAlto(),  contenedor, saltoY, x, y); 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                
                break; 
            case "salto":                
                if(saltoY == 0)
                {
                    saltoY = 5;
                }                
                //y = y + saltoY;
                Texto espacio = new Texto();
                //espacio.setBackground(Color.black);
                espacio.setBackground(contenedor.getBackground());
                espacio.setEnabled(false);
                espacio.setAncho(contenedor.getAncho()-x-30);                
                espacio.setAlto(saltoY); 
                
                for(int cont=0; cont<espacio.getAncho();cont++){espacio.setText(espacio.getText() +" ");}                
                if(contenedor.isFlagPanel())
                {
                    espacio.setPreferredSize(new java.awt.Dimension(espacio.getAncho(),espacio.getAlto() ));
                    contenedor.add(espacio); 
                    contenedor.setAlto(contenedor.getAlto()+espacio.getAlto());
                    contenedor.setPreferredSize(new java.awt.Dimension(contenedor.getAncho(), contenedor.getAlto()+espacio.getAlto() ));
                }                
                val = posicionPanel(espacio.getAncho(), espacio.getAlto(),  contenedor, saltoY, x, y);                 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                 
                break;                 
            case "spinner":
                Spinner spinner =(Spinner)aux.getValor();
                spinner.setBounds(x, y, spinner.getAncho(),spinner.getAlto());
                if(esNumero(spinner.getCadena()))
                {
                    spinner.setValue(Integer.valueOf(spinner.getCadena()));
                }    
                spinner.setPreferredSize(new java.awt.Dimension(spinner.getAncho(),spinner.getAlto()));             
                contenedor.add(spinner);
                //System.out.println("Objeto insertado\t"+aux.getTipo()+" \tx: " +x + "\ty: "+ y);
                val = posicionPanel(spinner.getAncho(), spinner.getAlto(),  contenedor, saltoY, x, y); 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                 
                break;                
            case "cajaOpciones":
                JComboBox opciones =(JComboBox)aux.getValor();
                opciones.setBounds(x, y, opciones.getWidth(), opciones.getHeight());    
                opciones.setPreferredSize(new java.awt.Dimension(opciones.getWidth(),opciones.getHeight()));                              
                contenedor.add(opciones);
                //System.out.println("Objeto insertado\t"+aux.getTipo()+" \tx: " +x + "\ty: "+ y);
                val = posicionPanel(opciones.getWidth(), opciones.getHeight(),  contenedor, saltoY, x, y); 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                  
                break;                
            case "imagen":
                Imagen imagen =(Imagen)aux.getValor();
                imagen.setBounds(x, y, imagen.getAncho(),imagen.getAlto());
                ImageIcon icono = new ImageIcon(); 
                if(imagen.getRuta()!=null )
                {
                    if(!imagen.getRuta().equals(""))
                    {
                        icono =   new ImageIcon(imagen.getRuta().substring(1,imagen.getRuta().length()-1));
                    }   
                    if(!imagen.getRuta().substring(0,1).equals("\""))
                    {
                        icono = new ImageIcon(imagen.getRuta());
                    }  
                    ImageIcon iconoEscala = new ImageIcon(icono.getImage().getScaledInstance(imagen.getAncho(), imagen.getAlto(), java.awt.Image.SCALE_DEFAULT));                
                    imagen.setIcon(iconoEscala);                     
                    
                }                    
                imagen.setPreferredSize(new java.awt.Dimension(imagen.getAncho(),imagen.getAlto()));                
                contenedor.add(imagen); 
                //System.out.println("Objeto insertado\t"+aux.getTipo()+" \tx: " +x + "\ty: "+ y);
                val = posicionPanel(imagen.getAncho(), imagen.getAlto(),  contenedor, saltoY, x, y); 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                 
                break;                  
            case "texto":
                Texto texto =(Texto)aux.getValor();
                //texto.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                texto.setCadena(texto.getCadena().replace("\t", ""));
                texto.setCadena(texto.getCadena().replace("\r", "\n"));
                if(texto.getAlto()==0 && texto.getAncho()==0)
                {
                    //s = s.replace("xxxxx xxx xxxx ",s2)                     
                    String[] auxiliar = texto.getCadena().split("\n");
                    int alto= auxiliar.length;
                    System.out.println("El texto no tiene dimensiones definidas");
                    System.out.println("\t"+texto.getCadena());
                    System.out.println("\tNo. líneas \t"+alto);
                    int ancho = 0;
                    for(String cad : auxiliar)
                    {
                        if(cad.length()>ancho){ancho=cad.length();}
                        System.out.println("\tNo. caracteres \t"+ancho);
                    }
                    texto.setText(texto.getText());   
                    texto.setAlto(alto*20);
                    texto.setAncho(ancho*10);                    
                }
                texto.setPreferredSize(new java.awt.Dimension(texto.getAncho(),texto.getAlto()));
                texto.setBounds(x, y, texto.getAncho(),texto.getAlto());                                
                contenedor.add(texto);
                //System.out.println("Objeto insertado\t"+aux.getTipo()+" \tx: " +x + "\ty: "+ y); 
                val = posicionPanel(texto.getAncho(), texto.getAlto(),  contenedor, saltoY, x, y); 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                
                break;  
                
            case "caja":
                Caja caja =(Caja)aux.getValor();
                if(caja.getAlto()==0 && caja.getAncho()==0)
                {
                    String[] auxiliar = caja.getCadena().split("\r");
                    int alto = auxiliar.length;
                    int ancho = 0;
                    String valorCaja= "";
                    for(String cad : auxiliar)
                    {
                        valorCaja = valorCaja + cad;                        
                        ancho = ancho + cad.length();
                    }                    
                    caja.setText(valorCaja);   
                    caja.setAlto(20);
                    caja.setAncho(ancho*7);
                }
                caja.setPreferredSize(new java.awt.Dimension(caja.getAncho(),caja.getAlto()));
                caja.setBounds(x, y, caja.getAncho(),caja.getAlto());                 
                contenedor.add(caja); 
                //System.out.println("Objeto insertado\t"+aux.getTipo()+" \tx: " +x + "\ty: "+ y);
                val = posicionPanel(caja.getAncho(), caja.getAlto(),  contenedor, saltoY, x, y); 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                 
                break;                  
                
            case "area":
                areaTexto area =(areaTexto)aux.getValor();
                //area.setBounds(posX, posY, area.getAncho(),area.getAlto());                                
                JScrollPane nuevo = new JScrollPane(area);
                nuevo.setBounds(x, y, area.getAncho(),area.getAlto());
                area.setPreferredSize(new java.awt.Dimension(area.getAncho(),area.getAlto()));               
                contenedor.add(nuevo); 
                //System.out.println("Objeto insertado\t"+aux.getTipo()+" \tx: " +x + "\ty: "+ y);
                val = posicionPanel(area.getAncho(), area.getAlto(),  contenedor, saltoY, x, y); 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                    
                break;                 
                
            case "tabla":
                Tab tabla =(Tab)aux.getValor();               
                tabla.setSize(tabla.getAncho(), tabla.getAlto());
                tabla.setBackground(Color.white);
                //tabla.setBorder(BorderFactory.createLineBorder(Color.black));
                tabla.setPreferredSize(new java.awt.Dimension(tabla.getAncho(),tabla.getAlto()));
                InterfazTabla(tabla); 
                contenedor.add(tabla);
                //System.out.println("Objeto insertado\t"+aux.getTipo()+" \tx: " +x + "\ty: "+ y);
                val = posicionPanel(tabla.getAncho(), tabla.getAlto(),  contenedor, saltoY, x, y); 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                 
                break;                     
            case "panel":
                Panel panel =(Panel)aux.getValor();                                
                //prepararPanel(panel);                
                panel.setBorder(BorderFactory.createLineBorder(Color.black));
                panel.setPreferredSize(new java.awt.Dimension(panel.getAncho(),panel.getAlto()));                                
                panel.setBounds(x, y, panel.getAncho(),panel.getAlto());
                //Interfaz(panel);                               
                System.out.println("Objeto insertado "+ panel.getId()+"\t"+aux.getTipo()+" \tx: " +x + "\ty: "+ y + "\tAncho:"+panel.getAncho()+ "\tAltura:"+panel.getAlto());
                contenedor.add(panel);                
                val = posicionPanel(panel.getAncho(), panel.getAlto(),  contenedor, saltoY, x, y); 
                x  = val[0];
                y  = val[1];
                saltoY = val[2];                 
                break;                  
        }
        contenedor.repaint();
    }   
    this.repaint();
}

public void InterfazTabla(Tab contenedor)
{
    int x = 0;
    int y = 0;
    int saltoY = 0;
    int saltoX = 0;
    int anchoMaximo = 0;
    int altoMaximo = 0;
    ArrayList<Elemento> elementosContenedor = contenedor.getElementos();   
    
    int anchoContenedor = contenedor.getAncho();
    int altoContenedor = contenedor.getAlto();
    ArrayList<Integer> listaNumeroCeldas = new ArrayList();
    int celdas = 0;
    for(Elemento aux: contenedor.getElementos())
    {
        if(aux.getTipo().equals("nuevaLinea"))
        {
            listaNumeroCeldas.add(celdas);
            celdas = 0;
            
        }
        else
        {
            celdas++;
        }
    }
    
    int numeroCeldas = 0;
    int numeroFilas = listaNumeroCeldas.size();
    int cursor = 0;
    int index=0;
    for(Elemento aux: elementosContenedor)
    {
        numeroCeldas = listaNumeroCeldas.get(index);
        if(cursor==numeroCeldas)
        {
            if(index<numeroFilas-1)
            {
                index++;
                numeroCeldas = listaNumeroCeldas.get(index);
                cursor=0;                
            }
        }       
        int altoCelda = (altoContenedor-50)/numeroFilas;
        int anchoCelda = (anchoContenedor-50)/numeroCeldas;
        switch(aux.getTipo())
        {
            case "boton":
                Boton boton =(Boton)aux.getValor();                
                boton.setPreferredSize(new java.awt.Dimension(anchoCelda,altoCelda));
                boton.setBounds(x, y,anchoCelda, altoCelda);   
                boton.removeMouseListener(mouseListener);
                boton.addMouseListener(mouseListener);                   
                posicionTabla(anchoCelda, altoCelda,  contenedor, saltoY, x, y,anchoMaximo,altoMaximo);         
                contenedor.add(boton);
                break;                                           
            case "imagen":
                Imagen imagen =(Imagen)aux.getValor();
                imagen.setBounds(x, y, anchoCelda,altoCelda);
                ImageIcon icono = new ImageIcon(); 
                if(imagen.getRuta()!=null )
                {
                    if(!imagen.getRuta().equals(""))
                    {
                        icono =   new ImageIcon(imagen.getRuta().substring(1,imagen.getRuta().length()-1));
                    }   
                    if(!imagen.getRuta().substring(0,1).equals("\""))
                    {
                        icono = new ImageIcon(imagen.getRuta());
                    }  
                    ImageIcon iconoEscala = new ImageIcon(icono.getImage().getScaledInstance(anchoCelda, altoCelda, java.awt.Image.SCALE_DEFAULT));                
                    imagen.setIcon(iconoEscala);                     
                    
                }                    
                imagen.setPreferredSize(new java.awt.Dimension(anchoCelda,altoCelda));
                posicionTabla(anchoCelda, altoCelda, contenedor, saltoY, x, y ,anchoMaximo,altoMaximo);                
                contenedor.add(imagen);       
                break;                  
            case "texto":
                Texto texto =(Texto)aux.getValor();
                if(texto.getAlto()==0 && texto.getAncho()==0)
                {
                    
                    String[] auxiliar = texto.getCadena().split("\r");
                    int alto= auxiliar.length*20;
                    System.out.println("El texto no tiene dimensiones definidas");
                    System.out.println("\t"+texto.getCadena());
                    System.out.println("\tNo. líneas \t"+alto);
                    int ancho = 0;
                    for(String cad : auxiliar)
                    {
                        if(cad.length()>ancho){ancho=cad.length();}
                        System.out.println("\tNo. caracteres \t"+ancho);
                    }
                    texto.setText(texto.getText());   
                    texto.setAlto(alto);
                    texto.setAncho(ancho*7);                    
                }
                texto.setPreferredSize(new java.awt.Dimension(anchoCelda,altoCelda));
                texto.setBounds(x, y, anchoCelda,altoCelda);                
                posicionTabla(anchoCelda, altoCelda, contenedor, saltoY, x, y ,anchoMaximo,altoMaximo);                
                contenedor.add(texto);                
                break;                  
        }
        cursor++;
        contenedor.repaint();
    }   
    this.repaint();
}






  

public String quitarComillas(String cadena)
{
    if(cadena!=null)
    {
        if(!cadena.equals(""))
        {
            String inicio = cadena.substring(0, 1);
            if(inicio.equals("\""))
            {
                return cadena.substring(1, cadena.length()-1);
            }
            return cadena.trim();            
        }
        return cadena.trim();
    }
    return cadena.trim();
}
     
private static boolean esNumero(String cadena){
	try 
        {
		Integer.parseInt(cadena);
		return true;
	} catch (NumberFormatException nfe){
		return false;
	}
}   
   
   
   public Color buscarColor(nodoChtml raiz)
   {
       Color retorno = Color.white ;
       System.out.println("Buscando color: \t "+raiz.getValue());
        switch(raiz.getValue())
        {
            case "\"blue\"":
                retorno = Color.blue;
                break;
            case "\"black\"":
                retorno = Color.BLACK;
                break;
            case "\"gray\"":
                retorno = Color.GRAY;
                break;
            case "\"cyan\"":
                retorno = Color.CYAN;
                break;
            case "\"dark_gray\"":
                retorno = Color.DARK_GRAY;
                break;   
            case "\"green\"":
                retorno = Color.GREEN;
                break;
            case "\"light_gray\"":
                retorno = Color.LIGHT_GRAY;
                break;
            case "\"magenta\"":
                retorno = Color.MAGENTA;
                break;
            case "\"orange\"":
                retorno = Color.ORANGE;
                break;
            case "\"pink\"":
                retorno = Color.PINK;
                break;
            case "\"red\"":
                retorno = Color.RED;
                break;
            case "\"white\"":
                retorno = Color.WHITE;
                break;
            case "\"yellow\"":
                retorno = Color.YELLOW;
                break;  
            default:
                //filasErrores.addRow(new String[]{"CHTML",String.valueOf(raiz.getLinea()),String.valueOf(raiz.getColumna()),"Semantico","Nombre de color no válido."});
                //Errores(String tipo, int linea, int columna, String valor)
                String mensaje = raiz.getValue() + "Nombre de color no válido.";
                erroresSemanticos.add( new Errores("Sematico", raiz.getLinea(), raiz.getColumna(), mensaje ));
                break;
        }   
        return retorno;
   }
   
   
   private static int hexToDec(String hex) {  
       Integer outputDecimal = 0;
        try
        { 
            outputDecimal = Integer.parseInt(hex, 16);
            System.out.print(outputDecimal+"\t D:\t" + hex);
            return outputDecimal;
        }

        catch(NumberFormatException ne)
        {
            return 300;
        }            
}
    
    
    
    
    public void imprimirReporteLexico(){
          String directorioHtml=PathActual()+"\\Lexico.html";

            if(tablaSimbolos_.isEmpty()){
                //JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");
            }else{
                File html=new File(directorioHtml);
                PrintWriter writer;

                try {
                    writer=new PrintWriter(html);
                    String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                        + "<head>\n" + "<title>TABLA DE TOKENS</title>\n" + "</head>\n"
                        + "<body>\n"
                        + "<h1 align=\"center\">ANALISIS LEXICO </h1>\n"
                        + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                        + "<table border=\"1\">\n"
                        + "<tr>\n"
                        + "<td>No.</td>\n"
                        + "<td>Columna</td>\n"
                        + "<td>Linea</td>\n"
                        + "<td>Tipo</td>\n"
                        + "<td>Valor</td>\n"
                            + "<td>Descripcion</td>\n";

                           for(int x=0;x<tablaSimbolos_.size();x++){
                           texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).columna+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).linea+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).tipo+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).Valor+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).descripcion+"</td>\n";
                           }

                        texto+="</tr>\n"+                    
                        "</table>\n"
                        + "</body>"
                        + "</html>";
                    writer.print(texto);
                    analisisLexico=texto;
                    writer.close();
                  //   abrirHtml(directorioHtml);
                } catch (FileNotFoundException ex) {

                }
            } 
    }    
    
    
    public void imprimirResultado(){
          String directorioHtml=PathActual()+"\\Resultado.html";

            if(tablaSimbolos_.isEmpty())
            {
                JOptionPane.showMessageDialog(this,"Error en análisis. Ver tabla de errores.");

            }
            else
            {
                File html=new File(directorioHtml);
                PrintWriter writer;

                try {
                    writer=new PrintWriter(html);

                    writer.print(resultado);
                  //  resultado=Interfaz.resultado;
                    writer.close();
                  //   abrirHtml(directorioHtml);
                } catch (FileNotFoundException ex) {

                }
            } 
    }    
    
    public void imprimirLexicos(){
         String directorioHtml=PathActual()+"\\Erores_lexicos.html";

           if(erroresLexicos.isEmpty()){
               //JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");

           }else{
               File html=new File(directorioHtml);
               PrintWriter writer;

               try {
                   writer=new PrintWriter(html);
                   String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                       + "<head>\n" + "<title>TABLA DE ERRORES</title>\n" + "</head>\n"
                       + "<body>\n"
                       + "<h1 align=\"center\">Errores Lexicos </h1>\n"
                       + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                       + "<table border=\"1\">\n"
                       + "<tr>\n"
                       + "<td>No.</td>\n"
                       + "<td>Columna</td>\n"
                       + "<td>Linea</td>\n"
                       + "<td>Tipo</td>\n"
                           + "<td>Descripcion</td>\n";

                          for(int x=0;x<erroresLexicos.size();x++){
                          texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).columna+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).linea+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).tipo+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).descripcion+"</td>\n";
                          }

                       texto+="</tr>\n"+                    
                       "</table>\n"
                       + "</body>"
                       + "</html>";
                   writer.print(texto);
                   this.ELexico=texto;
                   writer.close();
                 //   abrirHtml(directorioHtml);
               } catch (FileNotFoundException ex) {

               }
           } 
   }

   public void imprimirSintacticos(){
         String directorioHtml=PathActual()+"\\Erores_sintacticos.html";

           if(erroresLexicos.isEmpty()){
               //JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");

           }else{
               File html=new File(directorioHtml);
               PrintWriter writer;

               try {
                   writer=new PrintWriter(html);
                   String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                       + "<head>\n" + "<title>TABLA DE ERRORES</title>\n" + "</head>\n"
                       + "<body>\n"
                       + "<h1 align=\"center\">Errores Sintacticos </h1>\n"
                       + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                       + "<table border=\"1\">\n"
                       + "<tr>\n"
                       + "<td>No.</td>\n"
                       + "<td>Columna</td>\n"
                       + "<td>Linea</td>\n"
                       + "<td>Tipo</td>\n"
                           + "<td>Descripcion</td>\n";

                          for(int x=0;x<erroresSintacticos.size();x++){
                          texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).columna+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).linea+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).tipo+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).descripcion+"</td>\n";
                          }

                       texto+="</tr>\n"+                    
                       "</table>\n"
                       + "</body>"
                       + "</html>";
                   writer.print(texto);
                   analisisSintactico=texto;
                   writer.close();
                 //   abrirHtml(directorioHtml);
               } catch (FileNotFoundException ex) {

               }
           } 
   }

   public void imprimirSemanticos(){
         String directorioHtml=PathActual()+"\\Erores_semanticos.html";

           if(erroresSemanticos.isEmpty()){
              // JOptionPane.showMessageDialog(this,"No hay errores Semanticos");

           }else{
               File html=new File(directorioHtml);
               PrintWriter writer;

               try {
                   writer=new PrintWriter(html);
                   String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                       + "<head>\n" + "<title>TABLA De ERRORES</title>\n" + "</head>\n"
                       + "<body>\n"
                       + "<h1 align=\"center\">Errores Semanticos </h1>\n"
                       + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                       + "<table border=\"1\">\n"
                       + "<tr>\n"
                       + "<td>No.</td>\n"
                       + "<td>Columna</td>\n"
                       + "<td>Linea</td>\n"
                       + "<td>Tipo</td>\n"
                           + "<td>Descripcion</td>\n";

                          for(int x=0;x<erroresSemanticos.size();x++){
                          texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).columna+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).linea+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).tipo+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).descripcion+"</td>\n";
                          }

                       texto+="</tr>\n"+                    
                       "</table>\n"
                       + "</body>"
                       + "</html>";
                   writer.print(texto);
                   analisisSemantico=texto;
                   writer.close();
                 //   abrirHtml(directorioHtml);
               } catch (FileNotFoundException ex) {

               }
           } 
   }

   

    
    public String PathActual(){
        String path="";
         File miDir = new File (".");
         try {
           //System.out.println (miDir.getCanonicalPath());
           path=miDir.getCanonicalPath();
         }
         catch(Exception e) 
         {
           e.printStackTrace();
         }
         return path;
    }    
    
    public void errores_consola()
    {                
        
        JTable tablaErrores = new JTable();        
        filasErrores = new DefaultTableModel();        
        filasErrores.addColumn("Archivo");
        filasErrores.addColumn("Línea");
        filasErrores.addColumn("Columna");
        filasErrores.addColumn("Detalle"); 
        filasErrores.addColumn("Tipo");         
        filasErrores.addRow(new String[]{"Archivo","Linea","Columna","Detalle","Tipo"});
        tablaErrores.setModel(filasErrores);        
        
        String temporal=
        "Linea           Columna           Descripcion                TIPO";
        for(int x=0;x<erroresLexicos.size();x++)
        {
            filasErrores.addRow(new Object[]{this.PathActual(), erroresLexicos.get(x).linea,erroresLexicos.get(x).columna,erroresLexicos.get(x).getDescripcion(),"Lexico"});
            temporal+="\n"+erroresLexicos.get(x).linea+"                "+erroresLexicos.get(x).columna+"          "+erroresLexicos.get(x).getDescripcion()+"       Lexico";          
        }
        for(int x=0;x<erroresSintacticos.size();x++){
            filasErrores.addRow(new Object[]{this.PathActual(), erroresSintacticos.get(x).linea,erroresSintacticos.get(x).columna,erroresSintacticos.get(x).getDescripcion(),"Sintactico"});
        }
        for(int x=0;x<erroresSemanticos.size();x++)
        {
            filasErrores.addRow(new Object[]{this.PathActual(), erroresSemanticos.get(x).linea,erroresSemanticos.get(x).columna,erroresSemanticos.get(x).getDescripcion(),"Semanticos"});
        }                            
        //tablaErrores.setText(temporal);
        //Mensaje(temporal, temporal);

        //panelErrores.add(tablaErrores);
        contenedorErrores.removeAll();
        contenedorErrores.add(tablaErrores);
        //System.out.println(temporal);                        
    }  
    
    
    @Override
    public void actionPerformed(ActionEvent evento)
    {
        Boton objeto = (Boton)evento.getSource();
        JOptionPane.showMessageDialog( this, objeto.getMetodo(), objeto.getCadena(), 0);
    }
    
    public void addChtml(String tipo, int linea, int columna, String descripcion, String valor)
    {                
        auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo(tipo);
        simbolo.setLinea(linea);
        simbolo.setColumna(columna);
        simbolo.setDescripcion(descripcion);
        simbolo.setIndex(auxContador);
        simbolo.setValor(valor);                 
        tablaSimbolos_.add(simbolo);	            
    }
    private class BotonPulsadoListener implements ActionListener{		

      @Override
      public void actionPerformed(ActionEvent e) {
        etiquetaNombre.setText("Has pulsado el botón " + e.getActionCommand());			
      }					
    }   
    
    
    
    MouseListener mouseListener= new MouseListener() 
    {

        @Override
        public void mouseReleased(MouseEvent e)
        {
        }

        @Override
        public void mousePressed(MouseEvent e) 
        {                
            Boton boton = (Boton)e.getSource();  
            
                                              
            if(!boton.getRuta().equals(""))
            {
                try 
                {
                    //Mensaje("Abriendo nueva página.",boton.getRuta());  
                    abrirEnlace(boton.getRuta());
                } 
                catch (IOException ex) 
                {
                    Logger.getLogger(Pagina.class.getName()).log(Level.SEVERE, null, ex);
                }            
            }

            if(!boton.getMetodo().equals(""))
            {
                Mensaje("Llamada a funcion.",boton.getMetodo());
            }
                       
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseClicked(MouseEvent e) 
        {
             
        }
    };    
    
    
    MouseListener listenerEnlace= new MouseListener() 
    {

        @Override
        public void mouseReleased(MouseEvent e)
        {
        }

        @Override
        public void mousePressed(MouseEvent e) 
        {                
            Enlace boton = (Enlace)e.getSource();                        
            if(!boton.getRuta().equals(""))
            {
                try 
                {          
                    abrirEnlace(boton.getRuta());
                } 
                catch (IOException ex) 
                {
                    Logger.getLogger(Pagina.class.getName()).log(Level.SEVERE, null, ex);
                }                
            }
            else
            {
                //Mensaje("",boton.getMetodo());
            }
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseClicked(MouseEvent e) 
        {
             
        }
    };   
    
    public void abrirEnlace(String path) throws IOException
    {
            Pagina pagina = new Pagina();            
            pagina.textRuta.setText(quitarComillas(path)); 
            scroll.add(pagina);
            pagina.analizar();
            contenedorPaginas.addTab("Historial", null, pagina);                                                         
    }

    
    public void verPaginaAnterior() throws IOException
    {
        if(Pagina.contadorPagina>1)
        {

                Pagina.contadorPagina--;
                String rutaAuxiliar[] = Pagina.historial.get(Pagina.contadorPagina).split(",");
                textRuta.setText(rutaAuxiliar[0]);
                analizar();                            
        }        
    }
    
    public void verPaginaSiguiente() throws IOException
    {
        if(Pagina.contadorPagina< Pagina.historial.size())
        {
                Pagina.contadorPagina++;
                String rutaAuxiliar[] = Pagina.historial.get(Pagina.contadorPagina).split(",");                
                textRuta.setText(rutaAuxiliar[0]);
                analizar();                
        }    
    }
    
    public void aplicarEstilos()
    { 
        

        
        for(Source.CCSS.Ejecucion.nodoLista nodo : Source.CCSS.Ejecucion.listaBloque.lbloques)
        {           
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Menu;
    private javax.swing.JPanel Panel;
    private javax.swing.JTextArea archivoCHTML;
    private javax.swing.JTabbedPane areaOpciones;
    private javax.swing.JButton botonAdelante;
    private javax.swing.JButton botonAtras;
    private javax.swing.JButton botonCerrar;
    private javax.swing.JButton botonHistorial;
    private javax.swing.JButton botonIr;
    private javax.swing.JButton botonOpciones;
    private javax.swing.JTabbedPane ccss1;
    private javax.swing.JTextArea ccssArea1;
    private javax.swing.JTabbedPane cjs1;
    private javax.swing.JTextArea cjsArea1;
    private javax.swing.JPanel contenedorErrores;
    private javax.swing.JLabel etiquetaNombre;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel panelContenido;
    private javax.swing.JPanel panelErrores;
    private javax.swing.JPanel panelMenu;
    private javax.swing.JPanel panelOpciones;
    private javax.swing.JPanel scroll;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTable tablaSalida;
    private javax.swing.JTextField textRuta;
    // End of variables declaration//GEN-END:variables
}
