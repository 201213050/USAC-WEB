/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Principal;


import Source.CHTML.Scanner;
import Source.CHTML.dibujador;
import Source.CHTML.nodoChtml;
import Source.CHTML.sintactico;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author erick
 */
public class Pagina extends javax.swing.JPanel {

    public static  int auxContador = 0;
    public static ArrayList<tablaSimbolos> tablaSimbolos_ = new ArrayList();
    public static ArrayList<Errores> erroresSintacticos = new ArrayList();
    public static ArrayList<Errores> erroresLexicos = new ArrayList();
    public static ArrayList<Errores> erroresSemanticos = new ArrayList();
    public String analisisLexico="";      
    public String analisisLexico_="";
    public static String resultado="";
    public String ELexico="";
    public String analisisSintactico="";
    public String analisisSemantico="";   
    public Scanner s;
    public sintactico p;
    public static nodoChtml raizChtml = new nodoChtml();
    public static int contadorChtml=0;
    public int contadorPaginas=0;
    public String consolaSalida = "";
    
    DefaultTableModel filasErrores = new DefaultTableModel(); 
    DefaultTableModel filasSalidas = new DefaultTableModel();
    int flagOpciones = 0;
    int posX, posXAux = 0;
    int posY, posYAux = 0;
    Color colorFondo = Color.WHITE ;
    ArrayList<Elemento> elementos = new ArrayList();
    int xMax,  xMaxAux=0;
    int yMax, yMaxAux=0;
    int flagTabla = 0; // 0 Significa Que no pertence a tabla, 1. que sí.
    
    Tabla tablaActual;
    Pagina panelActual = null;
    public int anchoActual=0;
    
    
    //JScrollPane scroll = new JScrollPane();
    
    
    
    public ArrayList<String> archivos = new ArrayList();
    /**
     * Creates new form Panel
     */
    public Pagina() {
        initComponents();
        filasErrores = new DefaultTableModel(); 
        filasSalidas = new DefaultTableModel();
        filasErrores.addColumn("Archivo");
        filasErrores.addColumn("Línea");
        filasErrores.addColumn("Columna");
        filasErrores.addColumn("Tipo");
        filasErrores.addColumn("Descripción");
        tablaErrores.setModel(filasErrores);
        
        filasSalidas.addColumn("Archivo");
        filasSalidas.addColumn("Línea");
        filasSalidas.addColumn("Columna");
        filasSalidas.addColumn("SalidaX"); 
        tablaSalida.setModel(filasSalidas);
        //this.panelContenido.add(scroll);
        
        //
        this.areaOpciones.hide();
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        panelContenido = new javax.swing.JPanel();
        scrollPanel = new javax.swing.JScrollPane();
        scroll = new javax.swing.JPanel();
        panelMenu = new javax.swing.JPanel();
        Menu = new javax.swing.JPanel();
        botonAtras = new javax.swing.JButton();
        botonAdelante = new javax.swing.JButton();
        botonIr = new javax.swing.JButton();
        textRuta = new javax.swing.JTextField();
        botonOpciones = new javax.swing.JButton();
        botonHistorial = new javax.swing.JButton();
        etiquetaNombre = new javax.swing.JLabel();
        areaOpciones = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        archivoCHTML = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        ccss1 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        ccssArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        cjs1 = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        cjsArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaSalida = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaErrores = new javax.swing.JTable();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(new javax.swing.OverlayLayout(this));

        Panel.setPreferredSize(new java.awt.Dimension(600, 600));
        Panel.setLayout(new java.awt.BorderLayout(10, 0));

        panelContenido.setBackground(new java.awt.Color(51, 204, 255));
        panelContenido.setPreferredSize(new java.awt.Dimension(600, 600));
        panelContenido.setLayout(new java.awt.CardLayout());

        scrollPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPanel.setViewportBorder(javax.swing.BorderFactory.createCompoundBorder());
        scrollPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        scroll.setBackground(new java.awt.Color(153, 255, 255));
        scroll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        scroll.setMinimumSize(new java.awt.Dimension(0, 15767));
        scroll.setPreferredSize(new java.awt.Dimension(600, 600));
        scroll.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                scrollComponentResized(evt);
            }
        });

        javax.swing.GroupLayout scrollLayout = new javax.swing.GroupLayout(scroll);
        scroll.setLayout(scrollLayout);
        scrollLayout.setHorizontalGroup(
            scrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1011, Short.MAX_VALUE)
        );
        scrollLayout.setVerticalGroup(
            scrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15767, Short.MAX_VALUE)
        );

        scrollPanel.setViewportView(scroll);

        panelContenido.add(scrollPanel, "card2");

        Panel.add(panelContenido, java.awt.BorderLayout.CENTER);

        panelMenu.setBackground(new java.awt.Color(0, 255, 102));
        panelMenu.setLayout(new java.awt.BorderLayout());

        botonAtras.setText("<-");

        botonAdelante.setText("->");
        botonAdelante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAdelanteActionPerformed(evt);
            }
        });

        botonIr.setText("Ir a");
        botonIr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIrActionPerformed(evt);
            }
        });

        textRuta.setText("C:\\Users\\erick\\Documents\\NetBeansProjects\\USAC-WEB\\prueba.html");

        botonOpciones.setText("Opciones");
        botonOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpcionesActionPerformed(evt);
            }
        });

        botonHistorial.setText("Historial");
        botonHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonHistorialActionPerformed(evt);
            }
        });

        etiquetaNombre.setText("Inicio");

        javax.swing.GroupLayout MenuLayout = new javax.swing.GroupLayout(Menu);
        Menu.setLayout(MenuLayout);
        MenuLayout.setHorizontalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonAdelante, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonIr, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiquetaNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                    .addComponent(textRuta)))
        );
        MenuLayout.setVerticalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuLayout.createSequentialGroup()
                .addComponent(etiquetaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonAdelante, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonIr, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botonAtras, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelMenu.add(Menu, java.awt.BorderLayout.CENTER);

        Panel.add(panelMenu, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new javax.swing.OverlayLayout(jPanel1));

        archivoCHTML.setColumns(20);
        archivoCHTML.setRows(5);
        jScrollPane3.setViewportView(archivoCHTML);

        jPanel1.add(jScrollPane3);

        areaOpciones.addTab("CHTML", jPanel1);

        jPanel2.setLayout(new javax.swing.OverlayLayout(jPanel2));

        ccssArea1.setColumns(20);
        ccssArea1.setRows(5);
        jScrollPane4.setViewportView(ccssArea1);

        ccss1.addTab("tab1", jScrollPane4);

        jPanel2.add(ccss1);

        areaOpciones.addTab("CCSS", jPanel2);

        jPanel3.setLayout(new javax.swing.OverlayLayout(jPanel3));

        cjsArea1.setColumns(20);
        cjsArea1.setRows(5);
        jScrollPane5.setViewportView(cjsArea1);

        cjs1.addTab("tab1", jScrollPane5);

        jPanel3.add(cjs1);

        areaOpciones.addTab("CJS", jPanel3);

        jPanel4.setLayout(new javax.swing.OverlayLayout(jPanel4));

        tablaSalida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Archivo", "Línea", "Columna", "Salida"
            }
        ));
        jScrollPane1.setViewportView(tablaSalida);
        if (tablaSalida.getColumnModel().getColumnCount() > 0) {
            tablaSalida.getColumnModel().getColumn(0).setHeaderValue("Archivo");
            tablaSalida.getColumnModel().getColumn(1).setHeaderValue("Línea");
            tablaSalida.getColumnModel().getColumn(2).setHeaderValue("Columna");
            tablaSalida.getColumnModel().getColumn(3).setHeaderValue("Salida");
        }

        jPanel4.add(jScrollPane1);

        areaOpciones.addTab("Consolo Salida", jPanel4);

        jPanel5.setLayout(new javax.swing.OverlayLayout(jPanel5));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tablaErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Archivo", "Línea", "Columna", "Tipo", "Descripción"
            }
        ));
        jScrollPane2.setViewportView(tablaErrores);

        jPanel5.add(jScrollPane2);

        areaOpciones.addTab("Consola Errores", jPanel5);

        Panel.add(areaOpciones, java.awt.BorderLayout.PAGE_END);

        add(Panel);
    }// </editor-fold>//GEN-END:initComponents

    private void botonAdelanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAdelanteActionPerformed

    }//GEN-LAST:event_botonAdelanteActionPerformed

    private void botonIrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIrActionPerformed
        try 
        {
            analizar();
        } 
        catch (IOException ex)
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_botonIrActionPerformed

    private void botonHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonHistorialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonHistorialActionPerformed

    private void botonOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpcionesActionPerformed
        if(flagOpciones==0)
        {
            this.areaOpciones.hide();
            flagOpciones = 1;
            //this.repaint();
        }
        if(flagOpciones==1)
        {
            this.areaOpciones.show(true);
            flagOpciones = 0;
            //this.repaint();
        }        
    }//GEN-LAST:event_botonOpcionesActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        generarInterfaz();        // TODO add your handling code here:
        posX = posY = xMax = yMax=  0;
        posXAux = posYAux = xMaxAux = yMaxAux=  0;
        System.out.println(scroll.getHeight() + "\t" + scroll.getWidth());
    }//GEN-LAST:event_formComponentResized

    private void scrollComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_scrollComponentResized

    }//GEN-LAST:event_scrollComponentResized

    
    
public void analizar() throws IOException
{
        scroll.removeAll();
        tablaSimbolos_.clear();
        erroresLexicos.clear();
        elementos.clear();
        erroresSintacticos.clear();
        elementos = new ArrayList();


        compilar();
        
        if((erroresLexicos.size()!=0)||(erroresSintacticos.size()!=0)||(erroresSemanticos.size()!=0))
        {
            errores_consola();
        }
        dibujador aux = new dibujador();           
        aux.generarGrafica(raizChtml); // Dibujamos el arbol

        posX = posY = xMax = yMax=  0;
        Panel nuevo = new Panel();
        nuevo.setBounds(0, 0, scroll.getWidth(), scroll.getHeight());
        generarObjetos(raizChtml,nuevo);  

        Elemento elemento = new Elemento("panel", "panel", nuevo);
        elementos.add(elemento);
        Interfaz(nuevo); // Generamos la interfaz             
        scroll.add(nuevo);



        //System.out.println(aux.dibujarInterfaz(raizChtml,contadorPaginas)); // Generamos interfaz :v
        //aux.imprimirtodo(raizChtml, contadorChtml);


        limpiarSalidas();
        imprimirReporteLexico();
        imprimirResultado();
        imprimirLexicos();
        imprimirSintacticos();
        imprimirSemanticos();
        
    
    
} 

public void limpiarSalidas()
{
        filasErrores = new DefaultTableModel(); 
        filasSalidas = new DefaultTableModel();
        filasErrores.addColumn("Archivo");
        filasErrores.addColumn("Línea");
        filasErrores.addColumn("Columna");
        filasErrores.addColumn("Tipo");
        filasErrores.addColumn("Descripción");
        tablaErrores.setModel(filasErrores);
        
        filasSalidas.addColumn("Archivo");
        filasSalidas.addColumn("Línea");
        filasSalidas.addColumn("Columna");
        filasSalidas.addColumn("SalidaX"); 
        tablaSalida.setModel(filasSalidas);
}

public void compilar(){

        
        String path=textRuta.getText();  
         try 
         {            
            s=new Scanner(new java.io.FileReader(path));                          
            p = new sintactico(s);
            p.parse();
            tablaSimbolos_ = Scanner.tablaSimbolos_;
            raizChtml = sintactico.raizChtml;
            int numero= tablaSimbolos_.size();
            System.out.println("Columna\tLinea\tValor\tTipo\tDescripción");                
            for(int n=0;n<numero;n++)
            {
                
                System.out.println(tablaSimbolos_.get(n).columna + "\t"+tablaSimbolos_.get(n).linea+ "\t"+tablaSimbolos_.get(n).Valor+ "\t"+tablaSimbolos_.get(n).tipo+ "\t\t"+tablaSimbolos_.get(n).descripcion);
            
            }
            System.out.println(numero);
 
        }
        catch(Exception e) { System.out.println(e.getMessage());}
    
    

}



   public void generarObjetos(nodoChtml raiz, Panel panel)
    {
        
        String retorno="";
        if(raiz!=null)
        {
            System.out.println(raiz.getValue());
            switch(raiz.getValue())
            {
                case "DOCUMENTO":
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        generarObjetos(aux, panel);
                    }
                    break;
                    
                case "ENCABEZADO":                                
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        generarObjetos(aux, panel);
                    }
                    break;
                case "LISTAARCHIVOS":
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        archivos.add(quitarComillas(aux.getValue())); // Agregamos los archivos a analizar.
                    }
                    break;
                case "TITULO": 
                    String titulo = "";
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        titulo = titulo + aux.getValue();
                    }                                    
                    etiquetaNombre.setText(titulo);
                    break;
                case "SALTO":                                   
                    Elemento salto = new Elemento();
                    salto.setNombre("salto");
                    salto.setTipo("salto");
                    panel.getElementos().add(salto);
                    break;                    
                case  "CUERPO":
                    nodoChtml auxiliar = raiz.getHijos().get(0);
                    if(!auxiliar.getValue().equals("ELEMENTO"))
                    {
                        generarObjetos(raiz.getHijos().get(0),panel);
                        
                    }
                    else
                    {
                        if(auxiliar.getValue().substring(1,2).equals("#"))
                        {
                            if(auxiliar.getValue().length()==9)
                            {
                                //Color colorFodo = new Color(int r, int g, int b, int a);
                                //this.scroll.setBackground(colorFondo);
                                int r,g,b,a;
                                String hr,hg,hb,ha;
                                String entrada= auxiliar.getValue();
                                hr = entrada.substring(2,4);
                                hg = entrada.substring(4,6);
                                hb = entrada.substring(6,8);

                                r = hexToDec(hr);
                                g = hexToDec(hg);
                                b = hexToDec(hb);
                                a=0;
                                if(r==300 || g ==300 || b==300)
                                {
                                    filasErrores.addRow(new String[]{"CHTML",String.valueOf(auxiliar.getLinea()),String.valueOf(auxiliar.getColumna()),"Semantico", auxiliar.getValue() + " Valor rgb no valido."});
                                    break;
                                }

                                this.scroll.setBackground(new Color(r,g,b));
                                colorFondo = new Color(r,g,b);
                            }
                            else
                            {
                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(auxiliar.getLinea()),String.valueOf(auxiliar.getColumna()),"Semantico","Valor rgb no valido."});
                                break;
                            }
                        }
                        else
                        {
                            panel.setBackground(buscarColor(raiz.getHijos().get(0)));
                            colorFondo = buscarColor(raiz.getHijos().get(0));
                        }
                        generarObjetos(raiz.getHijos().get(1),panel);
                    }
                    break;
                    
                    
                case "CONTENIDO"   :
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        generarObjetos(aux,panel);
                    }
                    break;
                    
                case "ENLACE":
                    System.out.println("---------------------------ENLACE---------------------");
                    //Vemos todos los elementos :v
                    Enlace enlace = new Enlace();
                    enlace.setBackground(colorFondo);
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {
                                case "ruta":
                                    enlace.setRuta(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "id":
                                    enlace.setId(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "grupo":
                                    enlace.setGrupo(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "cadena":
                                    enlace.setCadena(aux.getHijos().get(1).getValue());                                    
                                    enlace.setText(enlace.getCadena());
                                    break; 
                                case "ancho":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        enlace.setAncho(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                       
                                    break;
                                case "alto":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        enlace.setAlto(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            enlace.setAlineado("izquierda");
                                            enlace.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            enlace.setAlineado("derecha");
                                            enlace.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            enlace.setAlineado("centrado");
                                            enlace.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+enlace.getAlineado());
                                    break;                                     
                            }
                        }
                    }
                    /*
                    
                    */                    
                    Elemento elemento = new Elemento(enlace.getId(),"enlace",enlace);
                   panel.getElementos().add(elemento);                                     
                    break;
                    
                case "BOTON":
                    System.out.println("---------------------------BOTON---------------------");                    
                    Boton boton = new Boton();                    
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {
                                case "ruta":
                                    boton.setRuta(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "click":                                                                       
                                    boton.setMetodo(aux.getHijos().get(1).getValue());
                                    break;                                     
                                case "id":
                                    boton.setId(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "grupo":
                                    boton.setGrupo(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "cadena":
                                    boton.setCadena(aux.getHijos().get(1).getValue());                                    
                                    boton.setText(boton.getCadena());
                                    break; 
                                case "ancho":          
                                    String numero = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    if (esNumero(numero))
                                    {
                                        boton.setAncho(Integer.valueOf(numero));
                                    }                                       
                                    break;
                                case "alto":  
                                    numero = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);                                    
                                    if (esNumero(numero))
                                    {
                                        boton.setAlto(Integer.valueOf(numero));
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            boton.setAlineado("izquierda");
                                            boton.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            boton.setAlineado("derecha");
                                            boton.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            boton.setAlineado("centrado");
                                            boton.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    break;                                     
                            }
                        }
                    }      
                    if(flagTabla==1)
                    {
                        Elemento tablaAuxiliar =  elementos.get(elementos.size());                                                
                    }
                    elemento = new Elemento(boton.getId(),"boton",boton);
                    panel.getElementos().add(elemento);                                     
                    break;                    
                    
                    
                case "SPINNER":
                    System.out.println("---------------------------SPINNER---------------------");                    
                    Spinner spinner = new Spinner();
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {
                                case "ruta":
                                    spinner.setRuta(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "click":                                                                       
                                    spinner.setMetodo(aux.getHijos().get(1).getValue());
                                    break;                                     
                                case "id":
                                    spinner.setId(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "grupo":
                                    spinner.setGrupo(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "entero":
                                    spinner.setCadena(aux.getHijos().get(1).getValue());                                                                        
                                    break; 
                                case "ancho":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        spinner.setAncho(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                       
                                    break;
                                case "alto":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        spinner.setAlto(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            spinner.setAlineado("izquierda");
                                            spinner.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            spinner.setAlineado("derecha");
                                            spinner.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            spinner.setAlineado("centrado");
                                            spinner.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+spinner.getAlineado());
                                    break;                                     
                            }
                        }
                    }                   
                    elemento = new Elemento(spinner.getId(),"spinner",spinner);
                    panel.getElementos().add(elemento);                                     
                    break;                    
                    
                case "TEXTO":
                    System.out.println("---------------------------TEXTO---------------------");
                    //Vemos todos los elementos :v
                    Texto texto = new Texto();
                    //texto.setBackground(colorFondo);
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {                                                                 
                                case "id":
                                    texto.setName(aux.getHijos().get(1).getValue());
                                    break;
                                case "grupo":
                                    texto.setGrupo(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "cadena":
                                    texto.setCadena(aux.getHijos().get(1).getValue());                                    
                                    texto.setText(texto.getCadena());
                                    //texto.setAlto(texto.cadena.length());
                                    break; 
                                case "ancho":                                                                        
                                    String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println(aux.getHijos().get(1).getValue()+"  ANCHO ---- "+ancho);
                                    if (esNumero(ancho))
                                    {
                                        System.out.println("--Valor válido--");
                                        texto.setAncho(Integer.valueOf(ancho));
                                    }                                       
                                    break;
                                case "alto":                                                                        
                                    String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println(aux.getHijos().get(1).getValue()+"  ALTO ---- "+alto);
                                    if (esNumero(alto))
                                    {
                                        System.out.println("--Valor válido--");
                                        texto.setAlto(Integer.valueOf(alto));
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            texto.setAlineado("izquierda");
                                            texto.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            texto.setAlineado("derecha");
                                            texto.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            texto.setAlineado("centrado");
                                            texto.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+texto.getAlineado());
                                    break;                                     
                            }
                        }
                    }                    
                    elemento = new Elemento(texto.getId(),"texto",texto);    
                    panel.getElementos().add(elemento);
                    break;  
/*Caja area de texto*/                   
                case "TEXTOA":
                    System.out.println("---------------------------TEXTOA---------------------");
                    //Vemos todos los elementos :v
                    areaTexto area = new areaTexto();
                    area.setBackground(Color.white);
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {                                                                 
                                case "id":
                                    area.setName(aux.getHijos().get(1).getValue());
                                    break;
                                case "grupo":
                                    area.setGrupo(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "cadena":
                                    area.setCadena(aux.getHijos().get(1).getValue());                                    
                                    area.setText(area.getCadena());
                                    //texto.setAlto(texto.cadena.length());
                                    break; 
                                case "ancho":     
                                    String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println("ANCHO ---- "+ancho);
                                    if (esNumero(ancho))
                                    {
                                        area.setAncho(Integer.valueOf(ancho));
                                        area.setAncho(area.getAncho());
                                    }                                       
                                    break;
                                case "alto": 
                                    String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println("ALTO ---- "+alto);
                                    if (esNumero(alto))
                                    {
                                        area.setAlto(Integer.valueOf(alto));
                                        area.setAlto(area.getAlto());
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            area.setAlineado("izquierda");
                                            area.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            area.setAlineado("derecha");
                                            area.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            area.setAlineado("centrado");
                                            area.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+area.getAlineado());
                                    break;                                     
                            }
                        }
                    }   
                    area.setBorder(BorderFactory.createLineBorder(Color.black));
                    elemento = new Elemento(area.getId(),"area",area);    
                    panel.getElementos().add(elemento);
                    break;      
                    
/*CAJA DE TEXTO SIN LINEAS*/  
                    
                case "CAJATEXTO":
                    System.out.println("---------------------------CAJATEXTO---------------------");
                    //Vemos todos los elementos :v
                    Caja caja = new Caja();                    
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {                                                                 
                                case "id":
                                    caja.setName(aux.getHijos().get(1).getValue());
                                    break;
                                case "grupo":
                                    caja.setGrupo(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "cadena":
                                    caja.setCadena(aux.getHijos().get(1).getValue());                                    
                                    caja.setText(caja.getCadena());
                                    //texto.setAlto(texto.cadena.length());
                                    break; 
                                case "ancho":     
                                    String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println("ANCHO ---- "+ancho);
                                    if (esNumero(ancho))
                                    {
                                        caja.setAncho(Integer.valueOf(ancho));
                                        caja.setAncho(caja.getAncho());
                                    }                                       
                                    break;
                                case "alto": 
                                    String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                    System.out.println("ALTO ---- "+alto);
                                    if (esNumero(alto))
                                    {
                                        caja.setAlto(Integer.valueOf(alto));
                                        caja.setAlto(caja.getAlto());
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            caja.setAlineado("izquierda");
                                            caja.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            caja.setAlineado("derecha");
                                            caja.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            caja.setAlineado("centrado");
                                            caja.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+caja.getAlineado());
                                    break;                                     
                            }
                        }
                    }   
                    caja.setBorder(BorderFactory.createLineBorder(Color.black));
                    elemento = new Elemento(caja.getId(),"caja",caja);    
                    panel.getElementos().add(elemento);
                    break;  

/*----------------------------IMAGEN--------------------------------------*/                    
                case "IMAGEN":
                    System.out.println("---------------------------IMAGEN---------------------");
                    Imagen imagen = new Imagen();
                    imagen.setBackground(colorFondo);
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {                                                                 
                                case "id":
                                    imagen.setName(quitarComillas(aux.getHijos().get(1).getValue()));
                                    break;
                                case "grupo":
                                    imagen.setGrupo(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    break;
                                case "cadena":
                                    imagen.setCadena(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                    imagen.setText(imagen.getCadena());                                    
                                    break; 
                                case "ancho":                                                                        
                                    String numero = aux.getHijos().get(1).getValue();
                                    numero = numero.substring(1,numero.length()-1);
                                    if (esNumero(numero))
                                    {
                                        imagen.setAncho(Integer.valueOf(numero));
                                    } 
                                    break;
                                case "alto":            
                                    numero = aux.getHijos().get(1).getValue();
                                    numero = numero.substring(1,numero.length()-1);
                                    if (esNumero(numero))
                                    {
                                        imagen.setAlto(Integer.valueOf(numero));
                                    }     
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            imagen.setAlineado("izquierda");
                                            imagen.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            imagen.setAlineado("derecha");
                                            imagen.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            imagen.setAlineado("centrado");
                                            imagen.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    break;  
                                case "click":                                                                       
                                    imagen.setMetodo(aux.getHijos().get(1).getValue());
                                    break; 
                                case "ruta":                                                                       
                                    imagen.setRuta(aux.getHijos().get(1).getValue());
                                    break;                                    
                            }
                        }
                    }                    
                    elemento = new Elemento(imagen.getId(),"imagen",imagen);    
                    panel.getElementos().add(elemento);
                    break;                        
                    
                  
/*------------------------CAJA DE OPCIONES-----------------------*/                    
                case "CAJAOPCIONES":
                    System.out.println("---------------------------IMAGEN---------------------");
                    JComboBox cajaOpciones = new JComboBox();
                    cajaOpciones.setBounds(posX, posY, 100, 20);
                    int contadorOpciones = 0;
                    for(nodoChtml aux: raiz.getHijos())
                    {       
                        System.out.println(aux.getValue());
                        switch(aux.getValue().toLowerCase())
                        {                                      
                            /*------------OPCIONES----------*/                                        
                            case "opcion":
                                
                                String valor = "";                                
                                for(nodoChtml opcion: aux.getHijos())
                                {     
                                    if(opcion.getValue().equals("ELEMENTO"))
                                    {
                                        nodoChtml izquierda = opcion.getHijos().get(0);
                                        nodoChtml derecha = opcion.getHijos().get(1);
                                        //System.out.println(izquierda.getValue().toLowerCase()+"***********************************************"+derecha.getValue());
                                        switch(izquierda.getValue().toLowerCase())
                                        {
                                            case "valor":                                                                                                                           
                                                valor = quitarComillas(derecha.getValue());
                                                break; 
                                            case "cadena":                                                                       
                                                if(valor.equals(""))
                                                {
                                                    valor = quitarComillas(derecha.getValue());
                                                }
                                                break;                                                
                                        }                                                        
                                    }
                                }
                                cajaOpciones.addItem(valor);
                                break;                                                                                                    
                        }
                        contadorOpciones++;
                    }                    
                    //elemento = new Elemento(cajaOpciones.getId(),"cajaOpciones",cajaOpciones);    
                    elemento = new Elemento("cajaOpciones","cajaOpciones",cajaOpciones);    
                    panel.getElementos().add(elemento);
                    break;                        
                  
                    
                case "PANEL":
                    System.out.println("---------------------------PANEL---------------------");
                    Panel panelNuevo = new Panel();
                    for(nodoChtml hijoAuxiliar: raiz.getHijos())
                    {
                        generarObjetos(hijoAuxiliar, panelNuevo);                                  
                    }                              
                    anchoActual = scroll.getWidth();
                    elemento = new Elemento("panel","panel",panelNuevo); 
                    panel.getElementos().add(elemento);
                    break;                    
                    
                case "TABLA":
                    System.out.println("---------------------------TABLA---------------------");
                    Tabla tabla = generarTabla(raiz);
                    elemento = new Elemento(tabla.getId(),"tabla",tabla);
                    panel.getElementos().add(elemento);                                     
                    break;                                                            
            }
        }        
    
    }
   
   
   
   
   /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
   public Panel generarPanel(nodoChtml raiz)
   {             
       ArrayList<Elemento> elementosPanel = new ArrayList();
       Panel panelNuevo = new Panel();
        if(raiz!=null)
        {
          for(nodoChtml hijo : raiz.getHijos())
          {                                      
            switch(hijo.getValue())
            {               
                case "CONTENIDO":
                    for(nodoChtml nieto: hijo.getHijos())
                    {
                       switch(nieto.getValue())
                       {
                                    case "SALTO":                                   
                                    Elemento salto = new Elemento();
                                    salto.setNombre("salto");
                                    salto.setTipo("salto");
                                    elementosPanel.add(salto);
                                    break;                                                                                    
                                    case "ENLACE":
                                        System.out.println("---------------------------ENLACE---------------------");                    
                                        Enlace enlace = new Enlace();
                                        enlace.setBackground(colorFondo);
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {
                                                    case "ruta":
                                                        enlace.setRuta(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "id":
                                                        enlace.setId(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "grupo":
                                                        enlace.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "cadena":
                                                        enlace.setCadena(aux.getHijos().get(1).getValue());                                    
                                                        enlace.setText(enlace.getCadena());
                                                        break; 
                                                    case "ancho":                                                                        
                                                        if (esNumero(aux.getHijos().get(1).getValue()))
                                                        {
                                                            enlace.setAncho(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                                        }                                       
                                                        break;
                                                    case "alto":                                                                        
                                                        if (esNumero(aux.getHijos().get(1).getValue()))
                                                        {
                                                            enlace.setAlto(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                enlace.setAlineado("izquierda");
                                                                enlace.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                enlace.setAlineado("derecha");
                                                                enlace.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                enlace.setAlineado("centrado");
                                                                enlace.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        System.out.println("------------ALINEACION: \t"+enlace.getAlineado());
                                                        break;                                     
                                                }
                                            }
                                        }
                                        /*

                                        */                    
                                        Elemento elemento = new Elemento(enlace.getId(),"enlace",enlace);
                                        elementosPanel.add(elemento);                                     
                                        break;

                                    case "BOTON":
                                        System.out.println("---------------------------BOTON---------------------");                    
                                        Boton boton = new Boton();                    
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {
                                                    case "ruta":
                                                        boton.setRuta(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "click":                                                                       
                                                        boton.setMetodo(aux.getHijos().get(1).getValue());
                                                        break;                                     
                                                    case "id":
                                                        boton.setId(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "grupo":
                                                        boton.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "cadena":
                                                        boton.setCadena(aux.getHijos().get(1).getValue());                                    
                                                        boton.setText(boton.getCadena());
                                                        break; 
                                                    case "ancho":          
                                                        String numero = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        if (esNumero(numero))
                                                        {
                                                            boton.setAncho(Integer.valueOf(numero));
                                                        }                                       
                                                        break;
                                                    case "alto":  
                                                        numero = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);                                    
                                                        if (esNumero(numero))
                                                        {
                                                            boton.setAlto(Integer.valueOf(numero));
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                boton.setAlineado("izquierda");
                                                                boton.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                boton.setAlineado("derecha");
                                                                boton.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                boton.setAlineado("centrado");
                                                                boton.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        break;                                     
                                                }
                                            }
                                        }      
                                        elemento = new Elemento(boton.getId(),"boton",boton);
                                        elementosPanel.add(elemento);                                     
                                        break;                    


                                    case "SPINNER":
                                        System.out.println("---------------------------SPINNER---------------------");                    
                                        Spinner spinner = new Spinner();
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {
                                                    case "ruta":
                                                        spinner.setRuta(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "click":                                                                       
                                                        spinner.setMetodo(aux.getHijos().get(1).getValue());
                                                        break;                                     
                                                    case "id":
                                                        spinner.setId(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "grupo":
                                                        spinner.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "entero":
                                                        spinner.setCadena(aux.getHijos().get(1).getValue());                                                                        
                                                        break; 
                                                    case "ancho":                                                                        
                                                        if (esNumero(aux.getHijos().get(1).getValue()))
                                                        {
                                                            spinner.setAncho(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                                        }                                       
                                                        break;
                                                    case "alto":                                                                        
                                                        if (esNumero(aux.getHijos().get(1).getValue()))
                                                        {
                                                            spinner.setAlto(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                spinner.setAlineado("izquierda");
                                                                spinner.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                spinner.setAlineado("derecha");
                                                                spinner.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                spinner.setAlineado("centrado");
                                                                spinner.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        System.out.println("------------ALINEACION: \t"+spinner.getAlineado());
                                                        break;                                     
                                                }
                                            }
                                        }                   
                                        elemento = new Elemento(spinner.getId(),"spinner",spinner);
                                        elementosPanel.add(elemento);                                     
                                        break;                    

                                    case "TEXTO":
                                        System.out.println("---------------------------TEXTO---------------------");
                                        //Vemos todos los elementosPanel :v
                                        Texto texto = new Texto();
                                        //texto.setBackground(colorFondo);
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {                                                                 
                                                    case "id":
                                                        texto.setName(aux.getHijos().get(1).getValue());
                                                        break;
                                                    case "grupo":
                                                        texto.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "cadena":
                                                        texto.setCadena(aux.getHijos().get(1).getValue());                                    
                                                        texto.setText(texto.getCadena());
                                                        //texto.setAlto(texto.cadena.length());
                                                        break; 
                                                    case "ancho":                                                                        
                                                        String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println(aux.getHijos().get(1).getValue()+"  ANCHO ---- "+ancho);
                                                        if (esNumero(ancho))
                                                        {
                                                            System.out.println("--Valor válido--");
                                                            texto.setAncho(Integer.valueOf(ancho));
                                                        }                                       
                                                        break;
                                                    case "alto":                                                                        
                                                        String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println(aux.getHijos().get(1).getValue()+"  ALTO ---- "+alto);
                                                        if (esNumero(alto))
                                                        {
                                                            System.out.println("--Valor válido--");
                                                            texto.setAlto(Integer.valueOf(alto));
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                texto.setAlineado("izquierda");
                                                                texto.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                texto.setAlineado("derecha");
                                                                texto.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                texto.setAlineado("centrado");
                                                                texto.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        System.out.println("------------ALINEACION: \t"+texto.getAlineado());
                                                        break;                                     
                                                }
                                            }
                                        }                    
                                        elemento = new Elemento(texto.getId(),"texto",texto);    
                                        elementosPanel.add(elemento);
                                        break;  
                    /*Caja area de texto*/                   
                                    case "TEXTOA":
                                        System.out.println("---------------------------TEXTOA---------------------");
                                        //Vemos todos los elementosPanel :v
                                        areaTexto area = new areaTexto();
                                        area.setBackground(Color.white);
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {                                                                 
                                                    case "id":
                                                        area.setName(aux.getHijos().get(1).getValue());
                                                        break;
                                                    case "grupo":
                                                        area.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "cadena":
                                                        area.setCadena(aux.getHijos().get(1).getValue());                                    
                                                        area.setText(area.getCadena());
                                                        //texto.setAlto(texto.cadena.length());
                                                        break; 
                                                    case "ancho":     
                                                        String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println("ANCHO ---- "+ancho);
                                                        if (esNumero(ancho))
                                                        {
                                                            area.setAncho(Integer.valueOf(ancho));
                                                            area.setAncho(area.getAncho());
                                                            area.setSize(Integer.valueOf(ancho),area.getHeight());
                                                        }                                       
                                                        break;
                                                    case "alto": 
                                                        String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println("ALTO ---- "+alto);
                                                        if (esNumero(alto))
                                                        {
                                                            area.setAlto(Integer.valueOf(alto));
                                                            area.setAlto(area.getAlto());
                                                            area.setSize(area.getWidth(), Integer.valueOf(alto));
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                area.setAlineado("izquierda");
                                                                area.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                area.setAlineado("derecha");
                                                                area.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                area.setAlineado("centrado");
                                                                area.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        System.out.println("------------ALINEACION: \t"+area.getAlineado());
                                                        break;                                     
                                                }
                                            }
                                        }   
                                        area.setBorder(BorderFactory.createLineBorder(Color.black));
                                        elemento = new Elemento(area.getId(),"area",area);    
                                        elementosPanel.add(elemento);
                                        break;      

                    /*CAJA DE TEXTO SIN LINEAS*/  

                                    case "CAJATEXTO":
                                        System.out.println("---------------------------CAJATEXTO---------------------");
                                        //Vemos todos los elementosPanel :v
                                        Caja caja = new Caja();                    
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {                                                                 
                                                    case "id":
                                                        caja.setName(aux.getHijos().get(1).getValue());
                                                        break;
                                                    case "grupo":
                                                        caja.setGrupo(aux.getHijos().get(1).getValue());                                    
                                                        break;
                                                    case "cadena":
                                                        caja.setCadena(aux.getHijos().get(1).getValue());                                    
                                                        caja.setText(caja.getCadena());
                                                        //texto.setAlto(texto.cadena.length());
                                                        break; 
                                                    case "ancho":     
                                                        String ancho = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println("ANCHO ---- "+ancho);
                                                        if (esNumero(ancho))
                                                        {
                                                            caja.setAncho(Integer.valueOf(ancho));
                                                            caja.setAncho(caja.getAncho());
                                                        }                                       
                                                        break;
                                                    case "alto": 
                                                        String alto = aux.getHijos().get(1).getValue().substring(1,aux.getHijos().get(1).getValue().length()-1);
                                                        System.out.println("ALTO ---- "+alto);
                                                        if (esNumero(alto))
                                                        {
                                                            caja.setAlto(Integer.valueOf(alto));
                                                            caja.setAlto(caja.getAlto());
                                                        }                                                                                                                                   
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                caja.setAlineado("izquierda");
                                                                caja.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                caja.setAlineado("derecha");
                                                                caja.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                caja.setAlineado("centrado");
                                                                caja.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        System.out.println("------------ALINEACION: \t"+caja.getAlineado());
                                                        break;                                     
                                                }
                                            }
                                        }   
                                        caja.setBorder(BorderFactory.createLineBorder(Color.black));
                                        elemento = new Elemento(caja.getId(),"caja",caja);    
                                        elementosPanel.add(elemento);
                                        break;  

                    /*----------------------------IMAGEN--------------------------------------*/                    
                                    case "IMAGEN":
                                        System.out.println("---------------------------IMAGEN---------------------");
                                        Imagen imagen = new Imagen();
                                        imagen.setBackground(colorFondo);
                                        for(nodoChtml aux: nieto.getHijos())
                                        {                        
                                            if(aux.getValue().equals("ELEMENTO"))
                                            {
                                                switch(aux.getHijos().get(0).getValue().toLowerCase())
                                                {                                                                 
                                                    case "id":
                                                        imagen.setName(quitarComillas(aux.getHijos().get(1).getValue()));
                                                        break;
                                                    case "grupo":
                                                        imagen.setGrupo(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                                        break;
                                                    case "cadena":
                                                        imagen.setCadena(quitarComillas(aux.getHijos().get(1).getValue()));                                    
                                                        imagen.setText(imagen.getCadena());                                    
                                                        break; 
                                                    case "ancho":                                                                        
                                                        String numero = aux.getHijos().get(1).getValue();
                                                        numero = numero.substring(1,numero.length()-1);
                                                        if (esNumero(numero))
                                                        {
                                                            imagen.setAncho(Integer.valueOf(numero));
                                                        } 
                                                        break;
                                                    case "alto":            
                                                        numero = aux.getHijos().get(1).getValue();
                                                        numero = numero.substring(1,numero.length()-1);
                                                        if (esNumero(numero))
                                                        {
                                                            imagen.setAlto(Integer.valueOf(numero));
                                                        }     
                                                        break; 
                                                    case "alineado":                                                                        
                                                        switch(aux.getHijos().get(1).getValue())
                                                        {
                                                            case "\"izquierda\"":
                                                                imagen.setAlineado("izquierda");
                                                                imagen.setAlignmentX(LEFT_ALIGNMENT);
                                                                break;
                                                            case "\"derecha\"":
                                                                imagen.setAlineado("derecha");
                                                                imagen.setAlignmentX(RIGHT_ALIGNMENT);
                                                                break;  
                                                            case "\"centrado\"":
                                                                imagen.setAlineado("centrado");
                                                                imagen.setAlignmentX(CENTER_ALIGNMENT);
                                                                break;   
                                                            default :
                                                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                                    "Sintactico","Valor de alineacion incorrecto"});
                                                                break;                                          
                                                        }
                                                        break;  
                                                    case "click":                                                                       
                                                        imagen.setMetodo(aux.getHijos().get(1).getValue());
                                                        break; 
                                                    case "ruta":                                                                       
                                                        imagen.setRuta(aux.getHijos().get(1).getValue());
                                                        break;                                    
                                                }
                                            }
                                        }                    
                                        elemento = new Elemento(imagen.getId(),"imagen",imagen);    
                                        elementosPanel.add(elemento);
                                        break;                        


                    /*------------------------CAJA DE OPCIONES-----------------------*/                    
                                    case "CAJAOPCIONES":
                                        System.out.println("---------------------------IMAGEN---------------------");
                                        JComboBox cajaOpciones = new JComboBox();
                                        cajaOpciones.setBounds(posX, posY, 100, 20);
                                        int contadorOpciones = 0;
                                        for(nodoChtml aux: nieto.getHijos())
                                        {       
                                            System.out.println(aux.getValue());
                                            switch(aux.getValue().toLowerCase())
                                            {                                      
                                                /*------------OPCIONES----------*/                                        
                                                case "opcion":

                                                    String valor = "";                                
                                                    for(nodoChtml opcion: aux.getHijos())
                                                    {     
                                                        if(opcion.getValue().equals("ELEMENTO"))
                                                        {
                                                            nodoChtml izquierda = opcion.getHijos().get(0);
                                                            nodoChtml derecha = opcion.getHijos().get(1);
                                                            System.out.println(izquierda.getValue().toLowerCase()+"***********************************************"+derecha.getValue());
                                                            switch(izquierda.getValue().toLowerCase())
                                                            {
                                                                case "valor":                                                                                                                           
                                                                    valor = quitarComillas(derecha.getValue());
                                                                    break; 
                                                                case "cadena":                                                                       
                                                                    if(valor.equals(""))
                                                                    {
                                                                        valor = quitarComillas(derecha.getValue());
                                                                    }
                                                                    break;                                                
                                                            }                                                        
                                                        }
                                                    }
                                                    cajaOpciones.addItem(valor);
                                                    break;                                                                                                    
                                            }
                                            contadorOpciones++;
                                        }                    
                                        //elemento = new Elemento(cajaOpciones.getId(),"cajaOpciones",cajaOpciones);    
                                        elemento = new Elemento("cajaOpciones","cajaOpciones",cajaOpciones);    
                                        elementosPanel.add(elemento);
                                        break;                        


                                    case "PANEL":
                                        System.out.println("---------------------------PANEL---------------------");
                                        Panel panelNuevo_ = generarPanel(nieto);
                                        elemento = new Elemento("panel","panel",panelNuevo_); 
                                        elementosPanel.add(elemento);
                                        break;                                    
                                    case "TABLA":
                                        System.out.println("---------------------------TABLA---------------------");
                                        Tabla tabla = generarTabla(nieto);
                                        elemento = new Elemento(tabla.getId(),"tabla",tabla);
                                        elementosPanel.add(elemento);                                     
                                        break;                            

                                           }
                                    }
                                break;
                                
                            case "ELEMENTO":
                                    System.out.println("---------------ELEMENTOS DE OBJETO DE PANEL----------------------");
                                    nodoChtml hijoI = hijo.getHijos().get(0);
                                    nodoChtml hijoD = hijo.getHijos().get(1);
                                    System.out.println(hijoI.getValue() +"--->" + hijoD.getValue());
                                    switch(hijoI.getValue().toLowerCase())
                                    {                                                                 
                                        case "id":
                                            panelNuevo.setName(hijoD.getValue());
                                            break;
                                        case "grupo":
                                            panelNuevo.setGrupo(hijoD.getValue());                                    
                                            break;
                                        case "cadena":
                                            panelNuevo.setCadena(hijoD.getValue());                                                                    
                                            //texto.setAlto(texto.cadena.length());
                                            break; 
                                        case "ancho":     
                                            String ancho = hijoD.getValue().substring(1,hijoD.getValue().length()-1);                                
                                            if (esNumero(ancho))
                                            {
                                                panelNuevo.setAncho(Integer.valueOf(ancho));     
                                                panelNuevo.setSize(panelNuevo.getAncho(), panelNuevo.getHeight());
                                            }                                       
                                            break;
                                        case "alto": 
                                            String alto =  hijoD.getValue().substring(1,hijoD.getValue().length()-1);                                
                                            if (esNumero(alto))
                                            {
                                                panelNuevo.setAlto(Integer.valueOf(alto));
                                                panelNuevo.setSize(panelNuevo.getWidth(), panelNuevo.getAlto());
                                            }                                                                                                                                   
                                            break; 
                                        case "alineado":                                                                        
                                            switch(hijoD.getValue())
                                            {
                                                case "\"izquierda\"":
                                                    panelNuevo.setAlineado("izquierda");
                                                    panelNuevo.setAlignmentX(LEFT_ALIGNMENT);
                                                    break;
                                                case "\"derecha\"":
                                                    panelNuevo.setAlineado("derecha");
                                                    panelNuevo.setAlignmentX(RIGHT_ALIGNMENT);
                                                    break;  
                                                case "\"centrado\"":
                                                    panelNuevo.setAlineado("centrado");
                                                    panelNuevo.setAlignmentX(CENTER_ALIGNMENT);
                                                    break;   
                                                default :
                                                    filasErrores.addRow(new String[]{"CHTML",String.valueOf(hijoD.getLinea()),String.valueOf(hijoD.getColumna()),
                                                        "Sintactico","Valor de alineacion incorrecto"});
                                                    break;                                          
                                            }                                
                                            break;                                     
                        }                    
                break;                      
                }                         
            }
        }
        panelNuevo.setElementos(elementosPanel);
        //dibujarPanel(panelNuevo);
        return panelNuevo;
   }
   
    public Tabla generarTabla(nodoChtml raiz)
    {
        Tabla tabla = new Tabla();
        return tabla;
    }
    
public void dibujarPanel(Panel contenedor)
{    
    posXAux = posYAux = xMaxAux = yMaxAux = 0;
    ArrayList<Elemento> lista = contenedor.getElementos();
    for(Elemento aux: lista)
    {
        switch(aux.getTipo())
        {
            case "boton":
                Boton boton =(Boton)aux.getValor();                
                boton.setBounds(posXAux, posYAux, boton.getAncho(),boton.getAlto());                  
                posicionesPanel(boton.getAncho(), boton.getAlto(), contenedor);         
                contenedor.add(boton);
                break;
            case "enlace":
                Enlace enlace =(Enlace)aux.getValor();                
                enlace.setBounds(posXAux, posYAux, enlace.getAncho(),enlace.getAlto());                
                posicionesPanel(enlace.getAncho(), enlace.getAlto(), contenedor);        
                contenedor.add(enlace);
                break; 
            case "salto":
                System.out.println("Salto de línea dentro del panel");
                if(yMaxAux == 0)
                {
                    yMaxAux = 15;
                }
                JLabel label = new JLabel();
                label.setBackground(contenedor.getBackground());
                label.setSize(yMaxAux, contenedor.getWidth()-xMaxAux-50);
                for(int contador = 0 ; contador<contenedor.getWidth()-xMaxAux-50;contador++){label.setText(label.getText() + " ");}
                //label.setBorder(BorderFactory.createLineBorder(Color.BLUE));
                posicionesPanel(label.getWidth(), label.getHeight(), contenedor);  
                
                contenedor.add(label);                
                break;                 
            case "spinner":
                Spinner spinner =(Spinner)aux.getValor();
                spinner.setBounds(posXAux, posYAux, spinner.getAncho(),spinner.getAlto());
                if(esNumero(spinner.getCadena()))
                {
                    spinner.setValue(Integer.valueOf(spinner.getCadena()));
                }                
                posicionesPanel(spinner.getAncho(), spinner.getAlto(), contenedor);                
                contenedor.add(spinner);
                break;                
            case "cajaOpciones":
                JComboBox opciones =(JComboBox)aux.getValor();
                opciones.setBounds(posXAux, posYAux, opciones.getWidth(), opciones.getHeight());                
                posicionesPanel(opciones.getWidth(), opciones.getHeight(), contenedor);                
                contenedor.add(opciones);
                break;                
            case "imagen":
                Imagen imagen =(Imagen)aux.getValor();
                imagen.setBounds(posXAux, posYAux, imagen.getAncho(),imagen.getAlto());
                ImageIcon icono = new ImageIcon(); 
                if(imagen.getRuta()!=null )
                {
                    if(!imagen.getRuta().equals(""))
                    {
                        icono =   new ImageIcon(imagen.getRuta().substring(1,imagen.getRuta().length()-1));
                    }   
                    if(!imagen.getRuta().substring(0,1).equals("\""))
                    {
                        icono = new ImageIcon(imagen.getRuta());
                    }  
                    ImageIcon iconoEscala = new ImageIcon(icono.getImage().getScaledInstance(imagen.getAncho(), imagen.getAlto(), java.awt.Image.SCALE_DEFAULT));                
                    imagen.setIcon(iconoEscala);                     
                    
                }                                                       
                posicionesPanel(imagen.getAncho(), imagen.getAlto(), contenedor);                
                contenedor.add(imagen);       
                break;                  
            case "texto":
                Texto texto =(Texto)aux.getValor();
                if(texto.getAlto()==0 && texto.getAncho()==0)
                {
                    
                    String[] auxiliar = texto.getCadena().split("\r");
                    int alto= auxiliar.length*20;
                    System.out.println("El texto no tiene dimensiones definidas");
                    System.out.println("\t"+texto.getCadena());
                    System.out.println("\tNo. líneas \t"+alto);
                    int ancho = 0;
                    for(String cad : auxiliar)
                    {
                        if(cad.length()>ancho){ancho=cad.length();}
                        System.out.println("\tNo. caracteres \t"+ancho);
                    }
                    texto.setText(texto.getText());   
                    texto.setAlto(alto);
                    texto.setAncho(ancho*7);                    
                }
                texto.setBounds(posXAux, posYAux, texto.getAncho(),texto.getAlto());
                posicionesPanel(texto.getAncho(), texto.getAlto(), contenedor);                
                contenedor.add(texto);                
                break;  
                
            case "caja":
                Caja caja =(Caja)aux.getValor();
                if(caja.getAlto()==0 && caja.getAncho()==0)
                {
                    String[] auxiliar = caja.getCadena().split("\r");
                    int alto = auxiliar.length;
                    int ancho = 0;
                    String valorCaja= "";
                    for(String cad : auxiliar)
                    {
                        valorCaja = valorCaja + cad;                        
                        ancho = ancho + cad.length();
                    }                    
                    caja.setText(valorCaja);   
                    caja.setAlto(20);
                    caja.setAncho(ancho*7);
                }
                caja.setBounds(posXAux, posYAux, caja.getAncho(),caja.getAlto());
                posicionesPanel(caja.getAncho(), caja.getAlto(), contenedor);                
                contenedor.add(caja);                
                break;                  
                
            case "area":
                areaTexto area =(areaTexto)aux.getValor();
                //area.setBounds(posX, posY, area.getAncho(),area.getAlto());                                
                JScrollPane nuevo = new JScrollPane(area);
                nuevo.setBounds(posXAux, posYAux, area.getWidth(),area.getHeight());
                posicionesPanel(area.getWidth(), area.getHeight(),contenedor); 
                contenedor.add(nuevo);                
                break;                 
                
            case "tabla":
                Tabla tabla =(Tabla)aux.getValor();
                tabla.setBounds(posXAux, posYAux, tabla.getAncho(),tabla.getAlto());                
                posicionesPanel(tabla.getAncho(), tabla.getAlto(), contenedor);       
                contenedor.add(tabla);
                break;     
                
            case "panel":
                Panel panel =(Panel)aux.getValor();
                //panel.setBackground(Color.black);
                if(panel.getWidth()==0){ panel.setSize(contenedor.getWidth(), panel.getHeight());}
                if(panel.getHeight()==0){panel.setSize(panel.getWidth(),100);}
                if(panel.getWidth()==0 && panel.getHeight() ==0){panel.setSize(contenedor.getWidth(),100);}                
                panel.setBorder(BorderFactory.createLineBorder(Color.black));
                panel.setSize(panel.getAncho(), panel.getAlto());
                panel.setBounds(posXAux, posYAux, panel.getAncho(),panel.getAlto());                
                posicionesPanel( panel.getAncho(),panel.getAlto(), contenedor);       
                contenedor.add(panel);
                break;                  
        }
    }
    this.repaint();
    
}  


public void posicionesPanel(int ancho, int alto, Panel contenedor)
{   
    int limite = contenedor.getAncho(); 
    if(alto>yMaxAux){yMaxAux = alto;}    
    if((posXAux + ancho)>= limite-ancho)        
    {
        posXAux = 0;
        posYAux = posYAux + yMaxAux;            
        yMaxAux= 0;              
    }
    else
    {
        posXAux = posXAux + ancho;
    }

}


public void posicionPanel(int ancho, int alto, Panel contenedor , int saltoY, int x, int y)
{   
    int limite = contenedor.getAncho(); 
    if(alto>saltoY){saltoY = alto;}    
    if((x + ancho)>= limite-ancho)        
    {
        x = 0;
        y = y + saltoY;            
        saltoY= 0;              
    }
    else
    {
        x = x + ancho;
    }

}
   
public void Interfaz(Panel contenedor)
{
    int x = 0;
    int y = 0;
    int saltoY = 0;
    int saltoX = 0;
    ArrayList<Elemento> elementos = contenedor.getElementos();
    
    for(Elemento aux: elementos)
    {
        switch(aux.getTipo())
        {
            case "boton":
                Boton boton =(Boton)aux.getValor();                
                boton.setBounds(x, y, boton.getAncho(),boton.getAlto());                  
                posicionPanel(boton.getAncho(), boton.getAlto(),  contenedor, saltoY, x, y);         
                contenedor.add(boton);
                break;
            case "enlace":
                Enlace enlace =(Enlace)aux.getValor();                
                enlace.setBounds(x, y, enlace.getAncho(),enlace.getAlto());                
                posicionPanel(enlace.getAncho(), enlace.getAlto(),contenedor, saltoY, x, y);        
                contenedor.add(enlace);
                break; 
            case "salto":
                if(saltoY == 0)
                {
                    saltoY = 20;
                }                
                x = 0;
                y = y + saltoY;            
                y= 0;  
                
                JLabel label = new JLabel();
                label.setBackground(contenedor.getBackground());
                label.setSize(saltoY, contenedor.getWidth()-x-50);
                for(int contador = 0 ; contador<contenedor.getWidth()-x-50;contador++){label.setText(label.getText() + " ");}
                //label.setBorder(BorderFactory.createLineBorder(Color.BLUE));
                posicionPanel(label.getWidth(), label.getHeight(), contenedor, saltoY, x, y);                  
                contenedor.add(label);                 
                break;                 
            case "spinner":
                Spinner spinner =(Spinner)aux.getValor();
                spinner.setBounds(x, y, spinner.getAncho(),spinner.getAlto());
                if(esNumero(spinner.getCadena()))
                {
                    spinner.setValue(Integer.valueOf(spinner.getCadena()));
                }                
                posicionPanel(spinner.getAncho(), spinner.getAlto(), contenedor, saltoY, x, y);                
                contenedor.add(spinner);
                break;                
            case "cajaOpciones":
                JComboBox opciones =(JComboBox)aux.getValor();
                opciones.setBounds(x, y, opciones.getWidth(), opciones.getHeight());                
                posicionPanel(opciones.getWidth(), opciones.getHeight(),contenedor, saltoY, x, y);                
                contenedor.add(opciones);
                break;                
            case "imagen":
                Imagen imagen =(Imagen)aux.getValor();
                imagen.setBounds(x, y, imagen.getAncho(),imagen.getAlto());
                ImageIcon icono = new ImageIcon(); 
                if(imagen.getRuta()!=null )
                {
                    if(!imagen.getRuta().equals(""))
                    {
                        icono =   new ImageIcon(imagen.getRuta().substring(1,imagen.getRuta().length()-1));
                    }   
                    if(!imagen.getRuta().substring(0,1).equals("\""))
                    {
                        icono = new ImageIcon(imagen.getRuta());
                    }  
                    ImageIcon iconoEscala = new ImageIcon(icono.getImage().getScaledInstance(imagen.getAncho(), imagen.getAlto(), java.awt.Image.SCALE_DEFAULT));                
                    imagen.setIcon(iconoEscala);                     
                    
                }                                                       
                posicionPanel(imagen.getAncho(), imagen.getAlto(), contenedor, saltoY, x, y);                
                contenedor.add(imagen);       
                break;                  
            case "texto":
                Texto texto =(Texto)aux.getValor();
                if(texto.getAlto()==0 && texto.getAncho()==0)
                {
                    
                    String[] auxiliar = texto.getCadena().split("\r");
                    int alto= auxiliar.length*20;
                    System.out.println("El texto no tiene dimensiones definidas");
                    System.out.println("\t"+texto.getCadena());
                    System.out.println("\tNo. líneas \t"+alto);
                    int ancho = 0;
                    for(String cad : auxiliar)
                    {
                        if(cad.length()>ancho){ancho=cad.length();}
                        System.out.println("\tNo. caracteres \t"+ancho);
                    }
                    texto.setText(texto.getText());   
                    texto.setAlto(alto);
                    texto.setAncho(ancho*7);                    
                }
                texto.setBounds(x, y, texto.getAncho(),texto.getAlto());
                posicionPanel(texto.getAncho(), texto.getAlto(), contenedor, saltoY, x, y);                
                contenedor.add(texto);                
                break;  
                
            case "caja":
                Caja caja =(Caja)aux.getValor();
                if(caja.getAlto()==0 && caja.getAncho()==0)
                {
                    String[] auxiliar = caja.getCadena().split("\r");
                    int alto = auxiliar.length;
                    int ancho = 0;
                    String valorCaja= "";
                    for(String cad : auxiliar)
                    {
                        valorCaja = valorCaja + cad;                        
                        ancho = ancho + cad.length();
                    }                    
                    caja.setText(valorCaja);   
                    caja.setAlto(20);
                    caja.setAncho(ancho*7);
                }
                caja.setBounds(x, y, caja.getAncho(),caja.getAlto());
                posicionPanel(caja.getAncho(), caja.getAlto(), contenedor, saltoY, x, y);                
                contenedor.add(caja);                
                break;                  
                
            case "area":
                areaTexto area =(areaTexto)aux.getValor();
                //area.setBounds(posX, posY, area.getAncho(),area.getAlto());                                
                JScrollPane nuevo = new JScrollPane(area);
                nuevo.setBounds(x, y, area.getAncho(),area.getAlto());
                posicionPanel(area.getAncho(), area.getAlto(), contenedor, saltoY, x, y); 
                contenedor.add(nuevo);                
                break;                 
                
            case "tabla":
                Tabla tabla =(Tabla)aux.getValor();
                tabla.setBounds(x, y, tabla.getAncho(),tabla.getAlto());                
                posicionPanel(tabla.getAncho(), tabla.getAlto(), contenedor, saltoY, x, y);       
                contenedor.add(tabla);
                break;     
                
            case "panel":
                Panel panel =(Panel)aux.getValor();
                if(panel.getWidth()==0){ panel.setSize(scroll.getWidth(), panel.getHeight());}
                if(panel.getHeight()==0){panel.setSize(panel.getWidth(),100);}
                if(panel.getWidth()==0 && panel.getHeight() ==0){panel.setSize(scroll.getWidth(),100);}
                panel.setBorder(BorderFactory.createLineBorder(Color.black));
                panel.setBounds(x, y, panel.getWidth(),panel.getHeight());
                Interfaz(panel);
                posicionPanel( panel.getWidth(),panel.getHeight(),contenedor, saltoY, x, y); 
                contenedor.add(panel);
                break;                  
        }
    }
    
    
}


public void generarInterfaz()
{
    scroll.removeAll();
    System.out.println("--------Numero de elementos : "+elementos.size());
    posX = posY = xMax = yMax = 0;
    for(Elemento aux: elementos)
    {
        switch(aux.getTipo())
        {
            case "boton":
                Boton boton =(Boton)aux.getValor();                
                boton.setBounds(posX, posY, boton.getAncho(),boton.getAlto());                  
                comprobarPosiciones(boton.getAncho(), boton.getAlto());         
                scroll.add(boton);
                break;
            case "enlace":
                Enlace enlace =(Enlace)aux.getValor();                
                enlace.setBounds(posX, posY, enlace.getAncho(),enlace.getAlto());                
                comprobarPosiciones(enlace.getAncho(), enlace.getAlto());        
                scroll.add(enlace);
                break; 
            case "salto":
                if(yMax == 0)
                {
                    yMax = 20;
                }                
                posX = 0;
                posY = posY + yMax;            
                yMax= 0;                   
                break;                 
            case "spinner":
                Spinner spinner =(Spinner)aux.getValor();
                spinner.setBounds(posX, posY, spinner.getAncho(),spinner.getAlto());
                if(esNumero(spinner.getCadena()))
                {
                    spinner.setValue(Integer.valueOf(spinner.getCadena()));
                }                
                comprobarPosiciones(spinner.getAncho(), spinner.getAlto());                
                scroll.add(spinner);
                break;                
            case "cajaOpciones":
                JComboBox opciones =(JComboBox)aux.getValor();
                opciones.setBounds(posX, posY, opciones.getWidth(), opciones.getHeight());                
                comprobarPosiciones(opciones.getWidth(), opciones.getHeight());                
                scroll.add(opciones);
                break;                
            case "imagen":
                Imagen imagen =(Imagen)aux.getValor();
                imagen.setBounds(posX, posY, imagen.getAncho(),imagen.getAlto());
                ImageIcon icono = new ImageIcon(); 
                if(imagen.getRuta()!=null )
                {
                    if(!imagen.getRuta().equals(""))
                    {
                        icono =   new ImageIcon(imagen.getRuta().substring(1,imagen.getRuta().length()-1));
                    }   
                    if(!imagen.getRuta().substring(0,1).equals("\""))
                    {
                        icono = new ImageIcon(imagen.getRuta());
                    }  
                    ImageIcon iconoEscala = new ImageIcon(icono.getImage().getScaledInstance(imagen.getAncho(), imagen.getAlto(), java.awt.Image.SCALE_DEFAULT));                
                    imagen.setIcon(iconoEscala);                     
                    
                }                                                       
                comprobarPosiciones(imagen.getAncho(), imagen.getAlto());                
                scroll.add(imagen);       
                break;                  
            case "texto":
                Texto texto =(Texto)aux.getValor();
                if(texto.getAlto()==0 && texto.getAncho()==0)
                {
                    
                    String[] auxiliar = texto.getCadena().split("\r");
                    int alto= auxiliar.length*20;
                    System.out.println("El texto no tiene dimensiones definidas");
                    System.out.println("\t"+texto.getCadena());
                    System.out.println("\tNo. líneas \t"+alto);
                    int ancho = 0;
                    for(String cad : auxiliar)
                    {
                        if(cad.length()>ancho){ancho=cad.length();}
                        System.out.println("\tNo. caracteres \t"+ancho);
                    }
                    texto.setText(texto.getText());   
                    texto.setAlto(alto);
                    texto.setAncho(ancho*7);                    
                }
                texto.setBounds(posX, posY, texto.getAncho(),texto.getAlto());
                comprobarPosiciones(texto.getAncho(), texto.getAlto());                
                scroll.add(texto);                
                break;  
                
            case "caja":
                Caja caja =(Caja)aux.getValor();
                if(caja.getAlto()==0 && caja.getAncho()==0)
                {
                    String[] auxiliar = caja.getCadena().split("\r");
                    int alto = auxiliar.length;
                    int ancho = 0;
                    String valorCaja= "";
                    for(String cad : auxiliar)
                    {
                        valorCaja = valorCaja + cad;                        
                        ancho = ancho + cad.length();
                    }                    
                    caja.setText(valorCaja);   
                    caja.setAlto(20);
                    caja.setAncho(ancho*7);
                }
                caja.setBounds(posX, posY, caja.getAncho(),caja.getAlto());
                comprobarPosiciones(caja.getAncho(), caja.getAlto());                
                scroll.add(caja);                
                break;                  
                
            case "area":
                areaTexto area =(areaTexto)aux.getValor();
                //area.setBounds(posX, posY, area.getAncho(),area.getAlto());                                
                JScrollPane nuevo = new JScrollPane(area);
                nuevo.setBounds(posX, posY, area.getAncho(),area.getAlto());
                comprobarPosiciones(area.getAncho(), area.getAlto()); 
                scroll.add(nuevo);                
                break;                 
                
            case "tabla":
                Tabla tabla =(Tabla)aux.getValor();
                tabla.setBounds(posX, posY, tabla.getAncho(),tabla.getAlto());                
                comprobarPosiciones(tabla.getAncho(), tabla.getAlto());       
                scroll.add(tabla);
                break;     
                
            case "panel":
                Panel panel =(Panel)aux.getValor();
                if(panel.getWidth()==0){ panel.setSize(scroll.getWidth(), panel.getHeight());}
                if(panel.getHeight()==0){panel.setSize(panel.getWidth(),100);}
                if(panel.getWidth()==0 && panel.getHeight() ==0){panel.setSize(scroll.getWidth(),100);}
                panel.setBorder(BorderFactory.createLineBorder(Color.black));
                panel.setBounds(posX, posY, panel.getWidth(),panel.getHeight());                
                comprobarPosiciones( panel.getWidth(),panel.getHeight()); 
                scroll.add(panel);
                break;                  
        }
    }
    this.repaint();
    
}   
   
public void yMax(int y)
{
    if(y>yMax)
    {
        yMax = y;       
    }

}
   
public void comprobarPosiciones(int ancho, int alto)
{   
    int limite = scroll.getWidth(); 
    if(alto>yMax){yMax = alto;}    
    if((posX + ancho)>= limite-ancho)        
    {
        posX = 0;
        posY = posY + yMax;
        System.out.println("Salto de linea de :"+yMax);        
        yMax= 0;              
    }
    else
    {
        posX = posX + ancho;
    }

}

public String quitarComillas(String cadena)
{
    String inicio = cadena.substring(0, 1);
    if(inicio.equals("\""))
    {
        return cadena.substring(1, cadena.length()-1);
    }
    return cadena.trim();
}
   
   
private static boolean esNumero(String cadena){
	try 
        {
		Integer.parseInt(cadena);
		return true;
	} catch (NumberFormatException nfe){
		return false;
	}
}   
   
   
   public Color buscarColor(nodoChtml raiz)
   {
       Color retorno = Color.white ;
       System.out.println("Buscando color: \t "+raiz.getValue());
        switch(raiz.getValue())
        {
            case "\"blue\"":
                retorno = Color.blue;
                break;
            case "\"black\"":
                retorno = Color.BLACK;
                break;
            case "\"gray\"":
                retorno = Color.GRAY;
                break;
            case "\"cyan\"":
                retorno = Color.CYAN;
                break;
            case "\"dark_gray\"":
                retorno = Color.DARK_GRAY;
                break;   
            case "\"green\"":
                retorno = Color.GREEN;
                break;
            case "\"light_gray\"":
                retorno = Color.LIGHT_GRAY;
                break;
            case "\"magenta\"":
                retorno = Color.MAGENTA;
                break;
            case "\"orange\"":
                retorno = Color.ORANGE;
                break;
            case "\"pink\"":
                retorno = Color.PINK;
                break;
            case "\"red\"":
                retorno = Color.RED;
                break;
            case "\"white\"":
                retorno = Color.WHITE;
                break;
            case "\"yellow\"":
                retorno = Color.YELLOW;
                break;  
            default:
                filasErrores.addRow(new String[]{"CHTML",String.valueOf(raiz.getLinea()),String.valueOf(raiz.getColumna()),"Semantico","Nombre de color no válido."});
                break;
        }   
        return retorno;
   }
   
   
   private static int hexToDec(String hex) {  
       Integer outputDecimal = 0;
        try
        { 
            outputDecimal = Integer.parseInt(hex, 16);
            System.out.print(outputDecimal+"\t D:\t" + hex);
            return outputDecimal;
        }

        catch(NumberFormatException ne)
        {
            return 300;
        }            
}
    
    
    
    
    public void imprimirReporteLexico(){
          String directorioHtml=PathActual()+"\\Lexico.html";

            if(tablaSimbolos_.isEmpty()){
                //JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");
            }else{
                File html=new File(directorioHtml);
                PrintWriter writer;

                try {
                    writer=new PrintWriter(html);
                    String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                        + "<head>\n" + "<title>TABLA DE TOKENS</title>\n" + "</head>\n"
                        + "<body>\n"
                        + "<h1 align=\"center\">ANALISIS LEXICO </h1>\n"
                        + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                        + "<table border=\"1\">\n"
                        + "<tr>\n"
                        + "<td>No.</td>\n"
                        + "<td>Columna</td>\n"
                        + "<td>Linea</td>\n"
                        + "<td>Tipo</td>\n"
                        + "<td>Valor</td>\n"
                            + "<td>Descripcion</td>\n";

                           for(int x=0;x<tablaSimbolos_.size();x++){
                           texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).columna+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).linea+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).tipo+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).Valor+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).descripcion+"</td>\n";
                           }

                        texto+="</tr>\n"+                    
                        "</table>\n"
                        + "</body>"
                        + "</html>";
                    writer.print(texto);
                    analisisLexico=texto;
                    writer.close();
                  //   abrirHtml(directorioHtml);
                } catch (FileNotFoundException ex) {

                }
            } 
    }    
    
    
    public void imprimirResultado(){
          String directorioHtml=PathActual()+"\\Resultado.html";

            if(tablaSimbolos_.isEmpty() && tablaSimbolos_.isEmpty()){
                JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");

            }else{
                File html=new File(directorioHtml);
                PrintWriter writer;

                try {
                    writer=new PrintWriter(html);

                    writer.print(Interfaz.resultado);
                  //  resultado=Interfaz.resultado;
                    writer.close();
                  //   abrirHtml(directorioHtml);
                } catch (FileNotFoundException ex) {

                }
            } 
    }    
    
    public void imprimirLexicos(){
         String directorioHtml=PathActual()+"\\Erores_lexicos.html";

           if(Interfaz.erroresLexicos.isEmpty()){
               //JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");

           }else{
               File html=new File(directorioHtml);
               PrintWriter writer;

               try {
                   writer=new PrintWriter(html);
                   String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                       + "<head>\n" + "<title>TABLA DE ERRORES</title>\n" + "</head>\n"
                       + "<body>\n"
                       + "<h1 align=\"center\">Errores Lexicos </h1>\n"
                       + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                       + "<table border=\"1\">\n"
                       + "<tr>\n"
                       + "<td>No.</td>\n"
                       + "<td>Columna</td>\n"
                       + "<td>Linea</td>\n"
                       + "<td>Tipo</td>\n"
                           + "<td>Descripcion</td>\n";

                          for(int x=0;x<erroresLexicos.size();x++){
                          texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).columna+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).linea+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).tipo+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).descripcion+"</td>\n";
                          }

                       texto+="</tr>\n"+                    
                       "</table>\n"
                       + "</body>"
                       + "</html>";
                   writer.print(texto);
                   this.ELexico=texto;
                   writer.close();
                 //   abrirHtml(directorioHtml);
               } catch (FileNotFoundException ex) {

               }
           } 
   }

   public void imprimirSintacticos(){
         String directorioHtml=PathActual()+"\\Erores_sintacticos.html";

           if(Interfaz.erroresLexicos.isEmpty()){
               //JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");

           }else{
               File html=new File(directorioHtml);
               PrintWriter writer;

               try {
                   writer=new PrintWriter(html);
                   String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                       + "<head>\n" + "<title>TABLA DE ERRORES</title>\n" + "</head>\n"
                       + "<body>\n"
                       + "<h1 align=\"center\">Errores Sintacticos </h1>\n"
                       + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                       + "<table border=\"1\">\n"
                       + "<tr>\n"
                       + "<td>No.</td>\n"
                       + "<td>Columna</td>\n"
                       + "<td>Linea</td>\n"
                       + "<td>Tipo</td>\n"
                           + "<td>Descripcion</td>\n";

                          for(int x=0;x<erroresSintacticos.size();x++){
                          texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).columna+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).linea+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).tipo+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).descripcion+"</td>\n";
                          }

                       texto+="</tr>\n"+                    
                       "</table>\n"
                       + "</body>"
                       + "</html>";
                   writer.print(texto);
                   analisisSintactico=texto;
                   writer.close();
                 //   abrirHtml(directorioHtml);
               } catch (FileNotFoundException ex) {

               }
           } 
   }

   public void imprimirSemanticos(){
         String directorioHtml=PathActual()+"\\Erores_semanticos.html";

           if(Interfaz.erroresSemanticos.isEmpty()){
              // JOptionPane.showMessageDialog(this,"No hay errores Semanticos");

           }else{
               File html=new File(directorioHtml);
               PrintWriter writer;

               try {
                   writer=new PrintWriter(html);
                   String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                       + "<head>\n" + "<title>TABLA De ERRORES</title>\n" + "</head>\n"
                       + "<body>\n"
                       + "<h1 align=\"center\">Errores Semanticos </h1>\n"
                       + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                       + "<table border=\"1\">\n"
                       + "<tr>\n"
                       + "<td>No.</td>\n"
                       + "<td>Columna</td>\n"
                       + "<td>Linea</td>\n"
                       + "<td>Tipo</td>\n"
                           + "<td>Descripcion</td>\n";

                          for(int x=0;x<erroresSemanticos.size();x++){
                          texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).columna+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).linea+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).tipo+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).descripcion+"</td>\n";
                          }

                       texto+="</tr>\n"+                    
                       "</table>\n"
                       + "</body>"
                       + "</html>";
                   writer.print(texto);
                   analisisSemantico=texto;
                   writer.close();
                 //   abrirHtml(directorioHtml);
               } catch (FileNotFoundException ex) {

               }
           } 
   }

   

    
    public String PathActual(){
        String path="";
         File miDir = new File (".");
         try {
           //System.out.println (miDir.getCanonicalPath());
           path=miDir.getCanonicalPath();
         }
         catch(Exception e) {
           e.printStackTrace();
           }
         return path;
    }    
    
    public void errores_consola(){
        String temporal="Linea           Columna           Descripcion                TIPO";
        for(int x=0;x<erroresLexicos.size();x++){
        temporal+="\n"+erroresLexicos.get(x).linea+"                "+erroresLexicos.get(x).columna+"          "+erroresLexicos.get(x).getDescripcion()+"       Lexico";
        }
        for(int x=0;x<erroresSintacticos.size();x++){
        temporal+="\n"+erroresSintacticos.get(x).linea+"                "+erroresSintacticos.get(x).columna+"           "+erroresSintacticos.get(x).getDescripcion()+"       Sintactico";
        }
        for(int x=0;x<erroresSemanticos.size();x++){
        temporal+="\n"+erroresSemanticos.get(x).linea+"               "+erroresSemanticos.get(x).columna+"              "+erroresSemanticos.get(x).getDescripcion()+"       Semantico";
        }
        
        /*Imprimimos los errores*/
        //Consola1.setText(temporal);
        System.out.println(temporal);

    }  
    
    
    public static void addChtml(String tipo, int linea, int columna, String descripcion, String valor)
    {                
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo(tipo);
        simbolo.setLinea(linea);
        simbolo.setColumna(columna);
        simbolo.setDescripcion(descripcion);
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(valor);                 
        tablaSimbolos_.add(simbolo);	            
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Menu;
    private javax.swing.JPanel Panel;
    private javax.swing.JTextArea archivoCHTML;
    private javax.swing.JTabbedPane areaOpciones;
    private javax.swing.JButton botonAdelante;
    private javax.swing.JButton botonAtras;
    private javax.swing.JButton botonHistorial;
    private javax.swing.JButton botonIr;
    private javax.swing.JButton botonOpciones;
    private javax.swing.JTabbedPane ccss1;
    private javax.swing.JTextArea ccssArea1;
    private javax.swing.JTabbedPane cjs1;
    private javax.swing.JTextArea cjsArea1;
    private javax.swing.JLabel etiquetaNombre;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel panelContenido;
    private javax.swing.JPanel panelMenu;
    private javax.swing.JPanel scroll;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTable tablaErrores;
    private javax.swing.JTable tablaSalida;
    private javax.swing.JTextField textRuta;
    // End of variables declaration//GEN-END:variables
}
