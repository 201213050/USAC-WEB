/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Principal;


import Source.CHTML.Scanner;
import Source.CHTML.dibujador;
import Source.CHTML.nodoChtml;
import Source.CHTML.sintactico;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author erick
 */
public class Panel extends javax.swing.JPanel {

    public static  int auxContador = 0;
    public static ArrayList<tablaSimbolos> tablaSimbolos_ = new ArrayList();
    public static ArrayList<Errores> erroresSintacticos = new ArrayList();
    public static ArrayList<Errores> erroresLexicos = new ArrayList();
    public static ArrayList<Errores> erroresSemanticos = new ArrayList();
    public String analisisLexico="";      
    public String analisisLexico_="";
    public static String resultado="";
    public String ELexico="";
    public String analisisSintactico="";
    public String analisisSemantico="";   
    public Scanner s;
    public sintactico p;
    public static nodoChtml raizChtml = new nodoChtml();
    public static int contadorChtml=0;
    public int contadorPaginas=0;
    public String consolaSalida = "";
    
    DefaultTableModel filasErrores = new DefaultTableModel(); 
    DefaultTableModel filasSalidas = new DefaultTableModel();
    int flagOpciones = 0;
    int posX = 0;
    int posY = 0;
    Color colorFondo = Color.WHITE ;
    
    //JScrollPane scroll = new JScrollPane();
    
    
    
    public ArrayList<String> archivos = new ArrayList();
    /**
     * Creates new form Panel
     */
    public Panel() {
        initComponents();
        filasErrores = new DefaultTableModel(); 
        filasSalidas = new DefaultTableModel();
        filasErrores.addColumn("Archivo");
        filasErrores.addColumn("Línea");
        filasErrores.addColumn("Columna");
        filasErrores.addColumn("Tipo");
        filasErrores.addColumn("Descripción");
        tablaErrores.setModel(filasErrores);
        
        filasSalidas.addColumn("Archivo");
        filasSalidas.addColumn("Línea");
        filasSalidas.addColumn("Columna");
        filasSalidas.addColumn("SalidaX"); 
        tablaSalida.setModel(filasSalidas);
        //this.panelContenido.add(scroll);
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        panelContenido = new javax.swing.JPanel();
        scrollPanel = new javax.swing.JScrollPane();
        scroll = new javax.swing.JPanel();
        panelMenu = new javax.swing.JPanel();
        Menu = new javax.swing.JPanel();
        botonAtras = new javax.swing.JButton();
        botonAdelante = new javax.swing.JButton();
        botonIr = new javax.swing.JButton();
        textRuta = new javax.swing.JTextField();
        botonOpciones = new javax.swing.JButton();
        botonHistorial = new javax.swing.JButton();
        etiquetaNombre = new javax.swing.JLabel();
        areaOpciones = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        archivoCHTML = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        ccss1 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        ccssArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        cjs1 = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        cjsArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaSalida = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaErrores = new javax.swing.JTable();

        setLayout(new javax.swing.OverlayLayout(this));

        Panel.setLayout(new java.awt.BorderLayout(10, 0));

        panelContenido.setBackground(new java.awt.Color(51, 204, 255));
        panelContenido.setLayout(new javax.swing.OverlayLayout(panelContenido));

        scroll.setBackground(new java.awt.Color(153, 255, 255));

        javax.swing.GroupLayout scrollLayout = new javax.swing.GroupLayout(scroll);
        scroll.setLayout(scrollLayout);
        scrollLayout.setHorizontalGroup(
            scrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1028, Short.MAX_VALUE)
        );
        scrollLayout.setVerticalGroup(
            scrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 211, Short.MAX_VALUE)
        );

        scrollPanel.setViewportView(scroll);

        panelContenido.add(scrollPanel);

        Panel.add(panelContenido, java.awt.BorderLayout.CENTER);

        panelMenu.setBackground(new java.awt.Color(0, 255, 102));
        panelMenu.setLayout(new java.awt.BorderLayout());

        botonAtras.setText("<-");

        botonAdelante.setText("->");
        botonAdelante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAdelanteActionPerformed(evt);
            }
        });

        botonIr.setText("Ir a");
        botonIr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIrActionPerformed(evt);
            }
        });

        textRuta.setText("C:\\Users\\erick\\Documents\\NetBeansProjects\\USAC-WEB\\prueba.html");

        botonOpciones.setText("Opciones");
        botonOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpcionesActionPerformed(evt);
            }
        });

        botonHistorial.setText("Historial");
        botonHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonHistorialActionPerformed(evt);
            }
        });

        etiquetaNombre.setText("Inicio");

        javax.swing.GroupLayout MenuLayout = new javax.swing.GroupLayout(Menu);
        Menu.setLayout(MenuLayout);
        MenuLayout.setHorizontalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonAdelante, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonIr, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiquetaNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                    .addComponent(textRuta)))
        );
        MenuLayout.setVerticalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuLayout.createSequentialGroup()
                .addComponent(etiquetaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonAdelante, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonIr, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botonAtras, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelMenu.add(Menu, java.awt.BorderLayout.CENTER);

        Panel.add(panelMenu, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new javax.swing.OverlayLayout(jPanel1));

        archivoCHTML.setColumns(20);
        archivoCHTML.setRows(5);
        jScrollPane3.setViewportView(archivoCHTML);

        jPanel1.add(jScrollPane3);

        areaOpciones.addTab("CHTML", jPanel1);

        jPanel2.setLayout(new javax.swing.OverlayLayout(jPanel2));

        ccssArea1.setColumns(20);
        ccssArea1.setRows(5);
        jScrollPane4.setViewportView(ccssArea1);

        ccss1.addTab("tab1", jScrollPane4);

        jPanel2.add(ccss1);

        areaOpciones.addTab("CCSS", jPanel2);

        jPanel3.setLayout(new javax.swing.OverlayLayout(jPanel3));

        cjsArea1.setColumns(20);
        cjsArea1.setRows(5);
        jScrollPane5.setViewportView(cjsArea1);

        cjs1.addTab("tab1", jScrollPane5);

        jPanel3.add(cjs1);

        areaOpciones.addTab("CJS", jPanel3);

        jPanel4.setLayout(new javax.swing.OverlayLayout(jPanel4));

        tablaSalida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Archivo", "Línea", "Columna", "Salida"
            }
        ));
        jScrollPane1.setViewportView(tablaSalida);
        if (tablaSalida.getColumnModel().getColumnCount() > 0) {
            tablaSalida.getColumnModel().getColumn(0).setHeaderValue("Archivo");
            tablaSalida.getColumnModel().getColumn(1).setHeaderValue("Línea");
            tablaSalida.getColumnModel().getColumn(2).setHeaderValue("Columna");
            tablaSalida.getColumnModel().getColumn(3).setHeaderValue("Salida");
        }

        jPanel4.add(jScrollPane1);

        areaOpciones.addTab("Consolo Salida", jPanel4);

        jPanel5.setLayout(new javax.swing.OverlayLayout(jPanel5));

        tablaErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Archivo", "Línea", "Columna", "Tipo", "Descripción"
            }
        ));
        jScrollPane2.setViewportView(tablaErrores);

        jPanel5.add(jScrollPane2);

        areaOpciones.addTab("Consola Errores", jPanel5);

        Panel.add(areaOpciones, java.awt.BorderLayout.PAGE_END);

        add(Panel);
    }// </editor-fold>//GEN-END:initComponents

    private void botonAdelanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAdelanteActionPerformed

    }//GEN-LAST:event_botonAdelanteActionPerformed

    private void botonIrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIrActionPerformed
        try {
            analizar();
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }

        generarInterfaz();
    }//GEN-LAST:event_botonIrActionPerformed

    private void botonHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonHistorialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonHistorialActionPerformed

    private void botonOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpcionesActionPerformed
        if(flagOpciones==0)
        {
            this.areaOpciones.hide();
            flagOpciones = 1;
            //this.repaint();
        }
        if(flagOpciones==1)
        {
            this.areaOpciones.show(true);
            flagOpciones = 0;
            //this.repaint();
        }        
    }//GEN-LAST:event_botonOpcionesActionPerformed

    
    
public void analizar() throws IOException
{
        this.scroll.removeAll();
        tablaSimbolos_.clear();
        erroresLexicos.clear();
        erroresSintacticos.clear();

        if(true)
        {

            compilar();
            if((erroresLexicos.size()!=0)||(erroresSintacticos.size()!=0)||(erroresSemanticos.size()!=0)){
            errores_consola();
            }
            if((erroresLexicos.size()==0)&&(erroresSintacticos.size()==0)&&(erroresSemanticos.size()==0)){
            //Consola1.setText("");
            }
            
            dibujador aux = new dibujador();
            raizChtml = Interfaz.raizChtml;
            aux.generarGrafica(raizChtml); // Dibujamos el arbol
            //System.out.println(aux.dibujarInterfaz(raizChtml,contadorPaginas)); // Generamos interfaz :v
            //aux.imprimirtodo(raizChtml, contadorChtml);

            
            limpiarSalidas();
            dibujarInterfaz(raizChtml);
            imprimirReporteLexico();
            imprimirResultado();
            imprimirLexicos();
            imprimirSintacticos();
            imprimirSemanticos();
        }
    
    
} 

public void limpiarSalidas()
{
        filasErrores = new DefaultTableModel(); 
        filasSalidas = new DefaultTableModel();
        filasErrores.addColumn("Archivo");
        filasErrores.addColumn("Línea");
        filasErrores.addColumn("Columna");
        filasErrores.addColumn("Tipo");
        filasErrores.addColumn("Descripción");
        tablaErrores.setModel(filasErrores);
        
        filasSalidas.addColumn("Archivo");
        filasSalidas.addColumn("Línea");
        filasSalidas.addColumn("Columna");
        filasSalidas.addColumn("SalidaX"); 
        tablaSalida.setModel(filasSalidas);
}

public void compilar(){

        
        String path=textRuta.getText();  
         try {            
            s=new Scanner(new java.io.FileReader(path)); 
            
              
            p = new sintactico(s);
            p.parse();
            tablaSimbolos_ = Interfaz.tablaSimbolos_;
            int numero= tablaSimbolos_.size();
            System.out.println("Columna\tLinea\tValor\tTipo\tDescripción");                
            for(int n=0;n<numero;n++)
            {
                
                System.out.println(tablaSimbolos_.get(n).columna + "\t"+tablaSimbolos_.get(n).linea+ "\t"+tablaSimbolos_.get(n).Valor+ "\t"+tablaSimbolos_.get(n).tipo+ "\t\t"+tablaSimbolos_.get(n).descripcion);
            
            }
            System.out.println(numero);

            
//            Consola1.setText(p.textoConsola1);

            
            
           
            
           
        }
        catch(Exception e) { System.out.println(e.getMessage());}
    
    

}



   public void dibujarInterfaz(nodoChtml raiz)
    {
        
        String retorno="";
        if(raiz!=null)
        {
            System.out.println(raiz.getValue());
            switch(raiz.getValue())
            {
                case "DOCUMENTO":
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        dibujarInterfaz(aux);
                    }
                    break;
                    
                case "ENCABEZADO":                                
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        dibujarInterfaz(aux);
                    }
                    break;
                case "LISTAARCHIVOS":
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        archivos.add(aux.getValue()); // Agregamos los archivos a analizar.
                    }
                    break;
                case "TITULO": 
                    String titulo = "";
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        titulo = titulo + aux.getValue();
                    }                                    
                    etiquetaNombre.setText(titulo);
                    break;
                    
                case  "CUERPO":
                    nodoChtml auxiliar = raiz.getHijos().get(0);
                    if(auxiliar.getValue().equals("CONTENIDO"))
                    {
                        dibujarInterfaz(raiz.getHijos().get(0));
                        
                    }
                    else
                    {
                        if(auxiliar.getValue().substring(1,2).equals("#"))
                        {
                            if(auxiliar.getValue().length()==9)
                            {
                                //Color colorFodo = new Color(int r, int g, int b, int a);
                                //this.scroll.setBackground(colorFondo);
                                int r,g,b,a;
                                String hr,hg,hb,ha;
                                String entrada= auxiliar.getValue();
                                hr = entrada.substring(2,4);
                                hg = entrada.substring(4,6);
                                hb = entrada.substring(6,8);

                                r = hexToDec(hr);
                                g = hexToDec(hg);
                                b = hexToDec(hb);
                                a=0;
                                if(r==300 || g ==300 || b==300)
                                {
                                    filasErrores.addRow(new String[]{"CHTML",String.valueOf(auxiliar.getLinea()),String.valueOf(auxiliar.getColumna()),"Semantico", auxiliar.getValue() + " Valor rgb no valido."});
                                    break;
                                }

                                this.scroll.setBackground(new Color(r,g,b));
                                colorFondo = new Color(r,g,b);
                            }
                            else
                            {
                                filasErrores.addRow(new String[]{"CHTML",String.valueOf(auxiliar.getLinea()),String.valueOf(auxiliar.getColumna()),"Semantico","Valor rgb no valido."});
                                break;
                            }
                        }
                        else
                        {
                            this.scroll.setBackground(buscarColor(raiz.getHijos().get(0)));
                            colorFondo = buscarColor(raiz.getHijos().get(0));
                        }
                        dibujarInterfaz(raiz.getHijos().get(1));
                    }
                    break;
                    
                    
                case "CONTENIDO"   :
                    for(nodoChtml aux: raiz.getHijos())
                    {
                        dibujarInterfaz(aux);
                    }
                    break;
                    
                case "ENLACE":
                    System.out.println("---------------------------ENLACE---------------------");
                    //Vemos todos los elementos :v
                    Boton enlace = new Boton();
                    enlace.setBackground(colorFondo);
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {
                                case "ruta":
                                    enlace.setRuta(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "id":
                                    enlace.setId(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "grupo":
                                    enlace.setGrupo(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "cadena":
                                    enlace.setCadena(aux.getHijos().get(1).getValue());                                    
                                    enlace.setText(enlace.getCadena());
                                    break; 
                                case "ancho":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        enlace.setAncho(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                       
                                    break;
                                case "alto":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        enlace.setAlto(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            enlace.setAlineado("izquierda");
                                            enlace.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            enlace.setAlineado("derecha");
                                            enlace.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            enlace.setAlineado("centrado");
                                            enlace.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+enlace.getAlineado());
                                    break;                                     
                            }
                        }
                    }
                    /*
                    
                    */                    
                    
                    enlace.setBounds(posX, posY, enlace.getAncho(), enlace.getAlto());  
                    comprobarPosiciones(enlace.getAncho(), enlace.getAlto());
                    this.scroll.add(enlace);
                    break;
                    
                    
                    
                    
                case "TEXTO":
                    System.out.println("---------------------------TEXTO---------------------");
                    //Vemos todos los elementos :v
                    Texto texto = new Texto();
                    texto.setBackground(colorFondo);
                    for(nodoChtml aux: raiz.getHijos())
                    {                        
                        if(aux.getValue().equals("ELEMENTO"))
                        {
                            switch(aux.getHijos().get(0).getValue().toLowerCase())
                            {                                                                 
                                case "id":
                                    texto.setName(aux.getHijos().get(1).getValue());
                                    break;
                                case "grupo":
                                    texto.setGrupo(aux.getHijos().get(1).getValue());                                    
                                    break;
                                case "cadena":
                                    texto.setCadena(aux.getHijos().get(1).getValue());                                    
                                    texto.setText(texto.getCadena());
                                    //texto.setAlto(texto.cadena.length());
                                    break; 
                                case "ancho":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        texto.setAncho(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                       
                                    break;
                                case "alto":                                                                        
                                    if (esNumero(aux.getHijos().get(1).getValue()))
                                    {
                                        texto.setAlto(Integer.valueOf(aux.getHijos().get(1).getValue()));
                                    }                                                                                                                                   
                                    break; 
                                case "alineado":                                                                        
                                    switch(aux.getHijos().get(1).getValue())
                                    {
                                        case "\"izquierda\"":
                                            texto.setAlineado("izquierda");
                                            texto.setAlignmentX(LEFT_ALIGNMENT);
                                            break;
                                        case "\"derecha\"":
                                            texto.setAlineado("derecha");
                                            texto.setAlignmentX(RIGHT_ALIGNMENT);
                                            break;  
                                        case "\"centrado\"":
                                            texto.setAlineado("centrado");
                                            texto.setAlignmentX(CENTER_ALIGNMENT);
                                            break;   
                                        default :
                                            filasErrores.addRow(new String[]{"CHTML",String.valueOf(aux.getHijos().get(1).getLinea()),String.valueOf(aux.getHijos().get(1).getColumna()),
                                                "Sintactico","Valor de alineacion incorrecto"});
                                            break;                                          
                                    }
                                    System.out.println("------------ALINEACION: \t"+texto.getAlineado());
                                    break;                                     
                            }
                        }
                    }                    
                                        
                    texto.setBounds(posX, posY, texto.getAlto(),texto.getAncho());   
                    comprobarPosiciones(texto.getAncho(), texto.getAlto());
                    this.scroll.add(texto);
                    break;                    
                    
                    
            }
        }        
    
    }
   
public void comprobarPosiciones(int ancho, int alto)
{
    int limite = this.scroll.getWidth();
    if((posX + ancho)>= limite)        
    {
        posX = 0;
        posY = posY + alto;
    }
    else
    {
        posX = posX + ancho;
    }

}   
   
   
private static boolean esNumero(String cadena){
	try {
		Integer.parseInt(cadena);
		return true;
	} catch (NumberFormatException nfe){
		return false;
	}
}   
   
   
   public Color buscarColor(nodoChtml raiz)
   {
       Color retorno = Color.white ;
       System.out.println("Buscando color: \t "+raiz.getValue());
        switch(raiz.getValue())
        {
            case "\"blue\"":
                retorno = Color.blue;
                break;
            case "\"black\"":
                retorno = Color.BLACK;
                break;
            case "\"gray\"":
                retorno = Color.GRAY;
                break;
            case "\"cyan\"":
                retorno = Color.CYAN;
                break;
            case "\"dark_gray\"":
                retorno = Color.DARK_GRAY;
                break;   
            case "\"green\"":
                retorno = Color.GREEN;
                break;
            case "\"light_gray\"":
                retorno = Color.LIGHT_GRAY;
                break;
            case "\"magenta\"":
                retorno = Color.MAGENTA;
                break;
            case "\"orange\"":
                retorno = Color.ORANGE;
                break;
            case "\"pink\"":
                retorno = Color.PINK;
                break;
            case "\"red\"":
                retorno = Color.RED;
                break;
            case "\"white\"":
                retorno = Color.WHITE;
                break;
            case "\"yellow\"":
                retorno = Color.YELLOW;
                break;  
            default:
                filasErrores.addRow(new String[]{"CHTML",String.valueOf(raiz.getLinea()),String.valueOf(raiz.getColumna()),"Semantico","Nombre de color no válido."});
                break;
        }   
        return retorno;
   }
   
   
   private static int hexToDec(String hex) {  
       Integer outputDecimal = 0;
        try
        { 
            outputDecimal = Integer.parseInt(hex, 16);
            System.out.print(outputDecimal+"\t D:\t" + hex);
            return outputDecimal;
        }

        catch(NumberFormatException ne)
        {
            return 300;
        }            
}
    
    
    
    
    public void imprimirReporteLexico(){
          String directorioHtml=PathActual()+"\\Lexico.html";

            if(tablaSimbolos_.isEmpty() && tablaSimbolos_.isEmpty()){
                JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");

            }else{
                File html=new File(directorioHtml);
                PrintWriter writer;

                try {
                    writer=new PrintWriter(html);
                    String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                        + "<head>\n" + "<title>TABLA DE TOKENS</title>\n" + "</head>\n"
                        + "<body>\n"
                        + "<h1 align=\"center\">ANALISIS LEXICO </h1>\n"
                        + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                        + "<table border=\"1\">\n"
                        + "<tr>\n"
                        + "<td>No.</td>\n"
                        + "<td>Columna</td>\n"
                        + "<td>Linea</td>\n"
                        + "<td>Tipo</td>\n"
                        + "<td>Valor</td>\n"
                            + "<td>Descripcion</td>\n";

                           for(int x=0;x<tablaSimbolos_.size();x++){
                           texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).columna+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).linea+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).tipo+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).Valor+"</td>\n"
                        + "<td>"+tablaSimbolos_.get(x).descripcion+"</td>\n";
                           }

                        texto+="</tr>\n"+                    
                        "</table>\n"
                        + "</body>"
                        + "</html>";
                    writer.print(texto);
                    analisisLexico=texto;
                    writer.close();
                  //   abrirHtml(directorioHtml);
                } catch (FileNotFoundException ex) {

                }
            } 
    }    
    
    
    public void imprimirResultado(){
          String directorioHtml=PathActual()+"\\Resultado.html";

            if(tablaSimbolos_.isEmpty() && tablaSimbolos_.isEmpty()){
                JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");

            }else{
                File html=new File(directorioHtml);
                PrintWriter writer;

                try {
                    writer=new PrintWriter(html);

                    writer.print(Interfaz.resultado);
                  //  resultado=Interfaz.resultado;
                    writer.close();
                  //   abrirHtml(directorioHtml);
                } catch (FileNotFoundException ex) {

                }
            } 
    }    
    
    public void imprimirLexicos(){
         String directorioHtml=PathActual()+"\\Erores_lexicos.html";

           if(Interfaz.erroresLexicos.isEmpty()){
               //JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");

           }else{
               File html=new File(directorioHtml);
               PrintWriter writer;

               try {
                   writer=new PrintWriter(html);
                   String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                       + "<head>\n" + "<title>TABLA DE ERRORES</title>\n" + "</head>\n"
                       + "<body>\n"
                       + "<h1 align=\"center\">Errores Lexicos </h1>\n"
                       + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                       + "<table border=\"1\">\n"
                       + "<tr>\n"
                       + "<td>No.</td>\n"
                       + "<td>Columna</td>\n"
                       + "<td>Linea</td>\n"
                       + "<td>Tipo</td>\n"
                           + "<td>Descripcion</td>\n";

                          for(int x=0;x<erroresLexicos.size();x++){
                          texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).columna+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).linea+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).tipo+"</td>\n"
                       + "<td>"+erroresLexicos.get(x).descripcion+"</td>\n";
                          }

                       texto+="</tr>\n"+                    
                       "</table>\n"
                       + "</body>"
                       + "</html>";
                   writer.print(texto);
                   this.ELexico=texto;
                   writer.close();
                 //   abrirHtml(directorioHtml);
               } catch (FileNotFoundException ex) {

               }
           } 
   }

   public void imprimirSintacticos(){
         String directorioHtml=PathActual()+"\\Erores_sintacticos.html";

           if(Interfaz.erroresLexicos.isEmpty()){
               //JOptionPane.showMessageDialog(this,"No se ha hecho ningun analisis :v");

           }else{
               File html=new File(directorioHtml);
               PrintWriter writer;

               try {
                   writer=new PrintWriter(html);
                   String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                       + "<head>\n" + "<title>TABLA DE ERRORES</title>\n" + "</head>\n"
                       + "<body>\n"
                       + "<h1 align=\"center\">Errores Sintacticos </h1>\n"
                       + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                       + "<table border=\"1\">\n"
                       + "<tr>\n"
                       + "<td>No.</td>\n"
                       + "<td>Columna</td>\n"
                       + "<td>Linea</td>\n"
                       + "<td>Tipo</td>\n"
                           + "<td>Descripcion</td>\n";

                          for(int x=0;x<erroresSintacticos.size();x++){
                          texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).columna+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).linea+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).tipo+"</td>\n"
                       + "<td>"+erroresSintacticos.get(x).descripcion+"</td>\n";
                          }

                       texto+="</tr>\n"+                    
                       "</table>\n"
                       + "</body>"
                       + "</html>";
                   writer.print(texto);
                   analisisSintactico=texto;
                   writer.close();
                 //   abrirHtml(directorioHtml);
               } catch (FileNotFoundException ex) {

               }
           } 
   }

   public void imprimirSemanticos(){
         String directorioHtml=PathActual()+"\\Erores_semanticos.html";

           if(Interfaz.erroresSemanticos.isEmpty()){
              // JOptionPane.showMessageDialog(this,"No hay errores Semanticos");

           }else{
               File html=new File(directorioHtml);
               PrintWriter writer;

               try {
                   writer=new PrintWriter(html);
                   String texto="<html>\n <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />"
                       + "<head>\n" + "<title>TABLA De ERRORES</title>\n" + "</head>\n"
                       + "<body>\n"
                       + "<h1 align=\"center\">Errores Semanticos </h1>\n"
                       + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                       + "<table border=\"1\">\n"
                       + "<tr>\n"
                       + "<td>No.</td>\n"
                       + "<td>Columna</td>\n"
                       + "<td>Linea</td>\n"
                       + "<td>Tipo</td>\n"
                           + "<td>Descripcion</td>\n";

                          for(int x=0;x<erroresSemanticos.size();x++){
                          texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).columna+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).linea+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).tipo+"</td>\n"
                       + "<td>"+erroresSemanticos.get(x).descripcion+"</td>\n";
                          }

                       texto+="</tr>\n"+                    
                       "</table>\n"
                       + "</body>"
                       + "</html>";
                   writer.print(texto);
                   analisisSemantico=texto;
                   writer.close();
                 //   abrirHtml(directorioHtml);
               } catch (FileNotFoundException ex) {

               }
           } 
   }

   
    public void generarInterfaz()
    {
        
        
        
        
    }
    
    public String PathActual(){
        String path="";
         File miDir = new File (".");
         try {
           //System.out.println (miDir.getCanonicalPath());
           path=miDir.getCanonicalPath();
         }
         catch(Exception e) {
           e.printStackTrace();
           }
         return path;
    }    
    
    public void errores_consola(){
        String temporal="Linea           Columna           Descripcion                TIPO";
        for(int x=0;x<erroresLexicos.size();x++){
        temporal+="\n"+erroresLexicos.get(x).linea+"                "+erroresLexicos.get(x).columna+"          "+erroresLexicos.get(x).getDescripcion()+"       Lexico";
        }
        for(int x=0;x<erroresSintacticos.size();x++){
        temporal+="\n"+erroresSintacticos.get(x).linea+"                "+erroresSintacticos.get(x).columna+"           "+erroresSintacticos.get(x).getDescripcion()+"       Sintactico";
        }
        for(int x=0;x<erroresSemanticos.size();x++){
        temporal+="\n"+erroresSemanticos.get(x).linea+"               "+erroresSemanticos.get(x).columna+"              "+erroresSemanticos.get(x).getDescripcion()+"       Semantico";
        }
        
        /*Imprimimos los errores*/
        //Consola1.setText(temporal);
        System.out.println(temporal);

    }  
    
    
    public static void addChtml(String tipo, int linea, int columna, String descripcion, String valor)
    {                
        Interfaz.auxContador++;                                
        //Generamos la entrada en la tabla de simbolos.
        tablaSimbolos simbolo=new tablaSimbolos();
        simbolo.setTipo(tipo);
        simbolo.setLinea(linea);
        simbolo.setColumna(columna);
        simbolo.setDescripcion(descripcion);
        simbolo.setIndex(Interfaz.auxContador);
        simbolo.setValor(valor);                 
        tablaSimbolos_.add(simbolo);	            
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Menu;
    private javax.swing.JPanel Panel;
    private javax.swing.JTextArea archivoCHTML;
    private javax.swing.JTabbedPane areaOpciones;
    private javax.swing.JButton botonAdelante;
    private javax.swing.JButton botonAtras;
    private javax.swing.JButton botonHistorial;
    private javax.swing.JButton botonIr;
    private javax.swing.JButton botonOpciones;
    private javax.swing.JTabbedPane ccss1;
    private javax.swing.JTextArea ccssArea1;
    private javax.swing.JTabbedPane cjs1;
    private javax.swing.JTextArea cjsArea1;
    private javax.swing.JLabel etiquetaNombre;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel panelContenido;
    private javax.swing.JPanel panelMenu;
    private javax.swing.JPanel scroll;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTable tablaErrores;
    private javax.swing.JTable tablaSalida;
    private javax.swing.JTextField textRuta;
    // End of variables declaration//GEN-END:variables
}
